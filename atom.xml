<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hassan&#39;s Blog</title>
  
  <subtitle>时不我待，只争朝夕</subtitle>
  <link href="https://hassanwong.top/atom.xml" rel="self"/>
  
  <link href="https://hassanwong.top/"/>
  <updated>2021-05-07T04:45:00.000Z</updated>
  <id>https://hassanwong.top/</id>
  
  <author>
    <name>HassanWong</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>和声那些事</title>
    <link href="https://hassanwong.top/posts/664d97f5/"/>
    <id>https://hassanwong.top/posts/664d97f5/</id>
    <published>2021-05-07T04:45:00.000Z</published>
    <updated>2021-05-07T04:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前言</strong>：</p><p>唱歌是我的爱好之一，玩了这么多年全民K歌，有点fed up with it，突然想玩玩和声try some new shit，于是就开始了对爱好皮毛的探索旅程。（<a href="https://www.bilibili.com/video/BV1yJ41117iF">原谅我习惯双语混杂表达</a>）</p></blockquote><h2 id="什么是和声？"><a href="#什么是和声？" class="headerlink" title="什么是和声？"></a>什么是和声？</h2><p>通常是指某一调性内的和弦结构及和弦之间的连接方式。你可以广义地理解为伴奏里那小小的人声，通常和主声交织在一起。和声可以在纵向上和横向上丰富音乐，让音乐听起来更丰满、更立体，好的和声进行能让一首歌曲变得更加好听。无论是学习作曲还是编曲都需要学习和声。</p><h2 id="和声编配"><a href="#和声编配" class="headerlink" title="和声编配"></a>和声编配</h2><ol><li><p><strong>同度</strong>（适合不同音色的俩人）、<strong>三度</strong>、<strong>四度</strong>、<strong>五度</strong>、<strong>八度</strong>。不要所有旋律都是三度或四度，这样会显得特别单调，同时也得保证每轨单独播放也是好听的。我个人喜欢往上或往下叠唱三度，这也最常见的和声方式。</p><blockquote><p>我发现和声和钢琴的和弦构造有异曲同工之妙，对钢琴有了解的友友们可能会有这种感jio。</p></blockquote></li><li><p><strong>Freestyle</strong>。你可以凭借乐感和一定的理论知识去设计和声，通过Freestyle来找灵感，挑出比较和谐、悦耳的那种和声设计。</p></li></ol><div class="note warning no-icon flat"><p><strong>注意</strong>：<strong>不要全曲都有和声</strong>。偶尔的和声有画龙点睛的效果，一首歌的层次感很重要，全程高能会使人感到听觉疲惫。</p></div><h2 id="和声该如何演唱？"><a href="#和声该如何演唱？" class="headerlink" title="和声该如何演唱？"></a>和声该如何演唱？</h2><p>从和声的<strong>咬字</strong>角度，得依据<strong>风格</strong>来定，像R&amp;B风格的和声就通常很丰富，和声和主声基本是同等地位，所以作曲时，和声和主声可以一样的 <del>骚</del> 飘，各种转音玩起来，但其他风格，和声地位通常低于主声，以达到衬托主声作用，此时和声的咬字可以相应柔和些。</p><p>从<strong>气息</strong>角度，和声的<strong>气声居多</strong>，可以营造那种整首歌的那种氛围。</p><p>从<strong>录音</strong>角度，录和声时距离麦克风最好比录主声要远一些。</p><h3 id="常见的和声方法"><a href="#常见的和声方法" class="headerlink" title="常见的和声方法"></a>常见的和声方法</h3><ol><li><p><strong>叠唱</strong></p><p> 可以在和弦的组成音里面找到可以跟主旋律构成相对和谐音程的音，然后再试着让自己的和声变得富有旋律性。更为高级一点的做法是你还可以使用一些比较不和谐，听起来“怪怪”的音程，制造听觉上的一些冲突，然后去把它解决掉，让音乐更富张力。</p></li><li><p><strong>Call and Response形式的使用</strong></p><p> Call and Response的形式源自于黑人音乐，可以理解为中国民俗对山歌的“一呼一应”。举个栗子，比如EXO的《十二月的奇迹》2分58秒处的“你改变了一切，我整个声明，这一切，我整个世界”，就是非常典型的Call and response的手法，这一段因为有和声的衬托带来的情感宣泄，给这首歌带来了一定的高潮。其实你平时仔细听歌，你会发现很多歌都有这样的设计。</p></li><li><p><strong>男女齐唱</strong></p><p> 当男女生一起齐唱同一个旋律的时候，会有一种天然的和声感，这是因为男生女生本身音色不同，然后在演唱同一段旋律的时候也会有天然的八度差，就会有一种平行的空间感和层次感。</p><blockquote><p>我不想再用全民K歌和自己合唱，怎么办？<del>在线蹲一名🙋‍♀️选手</del></p></blockquote></li></ol><br><blockquote><p><strong>结束语</strong>：</p><p>单单靠文字只能算是对和声的基本了解，重要的是多听多唱多练，平时听歌时多留意这首歌的和声是如何编配的，从已有作品中吸收经验，并付诸于实践。</p></blockquote><p>参考链接：</p><ul><li><p><a href="https://www.zhihu.com/question/370764530">好听的和声应该怎么编配，又如何演唱呢？</a></p></li><li><p><a href="https://www.zhihu.com/question/284541292/answer/527287763">和声到底是啥？</a></p></li><li><p><a href="https://www.zhihu.com/question/40415441/answer/729729372">和声具体的编法？</a></p></li></ul>]]></content>
    
    
    <summary type="html">图一乐，涨涨姿势，了解下和声相关知识</summary>
    
    
    
    <category term="📕知识笔记" scheme="https://hassanwong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="🎵音乐" scheme="https://hassanwong.top/tags/%F0%9F%8E%B5%E9%9F%B3%E4%B9%90/"/>
    
    <category term="🎉娱乐" scheme="https://hassanwong.top/tags/%F0%9F%8E%89%E5%A8%B1%E4%B9%90/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly博客美化魔改合集</title>
    <link href="https://hassanwong.top/posts/9d49f75f/"/>
    <id>https://hassanwong.top/posts/9d49f75f/</id>
    <published>2021-04-28T07:29:00.000Z</published>
    <updated>2021-05-03T05:10:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>本教程记录了博主部分对网站的自定义美化魔改。</p><p>食用教程前，建议先看一下<a href="https://hassanwong.top/posts/223fd004/">《教程&amp;笔记常量申明》</a>，且所有修改对<strong>缩进格式</strong>等有严格要求。</p></blockquote><details red><summary> 点击查看更新日志 </summary>              <div class='content'>              <div class="timeline"><p class='p h2'>更新日志</p><div class="timenode"><div class="meta"><p><p>2021-4-30</p></p></div><div class="body"><ul><li>右下角返回顶部按钮</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2021-4-28</p></p></div><div class="body"><ul><li>深浅模式下分别使用不同网站背景</li><li>首页公告栏轮播组件</li></ul></div></div></div>              </div>            </details><h2 id="深浅模式下分别使用不同网站背景"><a href="#深浅模式下分别使用不同网站背景" class="headerlink" title="深浅模式下分别使用不同网站背景"></a>深浅模式下分别使用不同网站背景</h2><ol><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\_config.yml</code>，其中<code>background_dark</code>参数为深色模式下的图片地址。</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Website Background (设置网站背景)</span><br><span class="line"># can set it to color or image (可設置圖片 或者 顔色)</span><br><span class="line"># The formal of image: url(http://xxxxxx.com/xxx.jpg)</span><br><span class="line">background: url(&lt;FilePath&gt;)</span><br><span class="line"><span class="addition">+background_dark: url(&lt;FilePath&gt;)</span></span><br></pre></td></tr></table></figure></li><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\source\css\var.styl</code>，大概第 36 行左右</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$web-bg = hexo-config(&#x27;background&#x27;) &amp;&amp; unquote(hexo-config(&#x27;background&#x27;))</span><br><span class="line"><span class="addition">+$web-bg-dark = hexo-config(&#x27;background_dark&#x27;) &amp;&amp; unquote(hexo-config(&#x27;background_dark&#x27;))</span></span><br><span class="line">$index_top_img_height = hexo-config(&#x27;index_top_img_height&#x27;) ? convert(hexo-config(&#x27;index_top_img_height&#x27;)) : 100vh</span><br></pre></td></tr></table></figure></li><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\source\css\_mode\darkmode.styl</code>，大概第 41 行左右</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+   #web_bg</span></span><br><span class="line"><span class="addition">+     background: $web-bg-dark</span></span><br><span class="line"><span class="addition">+     position: absolute</span></span><br><span class="line"><span class="addition">+     width: 100%</span></span><br><span class="line"><span class="addition">+     height: 100%</span></span><br><span class="line"><span class="addition">+     content: &#x27;&#x27;</span></span><br><span class="line"><span class="deletion">-   #web_bg:before,</span></span><br><span class="line">    #footer:before,</span><br><span class="line">    #page-header:before</span><br><span class="line">      position: absolute</span><br><span class="line">      width: 100%</span><br><span class="line">      height: 100%</span><br><span class="line">      background-color: alpha($dark-black, .7)</span><br><span class="line">      content: &#x27;&#x27;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p>若你想像我一样使用<strong>四方连续</strong>风格图片（即重复图片）且能正常显示 repeat 效果，则继续按照下方更改</p></blockquote><ol><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\source\css\_global\index.styl</code>，大概第 64 行左右</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">if $web-bg</span><br><span class="line">  #web_bg</span><br><span class="line"><span class="deletion">-   position: fixed</span></span><br><span class="line"><span class="addition">+   position: absolute  //此处可控制背景是否能跟随滑轮滚动，按需选择是否更改</span></span><br><span class="line">    z-index: -999</span><br><span class="line">    width: 100%</span><br><span class="line">    height: 100%</span><br><span class="line">    background: $web-bg</span><br><span class="line"><span class="deletion">-   background-attachment: local</span></span><br><span class="line"><span class="deletion">-   background-position: center</span></span><br><span class="line"><span class="deletion">-   background-size: cover</span></span><br><span class="line"><span class="deletion">-   background-repeat: no-repeat</span></span><br></pre></td></tr></table></figure></li></ol><br><h2 id="首页公告栏轮播组件"><a href="#首页公告栏轮播组件" class="headerlink" title="首页公告栏轮播组件"></a>首页公告栏轮播组件</h2><details ><summary> 碎碎念 </summary>              <div class='content'>              <p>看了洪哥的首页哔哔轮播组件，心里痒痒的想整，奈何自己早已转战 leancloud 版哔哔，于是看着月益增多的公告栏突然灵机一动，寻思着把每一条公告通过轮播组件来实现会不会更好，而且右侧组件又可以腾个位置了，于是开始一天摸鱼的行动，终于扒完了。</p><p>来康康我的公告栏 👇，太占面积了，加了滚动条还是觉得长，而且信息不容易被访客捕捉到（现在已去除）</p><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN/posts/Butterfly_Tutorial/image-20210428225240782.png" alt=""></p>              </div>            </details><details cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN/posts/Butterfly_Tutorial/image-20210429004120825.png" alt=""></p>              </div>            </details><ol><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\_config.yml</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line"><span class="addition">+   # 公告栏轮播组件</span></span><br><span class="line"><span class="addition">+   - &lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/swiper/swiper-bundle.min.css&quot; media=&quot;defer&quot;&quot;&gt;</span></span><br><span class="line">  bottom:</span><br></pre></td></tr></table></figure></li><li><p>新建<code>&lt;BlogRoot&gt;\themes\butterfly\layout\includes\notice.pug</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#notice.notice(onclick=`window.open(&#x27;/notice/&#x27;,&#x27;_self&#x27;)`)</span></span><br><span class="line">    i.notice-logo.fas.fa-bullhorn.card-announcement-animation</span><br><span class="line">    span=<span class="string">&#x27; &#x27;</span>+_p(<span class="string">&#x27;公告栏&#x27;</span>)</span><br><span class="line">    <span class="comment">#noticeList.swiper-container</span></span><br><span class="line">        .swiper-wrapper</span><br><span class="line">            .swiper-slide &lt;Custom&gt;</span><br><span class="line">            .swiper-slide &lt;Custom&gt;</span><br><span class="line">            .swiper-slide &lt;Custom&gt;</span><br><span class="line">    i.notice-enter.fas.fa-arrow-circle-right</span><br><span class="line">script(src=<span class="string">&#x27;https://cdn.jsdelivr.net/npm/swiper/swiper-bundle.min.js&#x27;</span>,data-pjax=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">script.</span><br><span class="line">    var swiper = new Swiper (<span class="string">&#x27;.swiper-container&#x27;</span>, &#123;</span><br><span class="line">        spaceBetween: <span class="number">30</span>,</span><br><span class="line">        centeredSlides: true,</span><br><span class="line">        direction: <span class="string">&#x27;vertical&#x27;</span>, // 垂直切换选项</span><br><span class="line">        loop: true, // 循环模式选项</span><br><span class="line">        </span><br><span class="line">     autoplay: &#123;</span><br><span class="line">            delay: <span class="number">3000</span>,</span><br><span class="line">            disableOnInteraction: false,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p> <code>.swiper-slide &lt;Custom&gt;</code>这里可以写你的公告内容</p></li><li><p>新建<code>&lt;BlogRoot&gt;\source\notice\index.md</code>，也可以通过在命令行里敲<code>hexo new page &lt;Custom&gt;</code></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 公告栏 - Notice</span><br><span class="line">date: 2021-04-27 16:09:00</span><br><span class="line">description: 与本站和博主相关的公告</span><br><span class="line">aside: false</span><br><span class="line">---</span><br><span class="line"></span><br><span class="line">[这里可以写你的公告]</span><br></pre></td></tr></table></figure></li><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\layout\index.pug</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">extends includes/layout.pug</span><br><span class="line">block content</span><br><span class="line">  include ./includes/mixins/post-ui.pug</span><br><span class="line">  #recent-posts.recent-posts</span><br><span class="line">    if theme.gitcalendar.enable</span><br><span class="line">      .recent-post-item(style=&#x27;width:100%;height:7.5% !important;overflow:hidden;&#x27;)</span><br><span class="line">        !=partial(&#x27;includes/gitcalendar&#x27;, &#123;&#125;, &#123;cache: true&#125;)</span><br><span class="line"><span class="addition">+   include includes/notice.pug</span></span><br><span class="line">    +postUI</span><br><span class="line">    include includes/pagination.pug</span><br></pre></td></tr></table></figure><div class="note warning no-icon flat"><p><strong>注意</strong>：如果你使用了 GitCalendar，可能会出现大小失常，建议<code>height:15%</code>改成<code>height:7.5%</code>，具体情况自行调整</p></div></li><li><p>在<code>&lt;Custom&gt;.css</code>里添加以下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.notice-logo</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">22px</span>;</span><br><span class="line">  <span class="attribute">margin-right</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#notice</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">47px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: white;</span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">var</span>(--font-color);</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0.6rem</span> <span class="number">1rem</span> <span class="number">0.5rem</span> <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-attr">[data-theme=<span class="string">&quot;dark&quot;</span>]</span> <span class="selector-id">#notice</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: black <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#notice</span> <span class="selector-tag">span</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-wrapper</span> <span class="selector-class">.swiper-slide</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">-webkit-line-clamp</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-orient</span>: vertical;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.swiper-slide</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#81d8cf</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#noticeList</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: auto;</span><br><span class="line">  <span class="attribute">margin-right</span>: auto;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">list-style</span>: none;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.notice-enter</span> &#123;</span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">25px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">8px</span>;</span><br><span class="line">  <span class="attribute">transition</span>: <span class="number">0.3s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><blockquote><p><strong>使用场景</strong>：公告栏可以写与博客网站相关的重要事件，也可以写与博主有关的公告申明。</p><p><strong>缺点</strong>：每次更新公告要在<code>index.md</code>和<code>notice.pug</code>俩文件进行手动增删改，当然你也可以选择不建<code>index.md</code>，少费点事，访客只看看就行，不需要点进去看完整公告，然后适当自定义修改<code>notice.pug</code>即可。我个人觉得公告栏不用像哔哔那样需频繁更新，所以这算不上麻烦。</p></blockquote><h2 id="右下角返回顶部按钮"><a href="#右下角返回顶部按钮" class="headerlink" title="右下角返回顶部按钮"></a>右下角返回顶部按钮</h2><blockquote><p>效果请看网页右下角</p></blockquote><ol><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\_config.yml</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">  # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span><br><span class="line">  bottom:</span><br><span class="line"><span class="addition">+# 返回顶部按钮</span></span><br><span class="line"><span class="addition">+   - &lt;img alt=&quot;doraemon_to_top&quot; id=&quot;doraemon_to_top&quot; onclick=&quot;fly_to_top()&quot; src=&quot;&lt;FilePath_图片&gt;&quot;&gt;&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>src</code>这里添加图片地址</p></blockquote></li><li><p>在<code>&lt;Custom&gt;.css</code>里添加以下代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">768px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#doraemon_to_top</span> &#123;</span><br><span class="line">    <span class="attribute">position</span>: fixed;</span><br><span class="line">    <span class="attribute">z-index</span>: <span class="number">1001</span>;</span><br><span class="line">    <span class="attribute">right</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">transition</span>: .<span class="number">3s</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">187px</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">1</span>)</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#doraemon_to_top</span><span class="selector-class">.doraemon_fixed</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: -<span class="number">51px</span>;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#doraemon_to_top</span><span class="selector-class">.doraemon_fixed</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">scale</span>(.<span class="number">9</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>在<code>&lt;Custom&gt;.js</code>里添加以下代码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fly_to_top</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    btf.scrollToDest(<span class="number">0</span>, <span class="number">500</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&quot;scroll&quot;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> scrollTop = <span class="built_in">document</span>.documentElement.scrollTop || <span class="built_in">window</span>.pageYOffset || <span class="built_in">document</span>.body.scrollTop;</span><br><span class="line">    <span class="keyword">if</span> (scrollTop &gt; <span class="number">300</span>) &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;doraemon_to_top&quot;</span>).classList.add(<span class="string">&quot;doraemon_fixed&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">document</span>.getElementById(<span class="string">&quot;doraemon_to_top&quot;</span>).classList.remove(<span class="string">&quot;doraemon_fixed&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意</strong>：img 标签内所有参数内容以及css代码里的值都可以自定义更改，前后保持一致就行。</p><p>JS代码参考教程：<a href="https://www.cnblogs.com/qingmingsang/articles/5197542.html">晴明的博客园</a></p></blockquote></li><li><p>最后把butterfly自带的返回顶部按钮给去掉，提供俩思路，<del>留作课后作业</del></p><ol><li><code>display: none;</code></li><li>获取类名/id名，定位到pug源码，注释或删除相应代码</li></ol></li></ol><br><blockquote><p><strong>结束语</strong>：</p><p>若是有疑问或更好的解决方法恳请留言。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;本教程记录了博主部分对网站的自定义美化魔改。&lt;/p&gt;
&lt;p&gt;食用教程前，建议先看一下&lt;a href=&quot;https://hassanwong.top/posts/223fd004/&quot;&gt;《教程&amp;amp;笔记常量申明》&lt;/a&gt;，且所有修改对&lt;strong</summary>
      
    
    
    
    <category term="💻实用教程" scheme="https://hassanwong.top/categories/%F0%9F%92%BB%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="🔹Hexo" scheme="https://hassanwong.top/tags/%F0%9F%94%B9Hexo/"/>
    
    <category term="📝博客" scheme="https://hassanwong.top/tags/%F0%9F%93%9D%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="🦋Butterfly" scheme="https://hassanwong.top/tags/%F0%9F%A6%8BButterfly/"/>
    
  </entry>
  
  <entry>
    <title>Hexo和GitHub相关问题记录合集</title>
    <link href="https://hassanwong.top/posts/d0dfb99d/"/>
    <id>https://hassanwong.top/posts/d0dfb99d/</id>
    <published>2021-04-22T12:50:00.000Z</published>
    <updated>2021-05-02T05:09:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前言</strong>：</p><p>新来的友友们建议先看一下<a href="https://hassanwong.top/posts/223fd004/">《教程&amp;笔记常量申明》</a>。</p></blockquote><h2 id="Hexo篇"><a href="#Hexo篇" class="headerlink" title="Hexo篇"></a>Hexo篇</h2><h3 id="Hexo上传博客到GitHub"><a href="#Hexo上传博客到GitHub" class="headerlink" title="Hexo上传博客到GitHub"></a>Hexo上传博客到GitHub</h3><ol><li><p>在<code>&lt;BlogRoot&gt;</code>的地址框中输入<code>cmd</code>，然后按回车调用<strong>命令行</strong></p></li><li><p>输入<code>hexo clean</code>，来清理缓存文件以及删除之前生成的静态文件</p></li><li><p>输入<code>hexo g</code>，来构建新的静态文件</p></li><li><p>输入<code>hexo s</code>，来启动本地预览</p></li><li><p>输入<code>hexo d</code>或<code>hexo deploy</code>，来将你的项目会自动部署到远端</p></li><li><p>输入Github账号密码即可部署成功（初次上传会需要）</p></li></ol><h3 id="hexo-deploy部署不成功"><a href="#hexo-deploy部署不成功" class="headerlink" title="hexo deploy部署不成功"></a>hexo deploy部署不成功</h3><p><strong>情况1</strong>：有可能和npm版本有关，升级npm</p><ul><li>查看当前版本：npm -v</li><li>更新到最新版本：npm install -g npm</li></ul><p><strong>情况2</strong>：有可能和网速有关，重新上传几次<br><strong>情况3</strong>：有可能代码有错误，得检查<br><strong>情况4</strong>：有可能没有执行hexo clean命令</p><h3 id="卸载hexo插件"><a href="#卸载hexo插件" class="headerlink" title="卸载hexo插件"></a>卸载hexo插件</h3><p><strong>查看插件</strong>：<code>npm list</code><br><strong>卸载插件</strong>：<code>npm uninstall &lt;对应插件名&gt;</code></p><p>参考教程：<a href="https://www.dazhuanlan.com/2019/10/12/5da110cdd9a7b/">https://www.dazhuanlan.com/2019/10/12/5da110cdd9a7b/</a></p><h3 id="嵌入bilibili视频到博客文章中"><a href="#嵌入bilibili视频到博客文章中" class="headerlink" title="嵌入bilibili视频到博客文章中"></a>嵌入bilibili视频到博客文章中</h3><ol><li><p>在bilibili视频页中将鼠标移到转发按钮</p></li><li><p>下方将会弹出“嵌入代码”框，复制<code>src=&quot;</code>到<code>&amp;page</code>之间的代码（其实直接用该代码就可以，但样式不是最佳状态）</p></li><li><p>将代码粘贴到下方代码模板的&lt;Copy&gt;这，再将该段代码粘贴到博客文章中即可。</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;position: relative; padding: 30% 45%;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">style</span>=<span class="string">&quot;position: absolute; width: 100%; height: 100%; left: 0; top: 0;&quot;</span> <span class="attr">src</span>=<span class="string">&quot;&lt;Copy&gt;&amp;page=1&amp;as_wide=1&amp;high_quality=1&amp;danmaku=1&quot;</span> <span class="attr">frameborder</span>=<span class="string">&quot;no&quot;</span> <span class="attr">scrolling</span>=<span class="string">&quot;no&quot;</span> <span class="attr">allowfullscreen</span>=<span class="string">&quot;true&quot;</span>&gt;</span> <span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>效果如下：</p></li></ol><div style="position: relative; padding: 30% 45%;"><iframe style="position: absolute; width: 100%; height: 100%; left: 0; top: 0;" src="//player.bilibili.com/player.html?aid=70725018&bvid=BV1UE411f7wk&cid=122536664&page=1&as_wide=1&high_quality=1&danmaku=1" frameborder="no" scrolling="no" allowfullscreen="true"> </iframe></div><blockquote><p><strong>说明</strong>：有些参数可参考以下教程中的介绍来更改。<br><strong>参考教程</strong>：<a href="https://www.cnblogs.com/wkfvawl/p/12268980.html">https://www.cnblogs.com/wkfvawl/p/12268980.html</a> （教程部分地方可能过时，仅参考）</p></blockquote><h3 id="点击文章卡片跳转其他站点（Butterfly主题）🔥"><a href="#点击文章卡片跳转其他站点（Butterfly主题）🔥" class="headerlink" title="点击文章卡片跳转其他站点（Butterfly主题）🔥"></a>点击文章卡片跳转其他站点（Butterfly主题）🔥</h3><blockquote><p>无意中看源码发现的。因为我还搭有其他网站，所以有这个跳转需求。</p></blockquote><p>直接在头部yaml中加上：link: <code>&lt;URL&gt;</code>，即可点击文章卡片跳转到相应链接。</p><h3 id="升级Hexo博客主题"><a href="#升级Hexo博客主题" class="headerlink" title="升级Hexo博客主题"></a>升级Hexo博客主题</h3><p><strong>方法一</strong>：<code>git pull</code>拉取最新版本主题（所有魔改全部清除）<br><strong>方法二</strong>：按照发布版本来对比更改源码（博主目前采用方法）</p><h3 id="将fork的项目和上游保持同步更改"><a href="#将fork的项目和上游保持同步更改" class="headerlink" title="将fork的项目和上游保持同步更改"></a>将fork的项目和上游保持同步更改</h3><p><strong>方法一</strong>：</p><ol><li>若本地没有部署自己的仓库，则 <code>git clone &lt;RepoGit&gt;</code></li><li><code>git remote add upstream &lt;OriginRepoGit&gt;</code>，拉取上游仓库的更改</li><li>再来解决文件冲突，解决好了可以 Git 三连</li></ol><p><strong>方法二</strong>：重新fork</p><p>参考教程：<a href="https://www.jianshu.com/p/840ea273f25a">https://www.jianshu.com/p/840ea273f25a</a></p><br><h2 id="GitHub篇"><a href="#GitHub篇" class="headerlink" title="GitHub篇"></a>GitHub篇</h2><h3 id="GitHub网站访问慢或访问不了"><a href="#GitHub网站访问慢或访问不了" class="headerlink" title="GitHub网站访问慢或访问不了"></a>GitHub网站访问慢或访问不了</h3><blockquote><p>2021.4.27，刚才想问Aki店长问题，发现已被删除好友，不知为何莫名其妙，后会无期👋</p></blockquote><div class="tag link"><a class="link-card" title="推荐教程" href="https://akilar.top/posts/61b3e163/"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">推荐教程</p><p class="url">https://akilar.top/posts/61b3e163/</p></div></a></div><h3 id="删除GitHub仓库"><a href="#删除GitHub仓库" class="headerlink" title="删除GitHub仓库"></a>删除GitHub仓库</h3><ol><li>点击右上角头像</li><li>点击<code>your repositories</code></li><li>点击要删除的仓库，进入详情页</li><li>找到<code>setting</code>设置，下拉至最后可以看到删除选项</li><li>输入代码库名称确认删除，最后输入密码认证即可。</li></ol><h3 id="没有访问仓库的权限或仓库不存在"><a href="#没有访问仓库的权限或仓库不存在" class="headerlink" title="没有访问仓库的权限或仓库不存在"></a>没有访问仓库的权限或仓库不存在</h3><p><strong>报错代码</strong>：<code>Please make sure you have the correct access rights and the repository exists</code> </p><p><strong>原因</strong>：公钥出问题了,需要删除.ssh文件夹,然后重设置用户名和邮箱再重新生成ssh公钥即可解决<br>解决：</p><ol><li>删除<code>C:/Users/Administrator/.ssh</code>文件夹</li><li>打开cmd命令行</li><li>设置用户名：<code>git config --global user.name &lt;UserName&gt;</code></li><li>设置用户名邮箱：<code>git config --global user.email &lt;Email&gt;</code></li><li>查看设置：<code>git config --list</code></li><li>然后继续输入命令，修改后面的邮箱即可：<code>ssh-keygen -t rsa -C &lt;Email&gt;</code></li><li>打开GitHub网站，点击右上角头像</li><li>点击Settings</li><li>将.ssh文件夹里的<code>id_rsa.pub</code>用记事本打开，复制所有代码</li><li>粘贴到<code>Settings</code>👉<code>SSH and GPG keys</code>👉<code>Key</code>框中</li><li><code>Title</code>填写<code>rsa</code></li><li>点击绿键 <code>Add SSH key</code></li><li>重新git即可</li></ol><p>参考教程：<a href="https://blog.csdn.net/qq_43705131/article/details/107965888">https://blog.csdn.net/qq_43705131/article/details/107965888</a></p><h3 id="上传仓库到GitHub"><a href="#上传仓库到GitHub" class="headerlink" title="上传仓库到GitHub"></a>上传仓库到GitHub</h3><ol><li><p>点击<code>New repository</code>新建一个项目</p></li><li><p>填写相应信息后点击 <code>Create repository</code> 绿键即可</p></li><li><p>点击 <code>Clone or download</code> 会出现一个地址，copy这个地址备用。</p></li><li><p>在任何文件夹右键点击 <code>git bash here</code></p></li><li><p>把github上面新建仓库克隆到本地，输入 <code>git clone &lt;RepoGit&gt;</code></p></li><li><p>将你要上传的文件放入这个仓库（文件夹）中</p></li><li><p>右键仓库点击 <code>git bash here</code></p></li><li><p>依次输入：</p> <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git init （这句在这里主要是为了在文件夹中 git init 让 git 标记此文件夹为版本库，第一次上传需要运行）</span><br><span class="line">git add .[FileName]     //添加文件到本地仓库</span><br><span class="line">git commit -m <span class="string">&quot;&lt;Custom&gt;&quot;</span> //添加文件描述信息</span><br><span class="line">git push [-u] origin &lt;BranchName&gt;       //把本地仓库的文件推送到远程仓库。第一次推送需要加-u</span><br></pre></td></tr></table></figure></li></ol><h3 id="删除GitHub单个文件"><a href="#删除GitHub单个文件" class="headerlink" title="删除GitHub单个文件"></a>删除GitHub单个文件</h3><p>可以通过命令（自行百度），也可以通过在GitHub仓库里直接删除（点击要删文件，点击右上角垃圾箱图案）</p><h3 id="设置GitHub仓库私有化"><a href="#设置GitHub仓库私有化" class="headerlink" title="设置GitHub仓库私有化"></a>设置GitHub仓库私有化</h3><ol><li>进入仓库</li><li>点击<code>Settings</code>拉到最下，点击<code>Change visibility</code></li></ol><h3 id="git-clone-速度太慢解决方法"><a href="#git-clone-速度太慢解决方法" class="headerlink" title="git clone 速度太慢解决方法"></a>git clone 速度太慢解决方法</h3><p>使用github的镜像网站进行访问，github.com.cnpmjs.org，只需在HTTPS型仓库Git地址里的<code>github.com</code>后加<code>.cnpmjs.org</code>，不出意外下载速度会很快。</p><blockquote><p><strong>注意</strong>：只对HTTPS有效，对SSH无效<br>参考教程：<a href="https://www.cnblogs.com/burc/p/13985724.html">https://www.cnblogs.com/burc/p/13985724.html</a></p></blockquote><h3 id="更改git提交记录"><a href="#更改git提交记录" class="headerlink" title="更改git提交记录"></a>更改git提交记录</h3><blockquote><p><strong>背景</strong>：有时候你<code>git commit -m &quot;&lt;Custom&gt;&quot;</code>时发现<code>&lt;Custom&gt;</code>描述有误想改（还没有push）</p></blockquote><ol><li>在<code>git bash</code>里输入<code>git commit --amend</code></li><li>按下<code>insert</code>键即可输入信息，第一行就是你刚才输入有误的<code>&lt;Custom&gt;</code></li><li>更改后按下<code>Esc</code>，再输入<code>:wq</code>即可保存状态</li><li>push到远程代码仓库即可</li><li>（额外）输入<code>git log</code>可以看你提交过的git历史，按下<code>wq</code>可以退出log状态</li></ol><blockquote><p>有其他相关问题建议参考以下教程</p><p>参考教程：<a href="https://zhuanlan.zhihu.com/p/100243017">https://zhuanlan.zhihu.com/p/100243017</a></p></blockquote><br><blockquote><p><strong>结尾</strong>：</p><p>如果有疑问或哪个地方表述有问题、有更好解决方案，恳请留言！</p></blockquote>]]></content>
    
    
    <summary type="html">记录了从博主19年搭建博客以来，使用过程中遇到和Hexo、GitHub相关问题的解决方案。</summary>
    
    
    
    <category term="🤗干货分享" scheme="https://hassanwong.top/categories/%F0%9F%A4%97%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="🔹Hexo" scheme="https://hassanwong.top/tags/%F0%9F%94%B9Hexo/"/>
    
    <category term="📝博客" scheme="https://hassanwong.top/tags/%F0%9F%93%9D%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="👾GitHub" scheme="https://hassanwong.top/tags/%F0%9F%91%BEGitHub/"/>
    
  </entry>
  
  <entry>
    <title>如何自定义美化魔改？</title>
    <link href="https://hassanwong.top/posts/25d6e78d/"/>
    <id>https://hassanwong.top/posts/25d6e78d/</id>
    <published>2021-04-17T11:51:00.000Z</published>
    <updated>2021-04-19T10:22:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>超长前言</strong>：</p><p>友友们看了那么多教程或许已经有了自己DIY的想法，开始对其他博主美化魔改教程有了自己的认知和理解，或者想按照自己的审美来改，但却又无从下手，没有思绪，本篇就给博客新人们分享下<u>经验思路</u>，涨涨姿势，<del>早日脱离美化魔改的苦海</del>。（本篇仅针对<strong>Butterfly主题</strong>，其它主题的友友们仅供参考噢）</p><p>美化魔改虽说比较费时费力，但能看到最终效果还是能令人开心一整天。但过度沉迷于美化魔改之中，有些违背搭建博客的初衷，其实博客是用来分享、记录知识的一个载体，在美化魔改上所花的时间应远少于在文章上的。可是不经历乘风破浪怎能返璞归真？传统功夫点到为止，咋们开始吧！</p></blockquote><h2 id="美化魔改是什么？"><a href="#美化魔改是什么？" class="headerlink" title="美化魔改是什么？"></a>美化魔改是什么？</h2><p><strong>美化</strong>指的是使博客外观更加好看，一般是对css、styl文件的更改。</p><p><strong>魔改</strong>指的是对博客源码的更改，通常会更改布局框架的结构。个人认为魔改包含了美化。</p><p><strong>两者的区别</strong>：美化通常不用改源码，只需更改自定义插入的样式代码，而魔改则需要更改源码。</p><blockquote><p>魔改缺点是主题升级后，魔改的地方都会被更新后的代码给替换掉，重新魔改一遍很麻烦，建议升级的时候可以按照GitHub上源码的<u>版本对比功能</u>来一点一点改。<del>建议不魔改，博客能用就行。</del></p></blockquote><h2 id="自定义美化魔改技巧"><a href="#自定义美化魔改技巧" class="headerlink" title="自定义美化魔改技巧"></a>自定义美化魔改技巧</h2><blockquote><p>前提：对html、css、js有一定的了解，最好有系统的学习，会使你事半功倍。</p><p>本栏分享的技巧包括<u>自定义美化魔改、如何模仿他人网站的布局、样式、动态功能</u>。</p></blockquote><ol><li><p><strong>善用<code>F12</code></strong></p><p> <code>F12</code>通常用于对css样式的捕捉定位。你看到别人网站某个地方很好看，可以按下<code>F12</code>键，用鼠标定位到那里，将会弹出一个代码框，左栏是html代码，右栏是与选中元素对应的相关css代码以及全局通用css代码。将对应代码放在自定义css文件里即可，若本地渲染后没有效果，可能是样式定位失败或者代码语法错误。</p></li><li><p><strong>善用<code>Ctrl + U</code></strong></p><p> <code>Ctrl + U</code>用于查看当前网页源码（并非整个博客源码），再按下<code>Ctrl + F</code>搜索<code>.js</code>可以查看其他博主在该页面用了哪些js代码，逐个打开看或者“见名知意”来选择性的打开，这样有助于快速定位到其他博主网页对应功能的js代码，除了搜索<code>.js</code>你也可以搜索<code>.css</code>、<code>.png</code>、<code>.jpg</code>等关键词来获取相应文件，当然使用时先得遵守各位博主的<a href="https://hassanwong.top/cc/">版权协议</a>。</p></li><li><p>有时候想<strong>调整页面布局</strong>，通常是<u>更改pug源码</u>，pug类似于html。若你想调整某板块的布局，先用F12获取它的class或id，通过在代码编辑器里搜索、定位到pug源码，做适当更改，注意代码的缩进，最后Hexo三连即可看到效果（pug对代码缩进有严格要求）。</p></li><li><p>最后，你的<u>模仿能力和英语不至于太差</u>。善于模仿代码语言的编写格式和能直接通过英文看懂代码含义，这有助于你去美化魔改，很适合像我这种对语言不熟但又想改它的人。比如，我将fontawesome图标换成阿里图标后，发现它不能旋转，于是我在vscode代码编辑工具里搜索<code>360</code>，就搜到了类似于<code>(-100px) rotate(-360deg)</code>的代码，通过英文意思能大概知道是旋转360度的功能，但据观察推测，styl和css应该差不多，只是语法不同，而且styl不就是style的简写吗？于是我将该部分代码移植到对应处，效果就有了，建议自己多思考多实践。</p></li></ol><div class="note warning no-icon flat"><p>注意：第4条是一个跳过编程语言学习、走捷径的方法（<del>耍小聪明</del>），在此仅提供思路，不具有普适性也不推荐，还是建议深入了解前端知识，有想法有能力者最好系统学习下，毕竟磨刀不误砍柴工嘛（严肃）。</p></div><h2 id="如何添加自定义css、js代码"><a href="#如何添加自定义css、js代码" class="headerlink" title="如何添加自定义css、js代码"></a>如何添加自定义css、js代码</h2><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\_config.yml</code>或<code>&lt;BlogRoot&gt;\_config.butterfly.yml</code>（如果你创建了）的代码</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">inject:</span><br><span class="line">  head:</span><br><span class="line">    # - &lt;link rel=&quot;stylesheet&quot; href=&quot;/xxx.css&quot;&gt;</span><br><span class="line"><span class="addition">+   - &lt;link rel=&quot;stylesheet&quot; href=&quot;&lt;FilePath_&lt;Custom&gt;.css&gt;&quot;  media=&quot;defer&quot; onload=&quot;this.media=&#x27;all&#x27;&quot;&gt;</span></span><br><span class="line">  bottom:</span><br><span class="line">    # - &lt;script src=&quot;xxxx&quot;&gt;&lt;/script&gt;</span><br><span class="line"><span class="addition">+   - &lt;script type=&quot;text/javascript&quot; src=&quot;&lt;FilePath_&lt;Custom&gt;.js&gt;&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><br><blockquote><p><strong>结尾</strong>：</p><p>如果你很多概念看不懂的话，建议百度深入了解、系统学习。如果哪个地方表述有问题，恳请留言！</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;超长前言&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;友友们看了那么多教程或许已经有了自己DIY的想法，开始对其他博主美化魔改教程有了自己的认知和理解，或者想按照自己的审美来改，但却又无从下手，没有思绪，本篇就给博客新人们分享下&lt;u&gt;经验思路</summary>
      
    
    
    
    <category term="🤗干货分享" scheme="https://hassanwong.top/categories/%F0%9F%A4%97%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="🔹Hexo" scheme="https://hassanwong.top/tags/%F0%9F%94%B9Hexo/"/>
    
    <category term="📝博客" scheme="https://hassanwong.top/tags/%F0%9F%93%9D%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="🦋Butterfly" scheme="https://hassanwong.top/tags/%F0%9F%A6%8BButterfly/"/>
    
  </entry>
  
  <entry>
    <title>Butterfly博客二创集锦</title>
    <link href="https://hassanwong.top/posts/7a869374/"/>
    <id>https://hassanwong.top/posts/7a869374/</id>
    <published>2021-04-10T03:15:00.000Z</published>
    <updated>2021-05-02T18:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前言</strong>：</p><p>本篇是使用其他优秀博主教程时延申出来的idea。目前有很多 Butterfly 主题美化魔改教程，此篇就不重复造轮子。平时使用其他优秀博主教程时难免有些小 idea，本篇将记录值得的二创瞬间。<u>建议先看教程原贴</u>，因为本篇是原教程的拓展延伸。</p></blockquote><details red><summary> 点击查看更新日志 </summary>              <div class='content'>              <div class="timeline"><p class='p h2'>更新日志</p><div class="timenode"><div class="meta"><p><p>2021-4-17</p></p></div><div class="body"><ul><li>svg 图标旋转效果</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2021-4-16</p></p></div><div class="body"><ul><li>横版导航栏二级菜单偏移量修正</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2021-4-11</p></p></div><div class="body"><ul><li>社交图标使用多色 svg</li></ul></div></div><div class="timenode"><div class="meta"><p><p>2021-4-10</p></p></div><div class="body"><ul><li><p>Gitcalendar 样式微调</p></li><li><p>哔哔 bber 发布时间格式</p></li></ul></div></div></div>              </div>            </details><div class="note warning no-icon flat"><p>食用教程前，建议先看一下<a href="https://hassanwong.top/posts/223fd004/">《教程&amp;笔记常量申明》</a>，且所有修改对<strong>缩进格式</strong>等有严格要求。</p></div><br><h2 id="Gitcalendar-样式微调"><a href="#Gitcalendar-样式微调" class="headerlink" title="Gitcalendar 样式微调"></a>Gitcalendar 样式微调</h2><details cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN/posts/Butterfly_Tutorial/image-20210410132723162.png" alt=""></p>              </div>            </details><div class="tag link"><a class="link-card" title="教程原贴" href="https://akilar.top/posts/1f9c68c9/"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">教程原贴</p><p class="url">https://akilar.top/posts/1f9c68c9/</p></div></a></div><h3 id="配色"><a href="#配色" class="headerlink" title="配色"></a>配色</h3><blockquote><p>我是用 Win10 自带画图软件手工取的色 🙈</p></blockquote><p><strong>蒂芙尼蓝色调</strong>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">color:</span> <span class="string">&quot;[&#x27;#ebedf0&#x27;, &#x27;#cdefec&#x27;, &#x27;#a9e4de&#x27;, &#x27;#81D8CF&#x27;, &#x27;#65cfc5&#x27;, &#x27;#4dc8bb&#x27;, &#x27;#39bbae&#x27;, &#x27;#319d93&#x27;, &#x27;#278178&#x27;, &#x27;#216962&#x27;, &#x27;#1b5852&#x27;]&quot;</span></span><br></pre></td></tr></table></figure><p><strong>冷色系温度色调（当前在用）</strong>：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">color:</span> <span class="string">&quot;[&#x27;rgb(145, 145, 145, 0.2)&#x27;, &#x27;#c6ecc1&#x27;, &#x27;#a0e2bb&#x27;, &#x27;#81D8CF&#x27;, &#x27;#70c5d3&#x27;, &#x27;#60a2ce&#x27;, &#x27;#507ac9&#x27;, &#x27;#4356c5&#x27;, &#x27;#423cc4&#x27;, &#x27;#5b3abc&#x27;, &#x27;#7138b6&#x27;]&quot;</span></span><br></pre></td></tr></table></figure><h3 id="页面显示小更改"><a href="#页面显示小更改" class="headerlink" title="页面显示小更改"></a>页面显示小更改</h3><p>✅ 11 个颜色梯度块全部显示</p><p>✅ 月份、日期分别改成英文简写、数字形式，并全部显示</p><p>✅ “提交“改成“摸鱼次数”</p><p>✅ 修改提交次数对应色块的逻辑判断</p><ol><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\layout\includes\gitcalendar.pug</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#gitcalendar.gitcalendar</span></span><br><span class="line">  <span class="comment">#gitmessage(:style=&#x27;&#123;top:y+px,left:x+px,position: fixed,zIndex:9999&#125;&#x27;)</span></span><br><span class="line">    .angle-wrapper</span><br><span class="line">      span &#123;&#123;span1&#125;&#125; &amp;nbsp;</span><br><span class="line">      span &#123;&#123;span2&#125;&#125; 次上传</span><br><span class="line">  .position-relative</span><br><span class="line">    .border.py<span class="number">-2.</span>graph-before-activity-overview</span><br><span class="line">      .js-gitcalendar-graph.mx-md<span class="number">-2.</span>mx<span class="number">-3.</span>d-flex.flex-column.flex-items-end.flex-xl-items-center.overflow-hidden.pt<span class="number">-1.</span><span class="keyword">is</span>-graph-loading.graph-canvas.gitcalendar-graph.height-full.text-center</span><br><span class="line">        <span class="comment">#gitcalendarcanvasbox(v-if=&#x27;simplemode&#x27;)</span></span><br><span class="line">          canvas<span class="comment">#gitcanvas(style=&#x27;animation: none;&#x27;)</span></span><br><span class="line">        svg.js-gitcalendar-graph-svg(width=<span class="string">&#x27;100%&#x27;</span>, viewBox=<span class="string">&#x27;0 0 770 128&#x27;</span>, v-<span class="keyword">if</span>=<span class="string">&#x27;!simplemode&#x27;</span>)</span><br><span class="line">          text.month(:x=<span class="string">&#x27;32 + monthindex*64&#x27;</span>, y=<span class="string">&#x27;20&#x27;</span>, v-<span class="keyword">for</span>=<span class="string">&#x27;(month,monthindex) in monthchange&#x27;</span>) &#123;&#123;month&#125;&#125;</span><br><span class="line">          text.wday(text-anchor=<span class="string">&#x27;start&#x27;</span>, dx=<span class="string">&#x27;0&#x27;</span>, dy=<span class="string">&#x27;40&#x27;</span>)  <span class="number">7</span></span><br><span class="line">          text.wday(text-anchor=<span class="string">&#x27;start&#x27;</span>, dx=<span class="string">&#x27;0&#x27;</span>, dy=<span class="string">&#x27;52.5&#x27;</span>)  <span class="number">1</span></span><br><span class="line">          text.wday(text-anchor=<span class="string">&#x27;start&#x27;</span>, dx=<span class="string">&#x27;0&#x27;</span>, dy=<span class="string">&#x27;65&#x27;</span>)  <span class="number">2</span></span><br><span class="line">          text.wday(text-anchor=<span class="string">&#x27;start&#x27;</span>, dx=<span class="string">&#x27;0&#x27;</span>, dy=<span class="string">&#x27;77.5&#x27;</span>)  <span class="number">3</span></span><br><span class="line">          text.wday(text-anchor=<span class="string">&#x27;start&#x27;</span>, dx=<span class="string">&#x27;0&#x27;</span>, dy=<span class="string">&#x27;90&#x27;</span>)  <span class="number">4</span></span><br><span class="line">          text.wday(text-anchor=<span class="string">&#x27;start&#x27;</span>, dx=<span class="string">&#x27;0&#x27;</span>, dy=<span class="string">&#x27;102.5&#x27;</span>)  <span class="number">5</span></span><br><span class="line">          text.wday(text-anchor=<span class="string">&#x27;start&#x27;</span>, dx=<span class="string">&#x27;0&#x27;</span>, dy=<span class="string">&#x27;115&#x27;</span>) <span class="number">6</span></span><br><span class="line">          g(v-<span class="keyword">for</span>=<span class="string">&#x27;(weekitem,weekIndex) in data&#x27;</span>, :transform=<span class="string">&#x27;\&#x27;translate(\&#x27;+ (16 + weekIndex*14) + \&#x27;,\&#x27; + \&#x27;0)\&#x27;&#x27;</span>)</span><br><span class="line">            rect(@mouseover=<span class="string">&quot;selectStyle(dayitem,$event)&quot;</span>  @mouseleave=<span class="string">&quot;outStyle()&quot;</span> v-<span class="keyword">for</span>=<span class="string">&#x27;(dayitem,dayIndex) in weekitem&#x27;</span>, :style=<span class="string">&#x27;&#123;fill:thiscolor(dayitem.count),shapeRendering:crispedges&#125;&#x27;</span>, :data-score=<span class="string">&#x27;dayitem.count&#x27;</span>, :data-date=<span class="string">&#x27;dayitem.date&#x27;</span>, x=<span class="string">&#x27;0&#x27;</span>, :y=<span class="string">&#x27; 30 + dayIndex*13 &#x27;</span>, width=<span class="string">&#x27;11&#x27;</span>, height=<span class="string">&#x27;11&#x27;</span>)</span><br><span class="line">      .contrib-footer.clearfix.mt<span class="number">-1.</span>mx<span class="number">-3.</span>px<span class="number">-3.</span>pb<span class="number">-1</span></span><br><span class="line">        .<span class="built_in">float</span>-left.text-gray</span><br><span class="line">          | 数据来源</span><br><span class="line">          a(:href=<span class="string">&quot;&#x27;https://github.com/&#x27;+ user &quot;</span>, target=<span class="string">&#x27;blank&#x27;</span>) @&#123;&#123;user&#125;&#125;</span><br><span class="line">        .contrib-legend.text-gray</span><br><span class="line">          | Less</span><br><span class="line">          //- 使<span class="number">11</span>个颜色都显示出来</span><br><span class="line">          ul.legend</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[0]&#125;&#x27;</span>)</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[1]&#125;&#x27;</span>)</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[2]&#125;&#x27;</span>)</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[3]&#125;&#x27;</span>)</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[4]&#125;&#x27;</span>)</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[5]&#125;&#x27;</span>)</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[6]&#125;&#x27;</span>)</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[7]&#125;&#x27;</span>)</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[8]&#125;&#x27;</span>)</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[9]&#125;&#x27;</span>)</span><br><span class="line">            li(:style=<span class="string">&#x27;&#123;backgroundColor:color[10]&#125;&#x27;</span>)</span><br><span class="line">          | More</span><br><span class="line"></span><br><span class="line">  .contrib-column.contrib-column-first.table-column</span><br><span class="line">    span.text-muted 过去一年摸鱼次数</span><br><span class="line">    span.contrib-number &#123;&#123;total&#125;&#125;</span><br><span class="line">    span.text-muted &#123;&#123;oneyearbeforeday&#125;&#125;&amp;nbsp;-&amp;nbsp;&#123;&#123;thisday&#125;&#125;</span><br><span class="line">  .contrib-column.table-column</span><br><span class="line">    span.text-muted 最近一月摸鱼次数</span><br><span class="line">    span.contrib-number &#123;&#123;thisweekdatacore&#125;&#125;</span><br><span class="line">    span.text-muted &#123;&#123;amonthago&#125;&#125;&amp;nbsp;-&amp;nbsp;&#123;&#123;thisday&#125;&#125;</span><br><span class="line">  .contrib-column.table-column</span><br><span class="line">    span.text-muted 最近一周摸鱼次数</span><br><span class="line">    span.contrib-number &#123;&#123;weekdatacore&#125;&#125;</span><br><span class="line">    span.text-muted &#123;&#123;aweekago&#125;&#125;&amp;nbsp;-&amp;nbsp;&#123;&#123;thisday&#125;&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\layout\includes\gitcalendar-js.pug</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line">script.</span><br><span class="line">  var gitcalendar = new Vue(&#123;</span><br><span class="line">    el: <span class="string">&#x27;#gitcalendar&#x27;</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      simplemode: !&#123;theme.gitcalendar.simplemode&#125;,</span><br><span class="line">      user: <span class="string">&#x27;!&#123;theme.gitcalendar.user&#125;&#x27;</span>,</span><br><span class="line">      fixed: <span class="string">&#x27;fixed&#x27;</span>,</span><br><span class="line">      px: <span class="string">&#x27;px&#x27;</span>,</span><br><span class="line">      x: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      y: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      span1: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      span2: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      month: [<span class="string">&#x27;Jan.&#x27;</span>, <span class="string">&#x27;Feb.&#x27;</span>, <span class="string">&#x27;Mar.&#x27;</span>, <span class="string">&#x27;Apr.&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun.&#x27;</span>, <span class="string">&#x27;Jul.&#x27;</span>, <span class="string">&#x27;Aug.&#x27;</span>, <span class="string">&#x27;Sep.&#x27;</span>, <span class="string">&#x27;Oct.&#x27;</span>, <span class="string">&#x27;Nov.&#x27;</span>, <span class="string">&#x27;Dec.&#x27;</span>],</span><br><span class="line">      monthchange: [],</span><br><span class="line">      oneyearbeforeday: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      thisday: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      amonthago: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      aweekago: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      weekdatacore: <span class="number">0</span>,</span><br><span class="line">      datacore: <span class="number">0</span>,</span><br><span class="line">      total: <span class="number">0</span>,</span><br><span class="line">      datadate: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">      data: [],</span><br><span class="line">      positionplusdata: [],</span><br><span class="line">      firstweek: [],</span><br><span class="line">      lastweek: [],</span><br><span class="line">      beforeweek: [],</span><br><span class="line">      thisweekdatacore: <span class="number">0</span>,</span><br><span class="line">      mounthbeforeday: <span class="number">0</span>,</span><br><span class="line">      mounthfirstindex: <span class="number">0</span>,</span><br><span class="line">      crispedges: <span class="string">&#x27;crispedges&#x27;</span>,</span><br><span class="line">      thisdayindex: <span class="number">0</span>,</span><br><span class="line">      amonthagoindex: <span class="number">0</span>,</span><br><span class="line">      amonthagoweek: [],</span><br><span class="line">      firstdate: [],</span><br><span class="line">      first2date: [],</span><br><span class="line">      montharrbefore: [],</span><br><span class="line">      monthindex: <span class="number">0</span>,</span><br><span class="line">      color: !&#123;theme.gitcalendar.color&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      selectStyle(data, event) &#123;</span><br><span class="line">        document.querySelector(<span class="string">&#x27;.angle-wrapper&#x27;</span>).style.display = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">        this.span1 = data.date;</span><br><span class="line">        this.span2 = data.count;</span><br><span class="line">        this.x = event.clientX - <span class="number">100</span>;</span><br><span class="line">        this.y = event.clientY - <span class="number">60</span></span><br><span class="line">      &#125;,</span><br><span class="line">      outStyle() &#123;</span><br><span class="line">        document.querySelector(<span class="string">&#x27;.angle-wrapper&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      &#125;, //-修改逻辑</span><br><span class="line">      thiscolor(x) &#123;</span><br><span class="line">        <span class="keyword">if</span> (x === <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">0</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">2</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">1</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">3</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">2</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">4</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">3</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">6</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">4</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">8</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">5</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">11</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">6</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">14</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">7</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">17</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">8</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">22</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">9</span>]</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">return</span> this.color[<span class="number">10</span>]</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  var apiurl = &#x27;!&#123;theme.gitcalendar.apiurl&#125;&#x27; ? &#x27;https://!&#123;theme.gitcalendar.apiurl&#125;/api?&#x27; : &#x27;https://githubapi.ryanchristian.dev/user/&#x27;</span><br><span class="line">  var githubapiurl = apiurl + gitcalendar.user;</span><br><span class="line">  //canvas绘图</span><br><span class="line">  function responsiveChart() &#123;</span><br><span class="line">    let c = document.getElementById(<span class="string">&quot;gitcanvas&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (c) &#123;</span><br><span class="line">      let cmessage = document.getElementById(<span class="string">&quot;gitmessage&quot;</span>);</span><br><span class="line">      let ctx = c.getContext(<span class="string">&quot;2d&quot;</span>);</span><br><span class="line">      c.width = document.getElementById(<span class="string">&quot;gitcalendarcanvasbox&quot;</span>).offsetWidth;</span><br><span class="line">      let linemaxwitdh = <span class="number">0.96</span> * c.width / gitcalendar.data.length;</span><br><span class="line">      c.height = <span class="number">9</span> * linemaxwitdh;</span><br><span class="line">      let lineminwitdh = <span class="number">0.8</span> * linemaxwitdh;</span><br><span class="line">      let setposition = &#123;</span><br><span class="line">        x: <span class="number">0.02</span> * c.width,</span><br><span class="line">        y: <span class="number">0.025</span> * c.width</span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="keyword">for</span> (let week <span class="keyword">in</span> gitcalendar.data) &#123;</span><br><span class="line">        weekdata = gitcalendar.data[week];</span><br><span class="line">        <span class="keyword">for</span> (let day <span class="keyword">in</span> weekdata) &#123;</span><br><span class="line">          let dataitem = &#123;</span><br><span class="line">            date: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            count: <span class="string">&quot;&quot;</span>,</span><br><span class="line">            x: <span class="number">0</span>,</span><br><span class="line">            y: <span class="number">0</span></span><br><span class="line">          &#125;;</span><br><span class="line">          gitcalendar.positionplusdata.push(dataitem);</span><br><span class="line">          ctx.fillStyle = gitcalendar.thiscolor(weekdata[day].count);</span><br><span class="line">          setposition.y = Math.<span class="built_in">round</span>(setposition.y * <span class="number">100</span>) / <span class="number">100</span>;</span><br><span class="line">          dataitem.date = weekdata[day].date;</span><br><span class="line">          dataitem.count = weekdata[day].count;</span><br><span class="line">          dataitem.x = setposition.x;</span><br><span class="line">          dataitem.y = setposition.y;</span><br><span class="line">          ctx.fillRect(setposition.x, setposition.y, lineminwitdh, lineminwitdh);</span><br><span class="line">          setposition.y = setposition.y + linemaxwitdh</span><br><span class="line">        &#125;;</span><br><span class="line">        setposition.y = <span class="number">0.025</span> * c.width;</span><br><span class="line">        setposition.x = setposition.x + linemaxwitdh</span><br><span class="line">      &#125;;</span><br><span class="line">      ctx.font = <span class="string">&quot;600  Arial&quot;</span>;</span><br><span class="line">      ctx.fillStyle = <span class="string">&#x27;#aaa&#x27;</span>;</span><br><span class="line">      ctx.fillText(<span class="string">&quot;7&quot;</span>, <span class="number">0</span>, <span class="number">1.9</span> * linemaxwitdh);</span><br><span class="line">      ctx.fillText(<span class="string">&quot;1&quot;</span>, <span class="number">0</span>, <span class="number">2.9</span> * linemaxwitdh);</span><br><span class="line">      ctx.fillText(<span class="string">&quot;2&quot;</span>, <span class="number">0</span>, <span class="number">3.9</span> * linemaxwitdh);</span><br><span class="line">      ctx.fillText(<span class="string">&quot;3&quot;</span>, <span class="number">0</span>, <span class="number">4.9</span> * linemaxwitdh);</span><br><span class="line">      ctx.fillText(<span class="string">&quot;4&quot;</span>, <span class="number">0</span>, <span class="number">5.9</span> * linemaxwitdh);</span><br><span class="line">      ctx.fillText(<span class="string">&quot;5&quot;</span>, <span class="number">0</span>, <span class="number">6.9</span> * linemaxwitdh);</span><br><span class="line">      ctx.fillText(<span class="string">&quot;6&quot;</span>, <span class="number">0</span>, <span class="number">7.9</span> * linemaxwitdh);</span><br><span class="line">      let monthindexlist = c.width / <span class="number">24</span>;</span><br><span class="line">      <span class="keyword">for</span> (let index <span class="keyword">in</span> gitcalendar.monthchange) &#123;</span><br><span class="line">        ctx.fillText(gitcalendar.monthchange[index], monthindexlist, <span class="number">0.7</span> * linemaxwitdh);</span><br><span class="line">        monthindexlist = monthindexlist + c.width / <span class="number">12</span></span><br><span class="line">      &#125;;</span><br><span class="line">      cmessage.onmousemove = function(event) &#123;</span><br><span class="line">        document.querySelector(<span class="string">&#x27;.angle-wrapper&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">      &#125;;</span><br><span class="line">      c.onmousemove = function(event) &#123;</span><br><span class="line">        document.querySelector(<span class="string">&#x27;.angle-wrapper&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">        getMousePos(c, event);</span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">      function getMousePos(canvas, event) &#123;</span><br><span class="line">        var rect = canvas.getBoundingClientRect();</span><br><span class="line">        var x = event.clientX - rect.left * (canvas.width / rect.width);</span><br><span class="line">        var y = event.clientY - rect.top * (canvas.height / rect.height);</span><br><span class="line">        //console.log(<span class="string">&quot;x:&quot;</span>+x+<span class="string">&quot;,y:&quot;</span>+y);</span><br><span class="line">        <span class="keyword">for</span> (let item of gitcalendar.positionplusdata) &#123;</span><br><span class="line">          let lenthx = x - item.x;</span><br><span class="line">          let lenthy = y - item.y;</span><br><span class="line">          //console.log(lenthx,lenthy);</span><br><span class="line">          <span class="keyword">if</span> (<span class="number">0</span> &lt; lenthx &amp;&amp; lenthx &lt; lineminwitdh) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="number">0</span> &lt; lenthy &amp;&amp; lenthy &lt; lineminwitdh) &#123;</span><br><span class="line">              //console.log(item.date,item.count)</span><br><span class="line">              document.querySelector(<span class="string">&#x27;.angle-wrapper&#x27;</span>).style.display = <span class="string">&#x27;block&#x27;</span></span><br><span class="line">              gitcalendar.span1 = item.date;</span><br><span class="line">              gitcalendar.span2 = item.count;</span><br><span class="line">              gitcalendar.x = event.clientX - <span class="number">100</span>;</span><br><span class="line">              gitcalendar.y = event.clientY - <span class="number">60</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">          //<span class="keyword">if</span>(<span class="number">0</span>&lt; x - item.x &lt;lineminwitdh&amp;&amp;<span class="number">0</span>&lt; y - item.y &lt;lineminwitdh)&#123;</span><br><span class="line">          //console.log(item.count,item.date);</span><br><span class="line">          //&#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  //数据统计算法</span><br><span class="line">  function addlastmonth() &#123;</span><br><span class="line">    <span class="keyword">if</span> (gitcalendar.thisdayindex === <span class="number">0</span>) &#123;</span><br><span class="line">      thisweekcore(<span class="number">52</span>);</span><br><span class="line">      thisweekcore(<span class="number">51</span>);</span><br><span class="line">      thisweekcore(<span class="number">50</span>);</span><br><span class="line">      thisweekcore(<span class="number">49</span>);</span><br><span class="line">      thisweekcore(<span class="number">48</span>);</span><br><span class="line">      gitcalendar.thisweekdatacore += gitcalendar.firstdate[<span class="number">6</span>].count;</span><br><span class="line">      gitcalendar.amonthago = gitcalendar.firstdate[<span class="number">6</span>].date</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      thisweekcore(<span class="number">52</span>);</span><br><span class="line">      thisweekcore(<span class="number">51</span>);</span><br><span class="line">      thisweekcore(<span class="number">50</span>);</span><br><span class="line">      thisweekcore(<span class="number">49</span>);</span><br><span class="line">      thisweek2core();</span><br><span class="line">      gitcalendar.amonthago = gitcalendar.first2date[gitcalendar.thisdayindex - <span class="number">1</span>].date</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function thisweek2core() &#123;</span><br><span class="line">    <span class="keyword">for</span> (let i = gitcalendar.thisdayindex - <span class="number">1</span>; i &lt; gitcalendar.first2date.length; i++) &#123;</span><br><span class="line">      gitcalendar.thisweekdatacore += gitcalendar.first2date[i].count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function thisweekcore(index) &#123;</span><br><span class="line">    <span class="keyword">for</span> (let item of gitcalendar.data[index]) &#123;</span><br><span class="line">      gitcalendar.thisweekdatacore += item.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function addlastweek() &#123;</span><br><span class="line">    <span class="keyword">for</span> (let item of gitcalendar.lastweek) &#123;</span><br><span class="line">      gitcalendar.weekdatacore += item.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function addbeforeweek() &#123;</span><br><span class="line">    <span class="keyword">for</span> (let i = gitcalendar.thisdayindex; i &lt; gitcalendar.beforeweek.length; i++) &#123;</span><br><span class="line">      gitcalendar.weekdatacore += gitcalendar.beforeweek[i].count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  function addweek(data) &#123;</span><br><span class="line">    <span class="keyword">if</span> (gitcalendar.thisdayindex === <span class="number">6</span>) &#123;</span><br><span class="line">      gitcalendar.aweekago = gitcalendar.lastweek[<span class="number">0</span>].date;</span><br><span class="line">      addlastweek()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      lastweek = data.contributions[<span class="number">51</span>];</span><br><span class="line">      gitcalendar.aweekago = lastweek[gitcalendar.thisdayindex + <span class="number">1</span>].date;</span><br><span class="line">      addlastweek();</span><br><span class="line">      addbeforeweek()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  fetch(githubapiurl)</span><br><span class="line">    .then(data =&gt; data.json())</span><br><span class="line">    .then(data =&gt; &#123;</span><br><span class="line">      gitcalendar.data = data.contributions;</span><br><span class="line">      gitcalendar.total = data.total;</span><br><span class="line">      gitcalendar.first2date = gitcalendar.data[<span class="number">48</span>];</span><br><span class="line">      gitcalendar.firstdate = gitcalendar.data[<span class="number">47</span>];</span><br><span class="line">      gitcalendar.firstweek = data.contributions[<span class="number">0</span>];</span><br><span class="line">      gitcalendar.lastweek = data.contributions[<span class="number">52</span>];</span><br><span class="line">      gitcalendar.beforeweek = data.contributions[<span class="number">51</span>];</span><br><span class="line">      gitcalendar.thisdayindex = gitcalendar.lastweek.length - <span class="number">1</span>;</span><br><span class="line">      gitcalendar.thisday = gitcalendar.lastweek[gitcalendar.thisdayindex].date;</span><br><span class="line">      gitcalendar.oneyearbeforeday = gitcalendar.firstweek[<span class="number">0</span>].date;</span><br><span class="line">      gitcalendar.monthindex = gitcalendar.thisday.substring(<span class="number">5</span>, <span class="number">7</span>) * <span class="number">1</span>;</span><br><span class="line">      gitcalendar.montharrbefore = gitcalendar.month.splice(gitcalendar.monthindex, <span class="number">12</span> - gitcalendar.monthindex);</span><br><span class="line">      gitcalendar.monthchange = gitcalendar.montharrbefore.concat(gitcalendar.month);</span><br><span class="line">      addweek(data);</span><br><span class="line">      addlastmonth();</span><br><span class="line">      responsiveChart();</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(function(error) &#123;</span><br><span class="line">      console.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  //手机版更换为svg绘制</span><br><span class="line">  <span class="keyword">if</span> (document.getElementById(<span class="string">&quot;gitcalendarcanvasbox&quot;</span>).offsetWidth &lt; <span class="number">500</span>) &#123;</span><br><span class="line">    gitcalendar.simplemode = false</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //当改变窗口大小时重新绘制canvas</span><br><span class="line">  window.onresize = function() &#123;</span><br><span class="line">    <span class="keyword">if</span> (gitcalendar.simplemode) responsiveChart()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //解决滚动滑轮时出现的标签显示</span><br><span class="line">  window.onscroll = function() &#123;</span><br><span class="line">    <span class="keyword">if</span> (document.querySelector(<span class="string">&#x27;.angle-wrapper&#x27;</span>)) &#123;</span><br><span class="line">      document.querySelector(<span class="string">&#x27;.angle-wrapper&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br></pre></td></tr></table></figure></li><li><p>Hexo 三连即可看到效果。</p></li></ol><br><h2 id="哔哔-bber-发布时间格式"><a href="#哔哔-bber-发布时间格式" class="headerlink" title="哔哔 bber 发布时间格式"></a>哔哔 bber 发布时间格式</h2><blockquote><p>看到洪哥 bber 是<code>过去多少天</code>的显示方式，很喜欢且在移动端它和<code>设备显示文字</code>合起来不会占太大空间，但按照洪哥 bber 教程里配出来的是<code>年月日时分秒</code>的时间格式，最后结合洪哥和百度网友 js 代码整出了一个<code>bber.js</code>。</p></blockquote><details cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN/posts/Butterfly_Tutorial/image-20210410144530815.png" alt=""></p>              </div>            </details><div class="tag link"><a class="link-card" title="教程原贴" href="https://blog.zhheo.com/p/27be0e44.html"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://blog.zhheo.com/img/avatar.png"/></div><div class="right"><p class="text">教程原贴</p><p class="url">https://blog.zhheo.com/p/27be0e44.html</p></div></a></div><p>用<strong>过去多久</strong>来表示时间：</p><ol><li><p>新建<code>&lt;BlogRoot&gt;\themes\butterfly\source\js\bber.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.querySelector(<span class="string">&quot;#bber-loading&quot;</span>)) &#123;</span><br><span class="line">  <span class="keyword">var</span> loading_pic = <span class="built_in">document</span>.getElementById(<span class="string">&quot;bber-loading&quot;</span>);</span><br><span class="line">  loading_pic.innerHTML =</span><br><span class="line">    <span class="string">&#x27;&lt;span id=&quot;moments_loading&quot;&gt;&lt;i class=&quot;fa fa-spinner fa-spin&quot;&gt;&lt;/i&gt;&lt;/span&gt;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.querySelector(<span class="string">&quot;#bber&quot;</span>)) &#123;</span><br><span class="line">  app</span><br><span class="line">    .auth(&#123;</span><br><span class="line">      persistence: <span class="string">&quot;local&quot;</span>, <span class="comment">//避免与同实例冲突</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .anonymousAuthProvider()</span><br><span class="line">    .signIn()</span><br><span class="line">    .then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> bbClass = <span class="string">&quot;#bber&quot;</span>;</span><br><span class="line">      $(bbClass).after(</span><br><span class="line">        <span class="string">&#x27;&lt;div class=&quot;load&quot;&gt;&lt;button class=&quot;load-btn button-load&quot;&gt;加载中……&lt;/button&gt;&lt;/div&gt;&#x27;</span></span><br><span class="line">      );</span><br><span class="line">      <span class="keyword">const</span> db = app.database();</span><br><span class="line">      <span class="keyword">const</span> collection = db.collection(<span class="string">&quot;talks&quot;</span>);</span><br><span class="line">      <span class="keyword">var</span> count = <span class="number">0</span>,</span><br><span class="line">        per = <span class="number">9</span>,</span><br><span class="line">        page = <span class="number">1</span>;</span><br><span class="line">      collection.count(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">        count = res.total;</span><br><span class="line">        loading_pic.innerHTML = <span class="string">``</span>;</span><br><span class="line">        $(bbClass).append(</span><br><span class="line">          <span class="string">&#x27;&lt;p class=&quot;count&quot;&gt;共 &lt;span class=&quot;count-data&quot;&gt;&#x27;</span> +</span><br><span class="line">            count +</span><br><span class="line">            <span class="string">&quot;&lt;/span&gt; 条&lt;/p&gt;&quot;</span></span><br><span class="line">        );</span><br><span class="line">        getList();</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> ((page - <span class="number">1</span>) * per &gt;= count) &#123;</span><br><span class="line">          <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> d,</span><br><span class="line">          date,</span><br><span class="line">          resCont = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        collection</span><br><span class="line">          .limit(per)</span><br><span class="line">          .skip((page - <span class="number">1</span>) * per)</span><br><span class="line">          .orderBy(<span class="string">&quot;date&quot;</span>, <span class="string">&quot;desc&quot;</span>)</span><br><span class="line">          .get(<span class="function"><span class="keyword">function</span> (<span class="params">err, res</span>) </span>&#123;</span><br><span class="line">            res.data.forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">              (d = item.date),</span><br><span class="line">                (data =</span><br><span class="line">                  d.getFullYear() +</span><br><span class="line">                  <span class="string">&quot;/&quot;</span> +</span><br><span class="line">                  (d.getMonth() + <span class="number">1</span>) +</span><br><span class="line">                  <span class="string">&quot;/&quot;</span> +</span><br><span class="line">                  d.getDate() +</span><br><span class="line">                  <span class="string">&quot; &quot;</span> +</span><br><span class="line">                  d.getHours() +</span><br><span class="line">                  <span class="string">&quot;:&quot;</span> +</span><br><span class="line">                  d.getMinutes() +</span><br><span class="line">                  <span class="string">&quot;:&quot;</span> +</span><br><span class="line">                  d.getSeconds());</span><br><span class="line">              data1 = getDateDiff(data);</span><br><span class="line">              dataTime =</span><br><span class="line">                <span class="string">&#x27;&lt;p class=&quot;datatime&quot;&#x27;</span> +</span><br><span class="line">                <span class="string">&#x27;title=&quot;&#x27;</span> +</span><br><span class="line">                data +</span><br><span class="line">                <span class="string">&#x27;&quot;&gt;&#x27;</span> +</span><br><span class="line">                data1 +</span><br><span class="line">                <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">              dataCont =</span><br><span class="line">                <span class="string">&#x27;&lt;p class=&quot;datacont&quot;&gt;&#x27;</span> + urlToLink(item.content) + <span class="string">&quot;&lt;/p&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">var</span> from_icon = <span class="string">&quot;&quot;</span>;</span><br><span class="line">              <span class="keyword">if</span> (item.from.indexOf(<span class="string">&quot;iPhone&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-mobile-alt&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.from.indexOf(<span class="string">&quot;iPad&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-tablet-alt&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.from.indexOf(<span class="string">&quot;MacBook&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-laptop&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> <span class="keyword">if</span> (item.from.indexOf(<span class="string">&quot;微信&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">                from_icon =</span><br><span class="line">                  <span class="string">&#x27;&lt;i class=&quot;fab fa-weixin&quot; style=&quot;font-size: 0.6rem&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                from_icon = <span class="string">&#x27;&lt;i class=&quot;fas fa-tools&quot;&gt;&lt;/i&gt;&#x27;</span>;</span><br><span class="line">              &#125;</span><br><span class="line">              dataFrom = item.from</span><br><span class="line">                ? <span class="string">&#x27;&lt;p class=&quot;datafrom&quot;&gt;&lt;small&gt;&#x27;</span> +</span><br><span class="line">                  from_icon +</span><br><span class="line">                  item.from +</span><br><span class="line">                  <span class="string">&quot;&lt;/small&gt;&lt;/p&gt;&quot;</span></span><br><span class="line">                : <span class="string">&quot;&quot;</span>;</span><br><span class="line">              resCont +=</span><br><span class="line">                <span class="string">&#x27;&lt;li class=&quot;item&quot;&gt;&lt;div&gt;&#x27;</span> +</span><br><span class="line">                dataTime +</span><br><span class="line">                dataCont +</span><br><span class="line">                dataFrom +</span><br><span class="line">                <span class="string">&quot;&lt;/div&gt;&lt;/li&gt;&quot;</span>;</span><br><span class="line">            &#125;);</span><br><span class="line">            $(bbClass).append(</span><br><span class="line">              <span class="string">&#x27;&lt;section class=&quot;timeline page-&#x27;</span> +</span><br><span class="line">                page +</span><br><span class="line">                <span class="string">&#x27;&quot;&gt;&lt;ul&gt;&lt;div class=&quot;list&quot;&gt;&#x27;</span> +</span><br><span class="line">                resCont +</span><br><span class="line">                <span class="string">&quot;&lt;/div&gt;&lt;/ul&gt;&lt;/section&gt;&quot;</span></span><br><span class="line">            );</span><br><span class="line">            $(<span class="string">&quot;button.button-load&quot;</span>).text(<span class="string">&quot;加载更多&quot;</span>);</span><br><span class="line">            <span class="comment">// $(&#x27;html,body&#x27;).animate(&#123; scrollTop: $(&#x27;.timeline.page-&#x27;+page).offset().top - 20 &#125;, 500)</span></span><br><span class="line">            <span class="keyword">if</span> (page * per &gt;= count) &#123;</span><br><span class="line">              $(<span class="string">&quot;.load&quot;</span>).remove();</span><br><span class="line">              <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            page++;</span><br><span class="line">            Lately(&#123; <span class="attr">target</span>: <span class="string">&quot;#bber .datatime&quot;</span> &#125;);</span><br><span class="line">            <span class="comment">// $(&quot;#bber a[rel!=link]:has(img)&quot;).slimbox();//图片灯箱效果</span></span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getTs</span>(<span class="params">time</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> arr = time.split(<span class="regexp">/[/ :]/</span>),</span><br><span class="line">          _date = <span class="keyword">new</span> <span class="built_in">Date</span>(</span><br><span class="line">            arr[<span class="number">0</span>],</span><br><span class="line">            arr[<span class="number">1</span>] - <span class="number">1</span>,</span><br><span class="line">            arr[<span class="number">2</span>],</span><br><span class="line">            arr[<span class="number">3</span>],</span><br><span class="line">            arr[<span class="number">4</span>],</span><br><span class="line">            arr[<span class="number">5</span>]</span><br><span class="line">          ),</span><br><span class="line">          timeStr = <span class="built_in">Date</span>.parse(_date);</span><br><span class="line">        <span class="keyword">return</span> timeStr;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="function"><span class="keyword">function</span> <span class="title">getDateDiff</span>(<span class="params">post_modified</span>) </span>&#123;</span><br><span class="line">        <span class="comment">// 拿到当前时间戳和发布时的时间戳，然后得出时间戳差</span></span><br><span class="line">        <span class="keyword">var</span> curTime = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">        <span class="keyword">var</span> postTime = <span class="keyword">new</span> <span class="built_in">Date</span>(post_modified);</span><br><span class="line">        <span class="comment">//部分浏览器不兼容此转换建议所以对此进行补充（指定调用自己定义的函数进行生成发布时间的时间戳）</span></span><br><span class="line">        <span class="comment">//var timeDiff = curTime.getTime() - postTime.getTime();</span></span><br><span class="line">        <span class="comment">//上面一行代码可以换成以下（兼容性的解决）</span></span><br><span class="line">        <span class="keyword">var</span> timeDiff = curTime.getTime() - getTs(post_modified);</span><br><span class="line">        <span class="comment">// 单位换算</span></span><br><span class="line">        <span class="keyword">var</span> min = <span class="number">60</span> * <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">var</span> hour = min * <span class="number">60</span>;</span><br><span class="line">        <span class="keyword">var</span> day = hour * <span class="number">24</span>;</span><br><span class="line">        <span class="keyword">var</span> week = day * <span class="number">7</span>;</span><br><span class="line">        <span class="keyword">var</span> month = week * <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">var</span> year = month * <span class="number">12</span>;</span><br><span class="line">        <span class="comment">// 计算发布时间距离当前时间的周、天、时、分</span></span><br><span class="line">        <span class="keyword">var</span> exceedyear = <span class="built_in">Math</span>.floor(timeDiff / year);</span><br><span class="line">        <span class="keyword">var</span> exceedmonth = <span class="built_in">Math</span>.floor(timeDiff / month);</span><br><span class="line">        <span class="keyword">var</span> exceedWeek = <span class="built_in">Math</span>.floor(timeDiff / week);</span><br><span class="line">        <span class="keyword">var</span> exceedDay = <span class="built_in">Math</span>.floor(timeDiff / day);</span><br><span class="line">        <span class="keyword">var</span> exceedHour = <span class="built_in">Math</span>.floor(timeDiff / hour);</span><br><span class="line">        <span class="keyword">var</span> exceedMin = <span class="built_in">Math</span>.floor(timeDiff / min);</span><br><span class="line">        <span class="comment">// 最后判断时间差到底是属于哪个区间，然后return</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (exceedyear &lt; <span class="number">100</span> &amp;&amp; exceedyear &gt; <span class="number">0</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="string">&quot;发表于&quot;</span> + exceedyear + <span class="string">&quot;年前&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (exceedmonth &lt; <span class="number">12</span> &amp;&amp; exceedmonth &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> exceedmonth + <span class="string">&quot;月前&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (exceedWeek &lt; <span class="number">4</span> &amp;&amp; exceedWeek &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              <span class="keyword">return</span> exceedWeek + <span class="string">&quot;星期前&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (exceedDay &lt; <span class="number">7</span> &amp;&amp; exceedDay &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> exceedDay + <span class="string">&quot;天前&quot;</span>;</span><br><span class="line">              &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (exceedHour &lt; <span class="number">24</span> &amp;&amp; exceedHour &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                  <span class="keyword">return</span> exceedHour + <span class="string">&quot;小时前&quot;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                  <span class="keyword">if</span> (exceedMin == <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;刚刚发表&quot;</span>;</span><br><span class="line">                  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> exceedMin + <span class="string">&quot;分钟前&quot;</span>;</span><br><span class="line">                  &#125;</span><br><span class="line">                &#125;</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      $(<span class="string">&quot;.button-load&quot;</span>).click(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        $(<span class="string">&quot;.button-load&quot;</span>).text(<span class="string">&quot;加载中……&quot;</span>);</span><br><span class="line">        getList();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(err);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">urlToLink</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> re = <span class="regexp">/\bhttps?:\/\/(?!\S+(?:jpe?g|png|bmp|gif|webp|gif))\S+/g</span>;</span><br><span class="line">  <span class="keyword">var</span> re_forpic = <span class="regexp">/\bhttps?:[^:&lt;&gt;&quot;]*\/([^:&lt;&gt;&quot;]*)(\.(jpeg)|(png)|(jpg)|(webp))/g</span>;</span><br><span class="line">  str = str.replace(re_forpic, <span class="function"><span class="keyword">function</span> (<span class="params">imgurl</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;&lt;a href=&quot;&#x27;</span> + imgurl + <span class="string">&#x27;&quot;&gt;&lt;img src=&quot;&#x27;</span> + imgurl + <span class="string">&#x27;&quot; /&gt;&lt;/a&gt;&#x27;</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">  str = str.replace(re, <span class="function"><span class="keyword">function</span> (<span class="params">website</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      <span class="string">&quot; &lt;a href=&#x27;&quot;</span> + website + <span class="string">&quot;&#x27;rel=&#x27;noopener&#x27; target=&#x27;_blank&#x27;&gt;↘链接↙&lt;/a&gt; &quot;</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">  str = qqWechatEmotionParser(str);</span><br><span class="line">  <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> $jscomp = $jscomp || &#123;&#125;;</span><br><span class="line">$jscomp.scope = &#123;&#125;;</span><br><span class="line">$jscomp.arrayIteratorImpl = <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> g = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> g &lt; b.length ? &#123; <span class="attr">done</span>: !<span class="number">1</span>, <span class="attr">value</span>: b[g++] &#125; : &#123; <span class="attr">done</span>: !<span class="number">0</span> &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">$jscomp.arrayIterator = <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">next</span>: $jscomp.arrayIteratorImpl(b) &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">$jscomp.makeIterator = <span class="function"><span class="keyword">function</span> (<span class="params">b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> g =</span><br><span class="line">    <span class="string">&quot;undefined&quot;</span> != <span class="keyword">typeof</span> <span class="built_in">Symbol</span> &amp;&amp; <span class="built_in">Symbol</span>.iterator &amp;&amp; b[<span class="built_in">Symbol</span>.iterator];</span><br><span class="line">  <span class="keyword">return</span> g ? g.call(b) : $jscomp.arrayIterator(b);</span><br><span class="line">&#125;;</span><br><span class="line">(<span class="function"><span class="keyword">function</span> (<span class="params">b, g</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> p = <span class="function"><span class="keyword">function</span> (<span class="params">h</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> d = h.lang || &#123;</span><br><span class="line">      second: <span class="string">&quot;\u79d2&quot;</span>,</span><br><span class="line">      minute: <span class="string">&quot;\u5206\u949f&quot;</span>,</span><br><span class="line">      hour: <span class="string">&quot;\u5c0f\u65f6&quot;</span>,</span><br><span class="line">      day: <span class="string">&quot;\u5929&quot;</span>,</span><br><span class="line">      month: <span class="string">&quot;\u4e2a\u6708&quot;</span>,</span><br><span class="line">      year: <span class="string">&quot;\u5e74&quot;</span>,</span><br><span class="line">      ago: <span class="string">&quot;\u524d&quot;</span>,</span><br><span class="line">      error: <span class="string">&quot;NaN&quot;</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">    h = $jscomp.makeIterator(<span class="built_in">document</span>.querySelectorAll(h.target || <span class="string">&quot;.time&quot;</span>));</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> c = h.next(); !c.done; c = h.next()) &#123;</span><br><span class="line">      c = c.value;</span><br><span class="line">      <span class="keyword">var</span> a = c.dateTime;</span><br><span class="line">      <span class="keyword">var</span> e = c.title,</span><br><span class="line">        f = c.innerHTML;</span><br><span class="line">      <span class="keyword">if</span> (</span><br><span class="line">        !a ||</span><br><span class="line">        <span class="built_in">isNaN</span>(</span><br><span class="line">          <span class="keyword">new</span> <span class="built_in">Date</span>(</span><br><span class="line">            (a = a</span><br><span class="line">              .replace(<span class="regexp">/(.*)[a-z](.*)\+(.*)/gi</span>, <span class="string">&quot;$1 $2&quot;</span>)</span><br><span class="line">              .replace(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))</span><br><span class="line">          )</span><br><span class="line">        )</span><br><span class="line">      )</span><br><span class="line">        <span class="keyword">if</span> (e &amp;&amp; !<span class="built_in">isNaN</span>(<span class="keyword">new</span> <span class="built_in">Date</span>((e = e.replace(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))))) a = e;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (f &amp;&amp; !<span class="built_in">isNaN</span>(<span class="keyword">new</span> <span class="built_in">Date</span>((f = f.replace(<span class="regexp">/-/g</span>, <span class="string">&quot;/&quot;</span>))))) a = f;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">break</span>;</span><br><span class="line">      c.title = a;</span><br><span class="line">      a = <span class="keyword">new</span> <span class="built_in">Date</span>(a);</span><br><span class="line">      a = (<span class="keyword">new</span> <span class="built_in">Date</span>().getTime() - a.getTime()) / <span class="number">1e3</span>;</span><br><span class="line">      e = a / <span class="number">60</span>;</span><br><span class="line">      f = e / <span class="number">60</span>;</span><br><span class="line">      <span class="keyword">var</span> k = f / <span class="number">24</span>,</span><br><span class="line">        l = k / <span class="number">30</span>,</span><br><span class="line">        m = l / <span class="number">12</span>;</span><br><span class="line">      c.innerHTML =</span><br><span class="line">        (<span class="number">1</span> &lt;= m</span><br><span class="line">          ? <span class="built_in">Math</span>.floor(m) + d.year</span><br><span class="line">          : <span class="number">1</span> &lt;= l</span><br><span class="line">          ? <span class="built_in">Math</span>.floor(l) + d.month</span><br><span class="line">          : <span class="number">1</span> &lt;= k</span><br><span class="line">          ? <span class="built_in">Math</span>.floor(k) + d.day</span><br><span class="line">          : <span class="number">1</span> &lt;= f</span><br><span class="line">          ? <span class="built_in">Math</span>.floor(f) + d.hour</span><br><span class="line">          : <span class="number">1</span> &lt;= e</span><br><span class="line">          ? <span class="built_in">Math</span>.floor(e) + d.minute</span><br><span class="line">          : <span class="number">1</span> &lt;= a</span><br><span class="line">          ? <span class="built_in">Math</span>.floor(a) + d.second</span><br><span class="line">          : d.error) + d.ago;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">var</span> n = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span> || (<span class="number">0</span>, <span class="built_in">eval</span>)(<span class="string">&quot;this&quot;</span>);</span><br><span class="line">  &#125;)();</span><br><span class="line">  <span class="string">&quot;Lately&quot;</span> <span class="keyword">in</span> n || (n.Lately = p);</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure></li><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\layout\includes\page\bb.pug</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    script.</span><br><span class="line">      const app = cloudbase.init(&#123;</span><br><span class="line">      env: &#x27;一giu我里giao&#x27;, //这里是你的环境id</span><br><span class="line">      //region: &quot;ap-guangzhou&quot;</span><br><span class="line">      &#125;)</span><br><span class="line"><span class="deletion">- script(type=&#x27;text/javascript&#x27;, src=&#x27;https://cdn.jsdelivr.net/gh/zhheo/bber@main/bber.js&#x27;, data-pjax=&#x27;&#x27;)</span></span><br><span class="line"><span class="addition">+ script(type=&#x27;text/javascript&#x27;, src=&#x27;/js/bber.js&#x27;, data-pjax=&#x27;&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><p>Hexo 三连即可看到效果。</p></li></ol><p>参考教程：<a href="https://blog.csdn.net/u013008898/article/details/86679568">https://blog.csdn.net/u013008898/article/details/86679568</a></p><details ><summary> 碎碎念，搭建哔哔过程 </summary>              <div class='content'>              <p>现在我转而用 Heson 的哔哔项目了，因为腾讯云莫名其妙不能调用哔哔内容，其实刚开始还是可以的。我前前后后反复找原因，甚至重新按教程搭建了 2 次腾讯云后台还是调用不了，于是我开始猜测是不是主题升级的原因，但我将升级之前代码的 download 下来 hexo s 后居然可以正常显示哔哔内容，很奇怪，但是我都已经费老大心思升级了难不成还退回去？更离谱的还有，我在分析原因的时候，不知道碰了个什么 bb 相关代码，突然能正常显示，过了会又不能显示，最后，还有离谱的事情，我突然发现腾讯云后台权限配置莫名其妙改了，我直接黑人问号，我明明配置好了，什么时候就自动改了，然后我将权限改成<u>管理员能改所有人能看</u>，唉，就能正常显示了嘿嘿，你以为这就万事大吉了？很气，过了一段时间，哔哔内容又不能正常显示，我在想应该是权限的原因吧？结果到腾讯云一看，这回权限老老实实是开的，但不知道又 tm 哪出问题了，我急了我急了，索性我转战叨叨（一个仿哔哔项目），我配置了半天，好不容易快结束，结果，唉，vercel 的 api 突然死活发不了哔哔，问教程博主也无济于事，爬！爷生气了，我还是挺细心的去按照教程操作，结果就这，最后啊，我最终选择了 leancloud 后台的哔哔项目，感谢 heson 大佬，他还做了蜜云版哔哔（可称为情侣哔哔），非常养眼的一个哔哔项目，i 了 i 了，适合虐自己(dog)，但缺点是只能在微信公众号发，现在不支持 IOS 快捷指令，以及增删改查合并一些操作，不过每次发之前想好措辞即可，实在不行打开后台改也是一样，我目前勉强能习惯吧（因为我别无选择，不想再重新试了！Heson 的也挺好）</p>              </div>            </details><h2 id="社交图标使用多色-svg"><a href="#社交图标使用多色-svg" class="headerlink" title="社交图标使用多色 svg"></a>社交图标使用多色 svg</h2><blockquote><p>本小节结合了 Aki 的教程和<a href="https://kangblogs.top">kangblogs</a>群友的做法。Aki 的教程适合 Butterfly3.7.0 版本以上且只能是导航栏的图标多色显示，而我的需求是社交图标也能多色显示（2021-4-16 现在 Aki 已经写了教程，本篇仅供参考）。</p></blockquote><details cyan><summary> 预览效果 </summary>              <div class='content'>              <p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN/posts/Butterfly_Tutorial/image-20210411233935368.png" alt=""></p>              </div>            </details><div class="tag link"><a class="link-card" title="教程原贴" href="https://akilar.top/posts/23fdf850/"><div class="left"><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/Akilarlxh/akilarlxh.github.io/img/siteicon/favicon.ico"/></div><div class="right"><p class="text">教程原贴</p><p class="url">https://akilar.top/posts/23fdf850/</p></div></a></div><ol><li><p>修改<code>&lt;BlogRoot&gt;themes\butterfly\layout\includes\header\social.pug</code></p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">each url, icon in theme.social</span><br><span class="line">  a.social-icon(href=url_for(trim(url.split(&#x27;||&#x27;)[0])) target=&quot;_blank&quot;</span><br><span class="line">  title=url.split(&#x27;||&#x27;)[1] <span class="comment">=== undefined ? &#x27;&#x27; : trim(url.split(&#x27;||&#x27;)[1]))</span></span><br><span class="line"><span class="deletion">- i(class=icon)</span></span><br><span class="line"><span class="addition">+    style(type=&#x27;text/css&#x27;).</span></span><br><span class="line"><span class="addition">+      .icon &#123;</span></span><br><span class="line"><span class="addition">+      width: 1em; height: 1em;</span></span><br><span class="line"><span class="addition">+      vertical-align: -0.15em;</span></span><br><span class="line"><span class="addition">+      fill: currentColor;</span></span><br><span class="line"><span class="addition">+      overflow: hidden;</span></span><br><span class="line"><span class="addition">+      &#125;</span></span><br><span class="line"><span class="addition">+    svg.icon(aria-hidden=&#x27;true&#x27;)</span></span><br><span class="line"><span class="addition">+      use(xlink:href=&#x27;#&#x27;+icon)</span></span><br></pre></td></tr></table></figure></li><li><p>按照原教程配置，记得导入自己阿里图标 symbol 的 js，最后 Hexo 三连即可看到效果。</p></li></ol><h3 id="svg-图标旋转效果"><a href="#svg-图标旋转效果" class="headerlink" title="svg 图标旋转效果"></a>svg 图标旋转效果</h3><ol><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\source\css\_layout\aside.styl</code>大概第 85 行左右</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">      .social-icon</span><br><span class="line">        margin: 0 .5rem</span><br><span class="line">        color: var(--font-color)</span><br><span class="line">        font-size: 1.4em</span><br><span class="line">        cursor: pointer</span><br><span class="line"><span class="addition">+// svg旋转魔改</span></span><br><span class="line"><span class="addition">+       svg.icon</span></span><br><span class="line"><span class="addition">+         transition: all .3s</span></span><br><span class="line"><span class="addition">+         &amp;:hover</span></span><br><span class="line"><span class="addition">+           transform: rotate(360deg)</span></span><br></pre></td></tr></table></figure></li><li><p>Hexo 三连即可看到效果。</p></li></ol><h2 id="横版导航栏二级菜单偏移量修正"><a href="#横版导航栏二级菜单偏移量修正" class="headerlink" title="横版导航栏二级菜单偏移量修正"></a>横版导航栏二级菜单偏移量修正</h2><blockquote><p>如果你自己将洪哥的导航栏样式成功扒了下来，恭喜你可以参考这篇，因为你会发现偏移量得手动配置，每次更新导航栏内容时都要重新配置偏移量很麻烦。再次感谢 Aki 在群里的提议！</p></blockquote><ol><li><p>修改<code>&lt;BlogRoot&gt;\themes\butterfly\layout\includes\header\menu_item.pug</code>大概第 30 行</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">      else</span><br><span class="line">        .menus_item</span><br><span class="line">          a.site-page(href=&#x27;javascript:void(0);&#x27;)</span><br><span class="line">            if label.split(&#x27;||&#x27;)[1]</span><br><span class="line">              - var icon_label = trim(label.split(&#x27;||&#x27;)[1])</span><br><span class="line">              if icon_label.substring(0,2)==&quot;fa&quot;</span><br><span class="line">                i.fa-fw(class=icon_label)</span><br><span class="line">              else if icon_label.substring(0,4)==&quot;icon&quot;</span><br><span class="line">                svg.icon(aria-hidden=&quot;true&quot;)</span><br><span class="line">                  use(xlink:href=`#`+ icon_label)</span><br><span class="line">            span=&#x27; &#x27;+ trim(label.split(&#x27;||&#x27;)[0])</span><br><span class="line">            i.fas.fa-chevron-down.expand(class=sidebarChildHide)</span><br><span class="line"><span class="deletion">-         ul.menus_item_child</span></span><br><span class="line"><span class="addition">+         ul.menus_item_child(style=&#x27;right:-&#x27; + (Object.keys(value).length)*45 + &#x27;px&#x27;)</span></span><br></pre></td></tr></table></figure></li><li><p>删除<code>&lt;Custom&gt;.css</code>里这一段（若果你扒的时候加了这一行）</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="deletion">-#menus &gt; div.menus_items &gt; div:nth-child(1) &gt; ul &#123;</span></span><br><span class="line"><span class="deletion">-  right: -???px !important;</span></span><br><span class="line"><span class="deletion">-&#125;</span></span><br><span class="line"><span class="deletion">-#menus &gt; div.menus_items &gt; div:nth-child(2) &gt; ul &#123;</span></span><br><span class="line"><span class="deletion">-  right: -???px !important;</span></span><br><span class="line"><span class="deletion">-&#125;</span></span><br><span class="line"><span class="deletion">-#menus &gt; div.menus_items &gt; div:nth-child(3) &gt; ul &#123;</span></span><br><span class="line"><span class="deletion">-  right: -???px !important;</span></span><br><span class="line"><span class="deletion">-&#125;</span></span><br><span class="line"><span class="deletion">-#menus &gt; div.menus_items &gt; div:nth-child(4) &gt; ul &#123;</span></span><br><span class="line"><span class="deletion">-  right: -???px !important;</span></span><br><span class="line"><span class="deletion">-&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>Hexo 三连即可看到效果</p></li></ol><blockquote><p>优点：以后更新导航栏内容时不用在 css 里调偏移量。缺点：显示效果没有那么居中，当然你可以适当调整<code>menu_item.pug</code>的数值计算关系，对于强迫症的我来说还是选择手动调。</p></blockquote><br><blockquote><p><strong>结束语</strong>：</p><p>若是有疑问或建议恳请留言。若想 get 本篇未记录的同款，请先查看<a href="https://hassanwong.top/log/">更新手账</a>，手账记录了本站 1 月 23 号以来所有的美化魔改微调，且<u>参考过他人的更新都附带有教程链接</u>。对于本站的原创更改，请自行<code>F12</code>（狗头.jpg）。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;本篇是使用其他优秀博主教程时延申出来的idea。目前有很多 Butterfly 主题美化魔改教程，此篇就不重复造轮子。平时使用其他优秀博主教程时难免有些小 idea，本篇将记录值得的二创瞬间。</summary>
      
    
    
    
    <category term="💻实用教程" scheme="https://hassanwong.top/categories/%F0%9F%92%BB%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="🔹Hexo" scheme="https://hassanwong.top/tags/%F0%9F%94%B9Hexo/"/>
    
    <category term="📝博客" scheme="https://hassanwong.top/tags/%F0%9F%93%9D%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="🦋Butterfly" scheme="https://hassanwong.top/tags/%F0%9F%A6%8BButterfly/"/>
    
  </entry>
  
  <entry>
    <title>现在的人咋都这么爱白嫖？</title>
    <link href="https://hassanwong.top/posts/d53524f6/"/>
    <id>https://hassanwong.top/posts/d53524f6/</id>
    <published>2021-04-03T06:12:00.000Z</published>
    <updated>2021-05-06T11:51:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="白嫖什么意思？"><a href="#白嫖什么意思？" class="headerlink" title="白嫖什么意思？"></a>白嫖什么意思？</h2><p><a href="https://baike.baidu.com/item/%E7%99%BD%E5%AB%96/22207531?fr=aladdin">百度百科</a>上说：它是网络流行词，由最早不给钱吃“霸王餐”的白嫖一词演变而来，后流行于饭圈、游戏圈。意思为饭爱豆却并不为他花钱，不买专辑不买周边不看演唱会不买电影票，却又享用其他人资源的人。后引申泛指免费索取他人资源的行为。简单说就是<strong>不花费任何资源去进行某件事情</strong>。</p><p>看完百度百科，想到了我去年追女团选秀时没在打投上花过一分钱，尽管她是我最喜欢的选手，夜不能寐，但在我看来，追星这件事，每个人有自己的想法，这本是无可厚非的事情，难道给偶像相关报道点赞评论转发、为她打榜投票不算是对Ta的正向反馈吗？自己追的快乐才是真谛。而本篇<strong>主要谈论白嫖的对象是那些资源</strong>，并非饭圈、游戏圈上的。</p><h2 id="白嫖现象"><a href="#白嫖现象" class="headerlink" title="白嫖现象"></a>白嫖现象</h2><p>从我上大学以来，发现网上白嫖的人越来越多了。有句话大家应该耳熟能详：“白嫖一时爽，一直白嫖一直爽”，你们反问下自己，真的爽吗？那确实爽（来自博主的肯定👍），不花一分钱能得到自己想要的东西，绝大多数人都会感到开心，But！你是否和我一样有忙于去搜集白嫖资源而浪费大量时间的苦恼呢？hh</p><h2 id="为什么喜欢白嫖？"><a href="#为什么喜欢白嫖？" class="headerlink" title="为什么喜欢白嫖？"></a>为什么喜欢白嫖？</h2><p><strong>原因一</strong>：与<strong>家境贫寒，勤俭节约习惯</strong>有关，<del>别问，问就是qiong</del>。当然判断自己贫富的这杆秤这在大多数人心里都是相对的，而并非绝对的，你觉得发达城市贫穷家庭和乡镇地区富裕家庭能比较吗？根本没有可比性。谈谈我自己吧，我认为我家不是那么宽裕，家人工作很辛苦非常不容易，我从小在勤俭节约家风的耳濡目染下，自然而然不那么败家，对钱的出入比较敏感，好处是我收获到了父母在金钱上不限制我的privilege，乍一看挺好的，但也使我变得精打细算起来，甚至是白嫖重度患者。</p><p><strong>原因二</strong>：与<strong>巨婴心理</strong>有关。觉得别人做什么都是轻而易举的，别人对自己的好是理所当然，自己也心安理得去接受。这类人的惯性思维是：“你都有这么多了，给我用点有什么关系？”，要知道我给你是我的情份，我不给你是我的本份，做人呐，要常怀感恩之心。</p><p><strong>原因三</strong>：与你的<strong>资源搜集能力</strong>有关。当然这点不具有普适性，谈谈我自己吧，我的专业是计算机，自从我接触了这个领域，我感觉我的资源搜索能力越来越强，一般PDF资源、付费软件、付费网课、付费影视、付费音乐等等大多数我都能在互联网的犄角旮旯里找到。当然，资源搜集能力和喜不喜欢白嫖其实没有必然联系，但只要你稍微有白嫖的习惯，你倾向白嫖的程度会随着搜集能力增强而提高，同时，你的搜集能力也会随着喜欢白嫖程度提高而增强，这就是为什么越来越多的人容易陷进白嫖的漩涡。</p><h2 id="白嫖的利弊？"><a href="#白嫖的利弊？" class="headerlink" title="白嫖的利弊？"></a>白嫖的利弊？</h2><p>白嫖能让你不花一分钱并享受到你想要的东西，但是你会浪费大量时间在资源搜集上，使你出手不会那么阔绰、豪爽。先说说白嫖给我思维观念带来的变化，我发现我越来越为自己不去买某些必需品而找理由，我潜意识会认为它没有那么必要，我能找到同等低廉替代物，甚至是免费的，买任何一件物品都会思考再三，货比三家，四处搜索，但真的很累很狼狈。我觉得<strong>在某种程度上白嫖和省钱可以相提并论</strong>，有时候你可能会因为省点钱而放弃重要的事情，你甚至可能连事情的重要性都拿捏不稳，你可能短时间享受到了不用付出的快乐，但眼光放长远，你很有可能下错了一步人生大棋。比如，你有一场重要的面试，你因省钱选择了搭乘公交，最后因迟到而错失了面试机会；你未来有场重要的考试，而你为了省钱，在网上找那种质量掺水且没有老师一对一服务的资源而决定自学，最终却因此没考过最后选择二战。这些例子不胜枚举，尽管若你能力强，这些便不是问题，但有时候花一点小钱，却会给你带来更大的好处，难道节省下来的时间不是更重要吗？你拥有了无价的知识、无价的时间，这些间接为你未来的发展起到促进作用，你现在节约下来的钱以后可能不到一个月就可以赚回来，难道不是吗？（说给自己听的）</p><h2 id="那我以后就不白嫖了，行吗？"><a href="#那我以后就不白嫖了，行吗？" class="headerlink" title="那我以后就不白嫖了，行吗？"></a>那我以后就不白嫖了，行吗？</h2><p>首先得知道，白嫖它并不是一个贬义词，更多的是<strong>中性</strong>，有时候别人热心免费分享给你一些资源，你用了这没多大问题，至于你感不感谢Ta那是人情世故，只是不要喜欢占别人便宜，得了便宜还卖乖，得不到就骂骂咧咧，那种白嫖真的很狼狈，受人鄙视、唾弃。</p><h2 id="博主我做了哪些改变？"><a href="#博主我做了哪些改变？" class="headerlink" title="博主我做了哪些改变？"></a>博主我做了哪些改变？</h2><p>其实我是白嫖重度型选手，我目前也在尝试做一些改变，比如偶尔打个赏，给某App充个年度会员等等，这是几年前的我根本不敢想的事情。最后，对于节约型白嫖选手我想说，将钱花在刀刃上很重要，不要顾此失彼；对巨婴型白嫖选手想说，不求你重金打赏，哪怕一句谢谢也行，这样才能让免费分享的一片爱心得以延续下去。Peace &amp; Love！</p><p><del>（看到文章下面的Trick or Treat按钮了吗？哦，原来是个摆设呀🙈555）</del></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;白嫖什么意思？&quot;&gt;&lt;a href=&quot;#白嫖什么意思？&quot; class=&quot;headerlink&quot; title=&quot;白嫖什么意思？&quot;&gt;&lt;/a&gt;白嫖什么意思？&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://baike.baidu.com/item/%E7%99%BD%E5</summary>
      
    
    
    
    <category term="💬茶余饭后" scheme="https://hassanwong.top/categories/%F0%9F%92%AC%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
    
    <category term="💰经济" scheme="https://hassanwong.top/tags/%F0%9F%92%B0%E7%BB%8F%E6%B5%8E/"/>
    
  </entry>
  
  <entry>
    <title>教程&amp;笔记常量申明</title>
    <link href="https://hassanwong.top/posts/223fd004/"/>
    <id>https://hassanwong.top/posts/223fd004/</id>
    <published>2021-03-25T12:31:00.000Z</published>
    <updated>2021-04-22T13:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><p>所有教程、文章都会使用下列通用参数，方便表达含义，<del>你我之间的暗号，懂的都懂</del>。本篇受Aki店长的启发。</p></blockquote><h2 id="教程参数说明"><a href="#教程参数说明" class="headerlink" title="教程参数说明"></a>教程参数说明</h2><table><thead><tr><th>参数名</th><th>释义</th></tr></thead><tbody><tr><td>&lt;UserName&gt;</td><td>项目托管平台注册时的用户名（包括 GitHub、Gitee 等）</td></tr><tr><td>&lt;BlogRoot&gt;</td><td>博客本地根目录</td></tr><tr><td>&lt;RepoGit&gt;</td><td>远程仓库 Git 地址</td></tr><tr><td>&lt;RepoName&gt;</td><td>远程仓库名称</td></tr><tr><td>&lt;OriginRepoGit&gt;</td><td>上游仓库 Git 地址</td></tr><tr><td>&lt;BranchName&gt;</td><td>仓库分支名称</td></tr><tr><td>&lt;Custom&gt;</td><td>自定义内容</td></tr><tr><td>&lt;FilePath&gt;</td><td>文件路径，<u>有时可能会加上文件名的后缀</u>。<br>例如：[FilePath_520.jpg]，意为 520.jpg 图片的路径</td></tr><tr><td>&lt;Copy&gt;</td><td>复制内容</td></tr><tr><td>&lt;Email&gt;</td><td>邮箱号</td></tr><tr><td>&lt;URL&gt;</td><td>链接</td></tr><tr><td>&lt;&gt; 👉 []</td><td>意为<strong>可选参数</strong></td></tr><tr><td>Git 三连</td><td>git add .<br>git commit -m “<Custom>“<br>git push origin <BranchName></td></tr><tr><td>Hexo 三连</td><td>hexo clean<br>hexo g<br>hexo s / hexo d</td></tr></tbody></table><h2 id="The-End"><a href="#The-End" class="headerlink" title="The End"></a>The End</h2><p>友友们看文章时若是有疑问请：</p><ul><li><p>先百度</p></li><li><p>实在不会欢迎在当页下方留言栏留言</p></li><li><p>或点击右上方导航栏中的<a href="https://hassanwong.top/comments/">留言树洞</a>进行留言</p></li></ul><p>最后想了解更多关于 Butterfly 主题博客的相关问题，推荐进Aki店长的群</p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210404/img/QQ_Group_Aki.png" alt="QQ群" style="zoom:50%;" />]]></content>
    
    
    <summary type="html">初来乍到的友友们必看！🤝</summary>
    
    
    
    <category term="💻实用教程" scheme="https://hassanwong.top/categories/%F0%9F%92%BB%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="🔹Hexo" scheme="https://hassanwong.top/tags/%F0%9F%94%B9Hexo/"/>
    
    <category term="📝博客" scheme="https://hassanwong.top/tags/%F0%9F%93%9D%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="👾GitHub" scheme="https://hassanwong.top/tags/%F0%9F%91%BEGitHub/"/>
    
  </entry>
  
  <entry>
    <title>数据结构笔记（C）</title>
    <link href="https://hassanwong.top/posts/a24c061e/"/>
    <id>https://hassanwong.top/posts/a24c061e/</id>
    <published>2021-03-23T13:39:00.000Z</published>
    <updated>2021-04-22T12:20:00.000Z</updated>
    
    
    <summary type="html">将跳转到我的个人文档网站，欢迎路过的友友们来PR，共同撰写和完善笔记</summary>
    
    
    
    <category term="📕知识笔记" scheme="https://hassanwong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="📜C语言" scheme="https://hassanwong.top/tags/%F0%9F%93%9CC%E8%AF%AD%E8%A8%80/"/>
    
    <category term="📃C++" scheme="https://hassanwong.top/tags/%F0%9F%93%83C/"/>
    
    <category term="📊数据结构" scheme="https://hassanwong.top/tags/%F0%9F%93%8A%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>㊙ 英国计算机硕士留学相关资讯</title>
    <link href="https://hassanwong.top/posts/4889fc02/"/>
    <id>https://hassanwong.top/posts/4889fc02/</id>
    <published>2021-03-21T07:21:00.000Z</published>
    <updated>2021-04-16T05:06:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="咒语念错了！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="299093c7c4c54d2fda2164d9716245d5e0dc2e8022d7dd3e42d2c9a9cfc4f1d6"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被伏地魔封印了，需要咒语来解除！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">本篇收集了英国计算机硕士留学的相关资讯并结合了个人经验看法，可以来了解了解（但！博主目前在准备中，不能保证此篇有效性，故设密了，待成功之日，再全网分享经验，欢迎线上互相交流！）</summary>
    
    
    
    <category term="🤗干货分享" scheme="https://hassanwong.top/categories/%F0%9F%A4%97%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="🌏留学" scheme="https://hassanwong.top/tags/%F0%9F%8C%8F%E7%95%99%E5%AD%A6/"/>
    
    <category term="🌈英国" scheme="https://hassanwong.top/tags/%F0%9F%8C%88%E8%8B%B1%E5%9B%BD/"/>
    
  </entry>
  
  <entry>
    <title>如何写说唱歌词？</title>
    <link href="https://hassanwong.top/posts/911eabb0/"/>
    <id>https://hassanwong.top/posts/911eabb0/</id>
    <published>2021-03-19T03:00:00.000Z</published>
    <updated>2021-04-17T02:33:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><p>读者们可能第一时间想问：宁配吗？作品发来看看？观众姥爷们老暴躁了，<del>可能我假想过于丰富</del>，截止目前 2021.3.19，<span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #81d8cf;color: #fff">听我狡辩  </button><span class="hide-content">我已经写了些许“作品”，本来想着寒假发，由于要准备留学和本人时间管理能力极差，所以一直拖到现在，今年暑假也不能确定能否顺利发行歌曲，可能还要实习OMG </span></span>。莫慌！首先这都是我实践过程中总结的经验，部分有参考其他优秀音乐人的做法。本文章大伙们<del>图一乐涨涨姿势</del>就行，若能学到一些哪怕仅仅领悟到了一些，It would be great! 如果有些比较专业的地方不太懂建议先百度，B 站上找找相关教程，多听歌培养 Hip-pop 的 feel，本篇仅提供写词思路步骤，也欢迎评论留言。</p></blockquote><br><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><blockquote><p>写词前得了解一些基本知识</p></blockquote><h3 id="歌词的元素"><a href="#歌词的元素" class="headerlink" title="歌词的元素"></a>歌词的元素</h3><ol><li><strong>Rhyme</strong>：押韵。这是所有类型歌词的基本元素。</li><li><strong>Punchline</strong>：妙语、点睛之笔。能让歌词瞬间提高档次。表达通常比较隐晦，起到一语双关、讽刺、调侃的作用。一般好的 Punchline 能让听众半秒后眼前一亮，情不自禁的发出<del>woc</del>。</li><li><strong>Flow</strong>：语流。其实目前没有更好的中文翻译，它可描述为一个拍子里唱多少个音节、在哪里停顿、变什么腔调、在哪里突然加速减速、在哪里重读，综合这些组成的是一首歌曲的 flow。这主要体现在唱上面，写词的话可以同时考虑带上 flow 的设计。</li><li><strong>Rythme</strong>：节奏。这个主要是和一首歌的 beat 有关，beat 分很多种类型，比如 trap、old school、Reggae、funk、drill 等等，节奏型都不尽相同，写词的时候可以同时考虑歌词和基本节奏对应起来，重音放在哪里。</li><li><strong>Groove</strong>：律动感。这也是街舞里的元素，律动感和一首歌的 beat、flow 相关，让听众会不由自主较规律的扭动身体。</li><li><strong>Bar</strong>：小节。歌词的一小节，通常会有停顿，在这可以换气准备唱下一句。</li><li><strong>Break</strong>：停顿。唱歌时突然停顿，给听众来个措手不及，有时候 beat 也会配合停下来，过零点几秒后又开始继续（当然了，有时候 Rapper 根据 beat 而设计 break，有时候是 beat 配合歌词来编 break）。用的好的话，和 punchline 一样能使听众眼前一亮，情不自禁的发出<del>wow</del>。一般一首歌中用一两次即可。</li></ol><h3 id="歌曲的组成元素"><a href="#歌曲的组成元素" class="headerlink" title="歌曲的组成元素"></a>歌曲的组成元素</h3><ol><li><strong>Intro</strong>：前奏。为了引出歌曲后面的部分。</li><li><strong>Verse</strong>：主歌。表达 whatever you want 的部分。</li><li><strong>Pre-Hook</strong>：副歌预热。它又叫做 Pre-Chorus， Pre-Hook 出现在副歌的前面，它的作用就是为了引出副歌，为副歌预热。它很少出现在说唱作品里。一般在嘻哈音乐里面，Pre-Hook 通常是 1-2 个小节，虽然一般是几句重复的句子，但是简单洗脑，很容易就能吸引到听众。</li><li><strong>Hook</strong>：副歌。俗称一首歌的高潮部分，看过<em>新说唱</em>的观众应该知道紫琪很喜欢 cue 这个词，其实在其他类型歌曲中副歌叫 Chorus，你一般听到 Hook 这个概念，十有八九就是在谈嘻哈啦。有些 Rapper 可能乐理不太好（<del>低情商</del>）或者单纯的想表达（<del>高情商，开玩笑的</del>），Hook 部分可能是会以说唱的方式来唱，歌词比较精炼通俗易懂，通常是全曲中心思想，可能不会写的那么抽象化、艺术化。</li><li><strong>Bridge</strong>：桥段。verse 和 hook 之间衔接的部分。如果桥段部分的 beat 在 solo（可理解为编曲人想炫技），你可以不写词 hh，很适合你表演时在这趴加些街舞动作。</li><li><strong>Outro</strong>：结尾。一般歌曲到这里整首歌的声音、感情色彩逐渐淡出，意在让听众回味无穷。有些歌曲为了让观众单曲循环，它的结尾和前奏做得几乎一样，可前后无缝衔接。但多数歌曲结尾都是逐渐淡出或者戛然而止，给听众留下想象空间。</li></ol><h3 id="Bar-的组成数量"><a href="#Bar-的组成数量" class="headerlink" title="Bar 的组成数量"></a>Bar 的组成数量</h3><p>顺便补充，歌曲组成元素的单位是 <strong>Bar</strong>，下面介绍下在 <strong>Hiphop</strong> 类歌曲中通常的组成数量：</p><p><strong>Intro</strong>（通常是<strong>4, 8</strong>个 bars，少有的是 2, 12, 16 个 bars）</p><p><strong>Verse</strong>（通常是<strong>8, 16</strong> 个 bars，少有的是 10, 15 个 bars）</p><p><strong>Pre-Hook</strong>（通常是<strong>1, 2</strong>个 bars）</p><p><strong>Hook</strong>（通常是<strong>4, 8, 12, 16</strong>个 bars，少有的是 10, 15 个 bars）</p><p><strong>Bridge</strong>（通常是<strong>4, 8</strong>个 bars，少有的是 12 个 bars）</p><p><strong>Outro</strong>（通常是<strong>4, 8, 16</strong>个 bars，少有的是超过 16 个 bars）</p><h3 id="歌曲的组成结构"><a href="#歌曲的组成结构" class="headerlink" title="歌曲的组成结构"></a>歌曲的组成结构</h3><p>常见的有：</p><p><u>Intro(4 节) - Verse(16 节) - Hook(8 节) - Verse(16 节) - Hook (8 节) - Verse(16 节) - Hook(8 节) - Outro(4 节)</u></p><p>这样下来歌曲通常 3 - 4 分钟。</p><p>短一点的：</p><p><u>Intro(4 节) - Verse(16 节) - Hook(8 节) - Verse(16 节) - Hook (8 节) - Outro(4 节)</u></p><p>提前唱Hook的：</p><p><u>Intro(4 节) - Hook(8 节) - Verse(16 节) - Hook (8 节) - Verse(16 节) - Hook(8 节) - Outro(4 节)</u></p><p>还有：</p><p><u>Intro(4 节) - Verse(16 节) - Hook(8 节) - Bridge(8 节) - Verse(16 节) - Hook (8 节) - Hook (8 节) - Outro(4 节)</u> 等等，有很多种组合方式。</p><p>有些Rapper擅长写Hook，可能会在一首歌的后半段重复两次 Hook。有时，为了结尾升华或不让听众 get bored，后半段的 Hook 会<del>换汤不换药</del>，也就是 flow、旋律类似但歌词有所改变，有些 Rapper 可能会使重复那段的旋律更飘一些，当然基本和弦（可理解为旋律基调）肯定不会变，乐理好的 Rapper 可能还会设计一些和声，更有甚者设计像牛姐那样的疯狂转音 hh。欧美歌曲听的多的同学，可能会和我一样老惊讶为什么他们好端端的旋律不正儿八经去唱，时不时来个转音，高 3 度，低 3 度，摸不清它的 flow，一般简单的歌曲，他唱一两句我基本可以预测下一句是什么和弦走向，旋律走向，这种歌我几分钟可以学会大致怎么唱，但有些歌则是你根本无法猜透他下一秒的 flow、旋律、break，一般这种歌我称之为难唱，并非因为它语速快，音域超出我的能力范围，只是它的设计很丰富很亮眼（<del>高情商</del>），这样的音乐作品才能源远流长嘛，方能成为经典，不会像那种红极一时的口水歌。话说回来，后半部分重复的那段 Hook，很多歌曲还会采取升半个 key（调）的做法，使听众情绪进一步的升高，让听众<del>如听仙乐耳暂明</del> d😂b，汗毛直立，拍手称绝！</p><p>歌曲的组成结构非常之多，写词时可以参考一些常见的说唱作品，如果你是根据 beat 来写词，那么可参照 beat 的结构来设计它。</p><br><h2 id="写歌词的步骤-⭐"><a href="#写歌词的步骤-⭐" class="headerlink" title="写歌词的步骤 ⭐"></a>写歌词的步骤 ⭐</h2><blockquote><p>不同的音乐人有着不同的写词习惯，就和制作歌曲一样，有些人喜欢先写词再作曲，有些人则恰恰相反，更有人是同时进行。当然适合自己的方式才是最好的！这里介绍下写词步骤。</p></blockquote><ol><li><p>【雏形阶段】先写你任何想表达的话</p><ul><li><p>带有韵脚目的的写</p><p>先写一句歌词，再根据这一句的韵脚来造下一句，当然你也可以先写若干句歌词，再根据韵脚来修改歌词的表达，灵活使用即可。缺点是有时候为了凑韵脚，可能整句词不达意、显得突兀，不能凸显歌曲的中心思想，其实这就得靠你的写词功底（且不称文学功底吧，因为我认为作词也是一门别具一格的艺术，和文学创作有相同、不同之处，你写的歌词终究是为了歌曲而服务，它得和伴奏融为一体）。</p></li><li><p>用 Freestyle 来写词</p><p>你可以跟着伴奏 Freestyle，如果灵光乍现，可以立马记录下来，类似于头脑风暴，也可以以Freestyle的形式写个大框架出来，之后再来慢慢填词，丰富细节。若你暂时没有头绪，可以先放下，干其它事情找找灵感，毕竟灵感来源于生活，期间多听听其他 Rapper 的歌，留意一下 Ta 的歌词是如何写的。记住，写词切忌急于求成，否则很容易成口水词，不能源远流长，<del>不能经典咏流传</del>。</p></li></ul></li><li><p>【初稿阶段】对歌词增删改</p></li></ol><p>步骤 1 仅仅写了个雏形，接下来是跟着音乐伴奏来修改歌词，自己设计 Flow，然后根据 Flow 来对歌词增删改，写什么词、怎么样设计 Flow 才好听这些完全取决于你自己的审美和想法，若你没有思路头绪，可以借鉴优秀 Rapper 的音乐作品，但不要抄袭哦。</p><div class="note warning no-icon flat"><p>注意：这里针对于已经有伴奏的情况，若你是 Producer，Beat Maker，，，<del>那还能轮得到我来教你写词？😆</del></p></div><ol start="3"><li><p>【最终阶段】打磨歌词</p><p>纵观整篇歌词，检查有没有瑕疵，比如错别字、语病、中心思想的表达等问题，再跟着伴奏多来几遍，打磨最终作品。如果你是打算创作 Melodic Rap，其实创作过程基本一样，只不过你还得考虑旋律等因素，歌词唱起来是否贴合伴奏的和弦，还要设计和声。</p><br></li></ol><h2 id="雕虫小技"><a href="#雕虫小技" class="headerlink" title="雕虫小技"></a>雕虫小技</h2><ol><li><p>口水话可以用英文来代替，虽然这种方式会被人嗤之以鼻，但是市场上很多音乐就是这样，时不时加几句英文词，当然用英文代替部分词的歌曲不一定都很口水，有时是为了更好的押韵，或歌手可能英语很好，加几句没太大问题，可能讨厌英语的听众会感到不适。话说回来，虽说把那些零星的英语歌词翻译过来很口水、没多少内涵，但读起来却很有内味，当然最终还是取决于你自己对作品的要求和审美。</p></li><li><p>新手可以<strong>参考</strong>其他 Rapper 的 Flow 和歌词，但绝不能生搬硬套，得逐渐找到属于自己的风格，这样才算是学以致用。</p></li><li><p>Q：<strong>歌词有点强行押韵怎么办？</strong></p><p>A：我一般是先写一句词，再来结合这句的韵脚和中心思想来写下一句，当然这不能保证下一句一定贴合中心思想，除非写词功底很扎实。但我发现了一个比较好的办法，就是<strong>将尬的这一句和上一句换个位置</strong>。比如你已经写了一句歌词 A，通过 A 的韵脚写出了 B，从 A 到 B 唱起来可能有些拉胯，这时将 AB 互换位置可能会有突出、引出 A 的效果，能有效缓解强行押韵，光说比较枯燥，你得实践起来才能感受到，据我观察，很多 Rapper 会用到这种方式，在这也不举例，听他们歌的时候其实我知道Rapper想表达的重点是 A，但通常他们会写一些 B 来做铺垫、当绿叶。<u>简单总结，要么你写词功底好，要么 AB 句换位</u>。</p><br></li></ol><p style="color:red;text-size:24px !important;text-align:center;">未完待续。。。持续更改、更新！</p><br><p><strong>本文参考文章</strong>：</p><ul><li><p><a href="https://www.zhihu.com/question/36609060?sort=created">如何写好说唱歌词？</a></p></li><li><p><a href="https://www.xihachina.com/10026.html">一首歌的结构你都不懂，还好意思说自己喜欢说唱</a></p></li></ul><br><blockquote><p>有好的想法赶紧留言吧？想要音乐合作什么的快<del>找</del>带带我吧~</p></blockquote>]]></content>
    
    
    <summary type="html">图一乐，涨涨姿势</summary>
    
    
    
    <category term="💻实用教程" scheme="https://hassanwong.top/categories/%F0%9F%92%BB%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="🎵音乐" scheme="https://hassanwong.top/tags/%F0%9F%8E%B5%E9%9F%B3%E4%B9%90/"/>
    
    <category term="🎉娱乐" scheme="https://hassanwong.top/tags/%F0%9F%8E%89%E5%A8%B1%E4%B9%90/"/>
    
    <category term="🙉说唱" scheme="https://hassanwong.top/tags/%F0%9F%99%89%E8%AF%B4%E5%94%B1/"/>
    
  </entry>
  
  <entry>
    <title>Win10相关问题记录合集</title>
    <link href="https://hassanwong.top/posts/d9d0b5ee/"/>
    <id>https://hassanwong.top/posts/d9d0b5ee/</id>
    <published>2021-03-15T08:12:00.000Z</published>
    <updated>2021-05-08T12:14:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前言</strong>：</p><p>记录了从博主 18 年买笔记本以来，在使用过程中遇到各式各样问题的解决方案，目的是防止重复在网上找教程，方便集中查阅。若能帮到大家，It would be great!</p></blockquote><h2 id="常用快捷键"><a href="#常用快捷键" class="headerlink" title="常用快捷键"></a>常用快捷键</h2><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td><code>Ctrl + C</code></td><td>复制</td></tr><tr><td><code>Ctrl + V</code></td><td>粘贴</td></tr><tr><td><code>Ctrl + X</code></td><td>剪切</td></tr><tr><td><code>Ctrl + W</code></td><td>关闭当前页面<br>（浏览器单个页面、文件夹等等）</td></tr><tr><td><code>Alt + F4</code></td><td>关闭当前<strong>所有</strong>页面<br>（如果是浏览器，则关闭所有打开页面）</td></tr><tr><td><code>Win + I</code></td><td>打开Windows设置</td></tr><tr><td><code>Win + P</code></td><td>打开Windows投影</td></tr><tr><td><code>Win + E</code></td><td>打开我的电脑</td></tr><tr><td><code>Win + R</code></td><td>打开命令行</td></tr><tr><td><code>右键 + Shift + D</code></td><td>彻底删除文件，不会放在回收站</td></tr></tbody></table><h3 id="浏览器"><a href="#浏览器" class="headerlink" title="浏览器"></a>浏览器</h3><table><thead><tr><th>快捷键</th><th>功能</th></tr></thead><tbody><tr><td><code>F11</code></td><td>网页全屏显示<br>一些笔记本需额外再按<code>Fn</code></td></tr><tr><td><code>F12</code></td><td>打开谷歌浏览器调试模式</td></tr><tr><td><code>Ctrl + Shift + B</code></td><td>谷歌浏览器显示/隐藏书签栏</td></tr><tr><td><code>Ctrl + P</code></td><td>谷歌浏览器中截取网页</td></tr><tr><td><code>Ctrl + G</code> / <code>Ctrl + F</code></td><td>搜索页面中文字</td></tr></tbody></table><h2 id="百度网盘限速解决方案"><a href="#百度网盘限速解决方案" class="headerlink" title="百度网盘限速解决方案"></a>百度网盘限速解决方案</h2><blockquote><p>网上提速方法五花八门非常之多，这里只介绍我用过的方法。当然有更好的方法欢迎评论！</p></blockquote><p>方法 1：开启下载提速</p><p>依次点击右上角<code>设置</code>👉 左栏<code>传输</code>👉 右侧<code>下载速度</code>即可。官方说明速度是平均用户的 3.2 倍，而我这是差不多提速了 10 倍，原先是 100kbps 左右，现在 1Mbps 左右。</p><p>方法 2：使用 KinhDown 软件</p><p>优点：下载速度很快，最快几 M 每秒，可以自动读取你剪切板里的链接和密码。<br>缺点：最后只能一个一个文件的下载，不能包含整个文件目录逻辑，而且下载时容易下载失败，但是失败了可关闭再重启软件继续下载就好了，这样多反复横跳，如果你网好，失败的情况就相对少，或者没有，可以试试。</p><p>方法 3：手机百度网盘</p><ol><li>用手机 百度网盘 来下载！</li><li>再导入电脑</li></ol><p>我的电脑下载速度平均 100Kb/s 左右，但用手机下载平均 1.0Mb/s 左右</p><div class="note warning no-icon flat"><p>注意：<br>经我多次测试，结果发现下载<strong>几个 G 的视频</strong>很快，但下载<strong>exe 软件</strong>很慢（基本原来速度），当然这不能保证所有人都有效，但可以当作你白嫖的 <u>Last choice</u>，但还是墙裂建议试试！</p></div><p>方法 4：买会员</p><p>自己买会员 👍，<del>想白嫖不可能</del>。</p><br><h2 id="电脑待机时间过长自动关机怎么办？"><a href="#电脑待机时间过长自动关机怎么办？" class="headerlink" title="电脑待机时间过长自动关机怎么办？"></a>电脑待机时间过长自动关机怎么办？</h2><p>步骤：</p><ol><li>我的电脑 -&gt; 右键属性</li><li>设备管理器 -&gt; 系统设备 -&gt; 找到一个 Intel(R) Management Engine Interface 的驱动</li><li>在“电源管理”中禁用“允许关闭此设备以节约电源”。轻松解决</li></ol><p>参考链接：<a href="https://jingyan.baidu.com/article/6fb756ec7d1432241958fb4c.html">https://jingyan.baidu.com/article/6fb756ec7d1432241958fb4c.html</a></p><br><h2 id="增强电脑视觉流畅丝滑感"><a href="#增强电脑视觉流畅丝滑感" class="headerlink" title="增强电脑视觉流畅丝滑感"></a>增强电脑视觉流畅丝滑感</h2><p>步骤：</p><ol><li>右键我的电脑</li><li>点开属性</li><li>点击左边的 高级系统设置</li><li>高级 -&gt; 性能 -&gt; 设置</li><li>根据喜好来设置</li></ol><blockquote><p>如果电脑配置不高，日常运行非常卡顿，不建议使用该 Windows 自带功能，会影响性能。</p></blockquote><br><h2 id="修改文件的创建时间、修改时间"><a href="#修改文件的创建时间、修改时间" class="headerlink" title="修改文件的创建时间、修改时间"></a>修改文件的创建时间、修改时间</h2><blockquote><p>至于为什么要修改文件时间，<del>各取所需，懂的都懂</del></p></blockquote><p><u>直接改系统时间，再来改文件时间</u>。</p><p>步骤：</p><ol><li>按<code>Win</code>或<code>Win + I</code>，输入<code>更改日期和时间</code></li><li>关闭<code>自动设置时间按钮</code></li><li>点击<code>手动设置日期和时间</code>下的<code>更改</code>按钮，选择你想改的时间</li><li>接下来直接创建或修改文件即可，它都会显示你改后的时间，即使调回正常时间，文件创建修改时间也不变，除非你在当前时间又修改了文件</li><li>想调回正常时间，再次点<code>更改</code>按钮即可</li></ol><br><h2 id="定时关机设置"><a href="#定时关机设置" class="headerlink" title="定时关机设置"></a>定时关机设置</h2><blockquote><p>使用背景：有时候小神兽们玩你电脑时，你可以设置定时关机，<del>从小养成守时的好习惯</del>。当然，有时候你要下载文件或者运行代码时，可能需要这样一个定时关机操作。</p></blockquote><ol><li><p>按【win + R】</p></li><li><p>在弹出的窗口中输入：</p><table><thead><tr><th>按照（单位）</th><th>伪命令</th><th>例子</th></tr></thead><tbody><tr><td>秒</td><td>shutdown -s -t [秒数]</td><td>shutdown -s -t 3600</td></tr><tr><td>时:分</td><td>at [时:分] shutdown -s</td><td>at 23:10 shutdown -s</td></tr></tbody></table></li><li><p>若突然想取消，则在窗口中输入<code>shutdown -a</code></p></li></ol><br><h2 id="安装电脑驱动程序正确姿势"><a href="#安装电脑驱动程序正确姿势" class="headerlink" title="安装电脑驱动程序正确姿势"></a>安装电脑驱动程序正确姿势</h2><p>问题：官网下载的驱动程序安装不了<br>原因：由于当前系统下存于老版本的驱动导致的报错，在设备管理器卸载删除旧版本驱动问题解决<br>步骤：</p><ol><li><p>首先右键点击“开始”菜单选择“设备管理器”</p></li><li><p>展开“显示适配器”</p></li><li><p>找到集成显卡右键卸载设备，勾选删除此设备的驱动程序软件点击“卸载”</p></li><li><p>勾上“删除此设备的驱动程序软件”</p></li><li><p>卸载设备后点击“扫描硬件改动”（上框最右边蓝色 ICON），看集成显卡是否显示为 Microsoft 基本显示适配器，如依旧是显示显卡型号重复三步骤后继续扫描硬件改动直至集成显卡变为 Microsoft 基本显示适配器。</p></li><li><p>然后直接双击下载好的驱动程序安装即可，注意软件启动较慢耐心等待</p></li></ol><p>参考教程：<a href="https://www.kkpan.com/article/3074.html">https://www.kkpan.com/article/3074.html</a></p><br><h2 id="报错“操作无法完成因为文件在-system-打开”"><a href="#报错“操作无法完成因为文件在-system-打开”" class="headerlink" title="报错“操作无法完成因为文件在 system 打开”"></a>报错“操作无法完成因为文件在 system 打开”</h2><p>步骤：</p><ol><li><p>打开任务管理器</p></li><li><p>在“性能”这一栏中打开“资源监视器”</p></li><li><p>在“CPU”这一栏中的“关联的句柄”去搜索你想删除的文件名，以此来搜索与它关联的进程</p></li><li><p>框选所有相关进程，右键结束所有进程</p></li><li><p>最后删除你想删除的文件</p></li></ol><p>参考教程：<a href="https://jingyan.baidu.com/article/8cdccae9bc8b65705413cdb2.html">https://jingyan.baidu.com/article/8cdccae9bc8b65705413cdb2.html</a></p><br><h2 id="端口被占用解决办法"><a href="#端口被占用解决办法" class="headerlink" title="端口被占用解决办法"></a>端口被占用解决办法</h2><p>报错内容：<code>The Tomcat connector configured to listen on port 8080 failed to start</code><br>原因: 8080 端口被占用了<br>解决:</p><ol><li>用管理员身份打开 cmd 命令窗口，输入如下指令查看所有端口和 PID<br><code>netstat -ano</code></li><li>找到对应的端口对应的 PID，输入指令找到对应的进程<br><code>tasklist | findstr &quot;[PID]&quot;</code></li><li>杀掉该进程，再次启动就 OK 啦<br>taskkill /f /t /im “[FileName]”</li></ol><div class="note warning no-icon flat"><p>注意：文件名记得加后缀，最好直接复制过来</p></div><p>参考链接：<a href="https://blog.csdn.net/q343509740/article/details/80821409">https://blog.csdn.net/q343509740/article/details/80821409</a></p><br><h2 id="以管理员身份运行-cmd"><a href="#以管理员身份运行-cmd" class="headerlink" title="以管理员身份运行 cmd"></a>以管理员身份运行 cmd</h2><p>步骤：</p><ol><li><p>按 WIN + R</p></li><li><p>输入 cmd</p></li><li><p>按 Ctrl + Shift + Enter</p></li></ol><p>如果直接 Enter 则是普通身份进入命令提示符</p><br><h2 id="手机数据备份失败怎么办"><a href="#手机数据备份失败怎么办" class="headerlink" title="手机数据备份失败怎么办"></a>手机数据备份失败怎么办</h2><p><strong>案发背景</strong>：我手机牌子型号是<strong>华为荣耀 Play</strong>，用了一年半后，手机内存近乎爆满，APP 实在是运行不畅，于是我又在网上找到了个非常 practicable 的方案：<u>先备份数据，再恢复出厂设置，最后再恢复数据</u>。这样手机里只有重要文件，其余不重要的已经全删了，备份数据的时候认真做取舍即可。</p><p><strong>失败原因及方法</strong>：其实是手机内部储存空间不足的问题，经过一番百度，我们大概可知道，它原理是手机备份时，它得先拷贝完整的一份，再将那一份导出到电脑上，而拷贝的那一份是占空间的，手机本来空间就不足，所以也就是选择时注意下所选文件大小，不能超过内存余量！所以你要减少勾选的数量，多备份几次即可解决。原理大概是这样，效果亲测有效。</p><div class="note warning no-icon flat"><p>注意：</p><ol><li>手机要预留一定内存，否则数据大于预留内存就传输不了，并且又要等半天刷新才能到备份文件选择的页面。</li><li>手机要留在华为手机助手页面，请勿离开，屏幕保持常亮。</li></ol></div><p>参考教程：<a href="https://cn.club.vmall.com/thread-17485723-1-1.html">https://cn.club.vmall.com/thread-17485723-1-1.html</a></p><br><h2 id="命令行-CMD-下载插件速度慢"><a href="#命令行-CMD-下载插件速度慢" class="headerlink" title="命令行 CMD 下载插件速度慢"></a>命令行 CMD 下载插件速度慢</h2><p>要引入镜像网站</p><p>步骤：</p><ol><li><p>在 C:\Users\&lt;UserName&gt;目录下创建文件夹，名为 pip</p></li><li><p>新建 pip.ini 配置文件</p></li><li><p>写入如下代码：</p></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line">index-url = https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><ol start="4"><li>完毕，下载插件速度嗷嗷快！</li></ol><p>tips：镜像网站可以更换的，在下方链接里找</p><p>参考网站：<a href="https://blog.csdn.net/u012798683/article/details/92763162">https://blog.csdn.net/u012798683/article/details/92763162</a></p><br><h2 id="无法修改-hosts-文件"><a href="#无法修改-hosts-文件" class="headerlink" title="无法修改 hosts 文件"></a>无法修改 hosts 文件</h2><ol><li><p>右键文件点击属性</p></li><li><p>常规-&gt;属性-&gt;只读，直接取消“只读”勾选即可修改</p></li></ol><br><h2 id="增强-Win10-文件搜索功能"><a href="#增强-Win10-文件搜索功能" class="headerlink" title="增强 Win10 文件搜索功能"></a>增强 Win10 文件搜索功能</h2><p>步骤：</p><ol><li>点击 开始菜单-【设置】</li><li>点击 搜索</li><li>选择左侧的 搜索 windows</li><li>从经典和增强中选择 增强</li><li>在下方找到并点击 高级搜索索引器设置</li><li>点击 修改（M）</li><li>勾选你想搜索的磁盘，并点击 确定（我建议勾选全部，如果因此影响了搜索速度，那么则选择你经常用于搜索的磁盘）</li><li>等待<strong>索引状态</strong>完成之后，即可开始搜索！</li><li>第一次搜索必须将电脑接上电源</li></ol><br><h2 id="bat-脚本执行显示中文乱码的问题"><a href="#bat-脚本执行显示中文乱码的问题" class="headerlink" title="bat 脚本执行显示中文乱码的问题"></a>bat 脚本执行显示中文乱码的问题</h2><p><strong>方法 1：</strong></p><p>使用 Windows 自带记事本编辑，然后另存的时候，可选择<code>ANSI</code>编码方式即可。</p><p><strong>方法 2：</strong></p><p>在代码里修改执行时的编码格式<br>测试文件如下（可运行的看下效果）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line">REM 后续命令使用的是：UTF-8编码</span><br><span class="line">chcp 65001</span><br><span class="line"><span class="built_in">echo</span> 中文测试</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><p>所以就是在代码中加 chcp 65001 即可</p><blockquote><p>小知识了解一下：<br>doc 代码页(自行百度):<br>chcp 65001 就是换成 UTF-8 代码页<br>chcp 936 可以换回默认的 GBK<br>chcp 437 是美国英语</p><p>cmd 脚本文件的描述是 “windows nt 命令脚本” （年轻人，本事儿多）<br>bat 脚本文件的描述是 “ms dos 批处理文件” （上年纪的，办事牢靠）</p></blockquote><p>参考链接：<a href="https://blog.csdn.net/u013948858/article/details/81036079">https://blog.csdn.net/u013948858/article/details/81036079</a></p><br><h2 id="Dll-文件删除方法"><a href="#Dll-文件删除方法" class="headerlink" title="Dll 文件删除方法"></a>Dll 文件删除方法</h2><ol><li>首先，在“开始”中的搜索文本框中输入“regedit”。</li><li>点击“regedit.exe”打开注册表编辑器。</li><li>在窗口左侧依次展开，<code>HEKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Explorer</code>。</li><li>在左边的窗口的空白处右击，选择“新建”目录下的“字符串值”。</li><li>之后左侧窗口会出现一个”新值#1“，右击进行重命名，新建的字符串值名称为“AlwaysUnloaDll“；双击进行值修改，字符串的值设置为”1“。</li><li>完成以上步骤后需要重启电脑才能使设置有效。之后关闭程序后，内存中与之相关的 DLL 文件就会随之关闭，这样就可以删除它们了。</li></ol><br><h2 id="Office-文件修复不了解决方案"><a href="#Office-文件修复不了解决方案" class="headerlink" title="Office 文件修复不了解决方案"></a>Office 文件修复不了解决方案</h2><p>我在网上搜索了很多方法，对我来说没有半点用，大概分为两种：</p><ol><li><p>将受保护的视图的权限全部勾掉</p></li><li><p>右键文件属性取消阻止/解除锁定，第一种方法没有用，第二种，我右键根本没有选项。之所会 office 文件修复不了，是因为很大可能对方传给你的文件是用 WPS 编辑的，两者不兼容</p></li></ol><p>解决办法：<br>在 office 文件内点击另存为，然后打开另存为后的文件，即为正常打开。</p><br><h2 id="ini-配置文件无权修改解决方案"><a href="#ini-配置文件无权修改解决方案" class="headerlink" title=".ini 配置文件无权修改解决方案"></a>.ini 配置文件无权修改解决方案</h2><p>步骤：</p><ol><li>右键文件，点击属性</li><li>属性 - 安全 - 编辑(E)</li><li>点击 Users（登录系统的用户），并且在权限框中勾选“修改”，后点确定</li></ol><p>参考教程：<a href="https://www.cnblogs.com/dreamsqin/p/6606211.html">https://www.cnblogs.com/dreamsqin/p/6606211.html</a></p><br><blockquote><p><strong>结束语</strong>：</p><p>若是有疑问或建议或教程链接失效恳请留言噢！</p></blockquote>]]></content>
    
    
    <summary type="html">记录了从博主18年买笔记本以来，使用过程中遇到五花八门问题的解决方案</summary>
    
    
    
    <category term="🤗干货分享" scheme="https://hassanwong.top/categories/%F0%9F%A4%97%E5%B9%B2%E8%B4%A7%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="👓Win10" scheme="https://hassanwong.top/tags/%F0%9F%91%93Win10/"/>
    
  </entry>
  
  <entry>
    <title>微型计算机笔记</title>
    <link href="https://hassanwong.top/posts/2b0afdc8/"/>
    <id>https://hassanwong.top/posts/2b0afdc8/</id>
    <published>2021-03-14T13:09:00.000Z</published>
    <updated>2021-03-29T10:39:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>文档版链接</strong>：</p><div class="gallery-group-main">  <figure class="gallery-group">  <img class="gallery-group-img" src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src='https://cdn.jsdelivr.net/gh/hassanblog/CDN/img/cover_computer.png' alt="Group Image Gallery">  <figcaption>  <div class="gallery-group-name">微型计算机笔记</div>  <p>风格简约，体验流畅，方便检索定位</p>  <a href='https://doc.hassanwong.top/#/Notes/Microcomputer_Note/C1'></a>  </figcaption>  </figure>  </div><h1 id="第一章-微型计算机概论"><a href="#第一章-微型计算机概论" class="headerlink" title="第一章 微型计算机概论"></a>第一章 微型计算机概论</h1><p>微型计算机遵循了冯·诺依曼的设计思想，计算机有五大部件组成：运算器、控制器、内存储器、输入设备、输出设备。</p><h2 id="微型计算机简介"><a href="#微型计算机简介" class="headerlink" title="微型计算机简介"></a>微型计算机简介</h2><h3 id="易混淆概念"><a href="#易混淆概念" class="headerlink" title="易混淆概念"></a>易混淆概念</h3><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210314201512087.png" alt=""></p><h3 id="微机分类方法"><a href="#微机分类方法" class="headerlink" title="微机分类方法"></a>微机分类方法</h3><ol><li><p>按<strong>字长</strong>分类：</p><p>即按照微处理器单次处理的数据长度为分类标准，可分为 4 位，8 位，16 位，32 位，64 位微处理器</p></li><li><p>按<strong>系统规模</strong>分类：</p><p>单片机，单板机，个人计算机。</p></li></ol><br><h2 id="微型计算机组成"><a href="#微型计算机组成" class="headerlink" title="微型计算机组成"></a>微型计算机组成</h2><p><strong>一、计算机的五大部分：</strong></p><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210314201522038.png" alt=""></p><p><strong>二、微机的三总线结构</strong></p><p>总线按照功能不同一般分为三类：</p><ol><li>数据总线（DB，Data Bus）</li><li>地址总线（AB，Address Bus）</li><li>控制总线（CB，Control Bus）</li></ol><br><h2 id="微型计算机工作原理"><a href="#微型计算机工作原理" class="headerlink" title="微型计算机工作原理"></a>微型计算机工作原理</h2><p>微处理器对指令的执行大致可分为三个步骤：</p><p><strong>取指令</strong>：微处理器从存储器中将指令读取到微处理器内部，读取指令首先要确定指令所在的地址，这个地址由微处理器内部的指令指针寄存器存放。</p><p><strong>分析指令</strong>：也称为<strong>指令译码</strong>，微处理器通过分析读取的指令了解指令的功能和操作对象等，从而为下一步执行做好准备。</p><p><strong>执行指令</strong>：根据指令分析的结果，微处理器发出一系列控制信号，指挥各部件完成该指令的功能，这样一条指令的执行就结束了。接着微处理器读取下一条指令进入下一个指令周期。</p><br><h2 id="计算机运算基础-⭐😱"><a href="#计算机运算基础-⭐😱" class="headerlink" title="计算机运算基础 ⭐😱"></a>计算机运算基础 ⭐😱</h2><h3 id="数的位置表示法"><a href="#数的位置表示法" class="headerlink" title="数的位置表示法"></a>数的位置表示法</h3><table><thead><tr><th>数制</th><th>基数</th><th>数码</th></tr></thead><tbody><tr><td>二进制 Binary(B)</td><td>2</td><td>0,1</td></tr><tr><td>八进制 Octal (O)</td><td>8</td><td>0,1,2,3,4,5,6,7</td></tr><tr><td>十进制 Decimal (D)</td><td>10</td><td>0,1,2,3,4,5,6,7,8,9</td></tr><tr><td>十六进制 Hexadecimal(H)</td><td>16</td><td>0,1,2,3,4,5,6,7,8,9,A,B,C,D,E,F</td></tr></tbody></table><h3 id="数制之间的转换"><a href="#数制之间的转换" class="headerlink" title="数制之间的转换"></a>数制之间的转换</h3><ul><li><p>二进制 → 十进制</p><p>按权展开求和</p></li><li><p>十进制 → 二进制</p><p>短除法、凑幂法</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210314201541389.png" alt=""></p><ul><li><p>二进制 → 十六进制</p><p>规则：以小数点为界每四位二进制数为一组，转换成对应的十六进制符号</p></li></ul><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210314201553542.png" alt=""></p><ul><li><p>十六进制 → 二进制</p><p>规则：（同上逆反过程）</p></li></ul><h3 id="计算机中多字节数据的存储"><a href="#计算机中多字节数据的存储" class="headerlink" title="计算机中多字节数据的存储"></a>计算机中多字节数据的存储</h3><p>多字节数据有两种存储方式：</p><ol><li><strong>大端存储法</strong>：高字节放低地址，反之</li><li><strong>小端存储法</strong>：高字节放高地址，反之（高高低低）</li></ol><h3 id="算术运算的基本规则"><a href="#算术运算的基本规则" class="headerlink" title="算术运算的基本规则"></a>算术运算的基本规则</h3><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210314201608840.png" alt=""></p><h3 id="逻辑运算的基本规则"><a href="#逻辑运算的基本规则" class="headerlink" title="逻辑运算的基本规则"></a>逻辑运算的基本规则</h3><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210314201616853.png" alt=""></p><h3 id="有符号数表示"><a href="#有符号数表示" class="headerlink" title="有符号数表示"></a>有符号数表示</h3><p>有符号数在计算机中表示时，除了数值外，还有相应的正负号，通常正负号以<strong>二进制数据最高位</strong>来表示。</p><p>不同计算机处理能力和表示范围有所不同，表示一个数据所使用的二进制位数也不相同，通常是字节的整数倍，如：8 位、16 位、32 位等。</p><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210314201635799.png" alt=""></p><h4 id="常用表示法："><a href="#常用表示法：" class="headerlink" title="常用表示法："></a>常用表示法：</h4><p><strong>原码</strong>表示法：符号+绝对值</p><p>例：n = 8bit</p><p>[+3]<del>原码</del> = 0000,0011 = 03H</p><p>[-3]<del>原码</del> = 1000,0011 = 83H</p><p>[+0]<del>原码</del> = 0000,0000 = 00H</p><p>[-0]<del>原码</del> = 1000,0000 = 80H</p><div class="note warning no-icon flat"><p>注意：0 的表示不唯一</p></div><p><strong>反码</strong>表示法：正数的反码同原码，负数的反码数值位与原码对应数值位取反</p><p>例：n=8bit</p><p>[+5]<del>反码</del> = 0 000,0101 = 05H</p><p>[-5]<del>反码</del> = 1 111,1010 = FAH</p><p>[+0]<del>反码</del> = 0 000,0000 = 00H</p><p>[-0]<del>反码</del> = 1 111,1111 = FFH</p><div class="note warning no-icon flat"><p>注意：0 的表示不唯一</p></div><p><strong>补码</strong>表示法：</p><ol><li><p>正数的补码：同原码</p></li><li><p>负数的补码：</p><p>（1）写出与该负数相对应正数的补码</p><p>（2）按位求反</p><p>（3）末位加一</p></li></ol><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210314201646824.png" alt=""></p><blockquote><p>n 位补码的表数范围： - 2^(n-1) &lt;= N &lt;= 2^(n-1)-1</p></blockquote><h3 id="有符号数的加减运算"><a href="#有符号数的加减运算" class="headerlink" title="有符号数的加减运算"></a>有符号数的加减运算</h3><p>计算机中数据的加／减运算，通常以补码方式进行：</p><p><strong>加法</strong>规则：[X+Y]<del>补码</del> = [X]<del>补码</del> + [Y]<del>补码</del></p><p><strong>减法</strong>规则：[X-Y]<del>补码</del> = [X]<del>补码</del> + [-Y]<del>补码</del></p><p>补码进行减法运算可转换为对应的加法运算，计算中符号位参与运算，并能得到正确结果。</p><p><br><br></p><h1 id="第二章-微处理器系统结构"><a href="#第二章-微处理器系统结构" class="headerlink" title="第二章 微处理器系统结构"></a>第二章 微处理器系统结构</h1><h2 id="微处理器基本功能及主要性能指标"><a href="#微处理器基本功能及主要性能指标" class="headerlink" title="微处理器基本功能及主要性能指标"></a>微处理器基本功能及主要性能指标</h2><h3 id="微处理器的基本功能"><a href="#微处理器的基本功能" class="headerlink" title="微处理器的基本功能"></a>微处理器的基本功能</h3><p>微处理器是微型计算机的核心部件，也称中央处理单元，就是<strong>CPU</strong>（Central Processing Unit）。它负责微型计算机中各部件的协调，完成指令的执行和数据处理工作。</p><p>其主要功能包括：</p><ul><li><p><strong>指令控制</strong>：指令执行顺序</p></li><li><p><strong>操作控制</strong>：各部件功能协调</p></li><li><p><strong>时间控制</strong>：各信号时序</p></li><li><p><strong>数据加工</strong>：算术/逻辑运算</p></li></ul><h3 id="微处理器的基本结构"><a href="#微处理器的基本结构" class="headerlink" title="微处理器的基本结构"></a>微处理器的基本结构</h3><p><strong>控制器</strong> <strong>CU</strong>（Control Unit）：计算机的指挥控制中心，负责按照一定顺序自动读取程序中的指令，将指令译码后产生相应控制信号，控制各部件协同工作。</p><p><strong>运算器</strong> <strong>ALU</strong>（Arithmetic Logic Unit）：计算机的核心功能部件，主要负责算术、逻辑运算等数据加工功能。</p><p><strong>寄存器组</strong> <strong>RS</strong>（Register Set）：是 CPU 中暂存数据和指令的逻辑部件，用于临时存放数据或地址。</p><blockquote><p>除此以外，微处理器常常还包括一定的高速缓存部件。</p></blockquote><h3 id="微处理器的主要性能指标"><a href="#微处理器的主要性能指标" class="headerlink" title="微处理器的主要性能指标"></a>微处理器的主要性能指标</h3><p><strong>工作频率</strong>：包括主频、外频、倍频。主频是微处理器的工作频率，反映微处理器工作节奏的快慢；外频是指系统总线的工作频率，它反映外部设备的工作速度；倍频是指微处理器工作频率对系统总线工作频率的倍数。</p><blockquote><p>三者之间的关系可以表示为：<strong>主频 = 外频 × 倍频</strong></p></blockquote><p><strong>处理器字长</strong>：反映微处理器单次数据处理能力，字长越长表示单次处理数据能力越强。</p><p><strong>前端总线速度</strong>：前端总线指主板芯片组中的北桥芯片与 CPU 之间传输数据的通道，因此也称为 CPU 的外部总线。 它反映 CPU 与内存和显示部件之间交换数据的能力，前端总线速度越快，CPU 与外界交换信息的能力越好，有利于提高整体处理速度。</p><p><strong>地址总线宽度</strong>：描述微处理器可以访问物理存储空间的重要指标。微处理器通过地址总线表达其访问数据所在的地址，地址总线越多则表示该微处理器可以给出的物理地址数越多，可以连接的物理内存就越大。</p><p><strong>数据总线宽度</strong>：描述微处理器与外界交换数据能力的一个重要指标。微处理器每一根数据线表示一个比特数据，数据线越多则表示每一次与外界交换的数据位数就越多，相对交换速度就越快。</p><p><strong>高速缓冲容量和级数</strong>：高速缓存（Cache）是设置在微处理器内部的一种存储器。由于其存取速度要比内存高一个数量级，可以达到与微处理器部件同频的工作速度，因此利用高速缓存可以提高处理器的工作效率。Cache 根据速度和位置不同可分两级或三级。</p><p><strong>生产工艺</strong>：不同的生产工艺对 CPU 的功耗和工作频率有较大影响，生产工艺越先进 CPU 功耗越低，工作频率越高。</p><p><strong>其它性能指标</strong>：包括特殊指令扩展、超线程、流水线、乱序执行、动态执行，以及新一代 CPU 的双核、多核技术等体系结构方面的技术。而且体系结构对现代微处理器性能的影响已经超过制造工艺对计算机性能的影响，成为现代微处理器设计的重要技术指标。</p><br><h2 id="Intel-8086-微处理器-⭐😱"><a href="#Intel-8086-微处理器-⭐😱" class="headerlink" title="Intel 8086 微处理器 ⭐😱"></a>Intel 8086 微处理器 ⭐😱</h2><h3 id="Intel-8086-的功能结构-⭐"><a href="#Intel-8086-的功能结构-⭐" class="headerlink" title="Intel 8086 的功能结构 ⭐"></a>Intel 8086 的功能结构 ⭐</h3><ul><li>16 位处理器、40 脚的 DIP（双列直插）封装。</li><li>时钟频率：5、8 和 10MHz。</li><li>20 条地址线，有 2^20=1024KB=1MB 寻址能力。</li></ul><h4 id="Intel-8086-的内部组成结构"><a href="#Intel-8086-的内部组成结构" class="headerlink" title="Intel 8086 的内部组成结构"></a>Intel 8086 的内部组成结构</h4><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210314201708363.png" alt=""></p><table><thead><tr><th>Intel 8086 的内部组成结构</th><th>组成</th><th>功能</th></tr></thead><tbody><tr><td><strong>总线接口部件 BIU</strong>（Bus Interface Unit）</td><td>1. <strong>段寄存器</strong> Segment Register（CS、DS、ES、SS）<br>2. <strong>指令指针</strong> Instruction pointer（IP）<br>3. <strong>地址加法器、总线控制</strong><br>4. <strong>指令队列</strong></td><td>1. 外部总线连接，完成 EU 所需的总线操作，计算形成 20 位的物理地址。<br/>2. 从内存储器中取出指令送指令队列排队。<br/>3. 按 EU 的要求读写内存、I/O 中的操作数。</td></tr><tr><td><strong>执行部件 EU</strong>（Execution Unit）</td><td>1. <strong>通用寄存器</strong><br/>2. <strong>标志寄存器</strong><br/>3. <strong>ALU</strong><br/>4. <strong>EU 控制</strong></td><td>1. 从指令队列获得指令，译码、执行指令操作。<br/>2. 译码指令、执行算术运算、逻辑运算。<br/>3. 向 BIU 提供操作数的内存或 I／O 端口的地址。<br/>4. 管理标志寄存器和指令操作数。</td></tr></tbody></table><h4 id="Intel-8086-内部寄存器"><a href="#Intel-8086-内部寄存器" class="headerlink" title="Intel 8086 内部寄存器"></a>Intel 8086 内部寄存器</h4><h5 id="8-个通用寄存器："><a href="#8-个通用寄存器：" class="headerlink" title="8 个通用寄存器："></a>8 个通用寄存器：</h5><ul><li><p>8086 的 16 位通用寄存器是：</p><p>AX、BX、CX、DX</p><p>SI、DI、BP、SP</p><p>其中前 4 个数据寄存器都还可以分成高 8 位和低 8 位两个独立的寄存器</p></li><li><p>8086 的 8 位通用寄存器是：</p><p>AH、BH、CH、DH</p><p>AL、BL、CL、DL</p><p>对其中某 8 位的操作，并不影响另外对应 8 位的数据</p></li></ul><h5 id="4-个段寄存器"><a href="#4-个段寄存器" class="headerlink" title="4 个段寄存器"></a>4 个段寄存器</h5><p>DS 数据段寄存器 (Data Segment)</p><p>CS 代码段寄存器 (Code Segment)</p><p>ES 附加段寄存器 (Extra Segment)</p><p>SS 堆栈段寄存器 (Stack Segment)</p><p>这些段寄存器的内容与有效的地址一起，用于确定内存的物理地址。通常用 CS、DS、ES 以及 SS 用于确定数据段、代码段、附加段以及堆栈段的<strong>基地址</strong>。</p><h5 id="1-个指令指针寄存器"><a href="#1-个指令指针寄存器" class="headerlink" title="1 个指令指针寄存器"></a>1 个指令指针寄存器</h5><ul><li><p>指令指针寄存器<strong>IP</strong>，指示代码段中指令的<strong>偏移地址</strong></p></li><li><p>它与<strong>代码段寄存器 CS</strong>联用，确定<strong>下一条指令的物理地址</strong></p></li><li><p>计算机通过 <strong>CS : IP</strong> 寄存器来<strong>控制指令序列的执行流程</strong></p></li><li><p>IP 寄存器是一个专用寄存器</p></li></ul><h5 id="1-个标志寄存器"><a href="#1-个标志寄存器" class="headerlink" title="1 个标志寄存器"></a>1 个标志寄存器</h5><ul><li>标志（Flag）用于反映<strong>指令执行结果</strong>或<strong>控制指令执行形式</strong></li><li>8086 处理器的各种标志形成了一个 16 位的标志寄存器 FLAGS（程序状态字 PSW 寄存器）</li></ul><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210323171354067.png" alt="8086 微处理器内部寄存器" style="zoom: 67%;" /><div class="note warning no-icon flat"><p>熟记并能背下来（老师要求）</p></div><h6 id="标志的分类"><a href="#标志的分类" class="headerlink" title="标志的分类"></a>标志的分类</h6><ul><li><p><strong>状态标志</strong>：用来记录程序运行结果的状态信息，许多指令的执行都将相应地设置它</p><p>CF、ZF、SF、PF、OF、AF</p></li><li><p><strong>控制标志</strong>：可由程序根据需要用指令设置，用于控制处理器执行指令的方式</p><p>DF、IF、TF</p></li></ul><table><thead><tr><th>状态标志</th><th>含义</th><th>判断</th></tr></thead><tbody><tr><td><strong>进位标志 CF</strong><br/>（Carry Flag）</td><td>当运算结果的最高有效位有进位（加法）或借位（减法）时，进位标志置 1，即 CF = 1；否则 CF = 0。</td><td>49H+6DH=B6H（无进位：CF=0）<br>BBH+6AH=（1）25H（有进位：CF=1）</td></tr><tr><td><strong>零标志 ZF</strong><br/>（Zero Flag）</td><td>若运算结果为 0，则 ZF = 1；否则 ZF = 0；</td><td>49H+6DH=B6H（结果不是零：ZF=0）<br>75H+8BH=（1）00H（结果是零：ZF=1）</td></tr><tr><td><strong>符号标志 SF</strong><br/>（Sign Flag）</td><td>运算结果最高位为 1，则 SF = 1；否则 SF = 0</td><td>3AH+7CH=B6H（最高位 D7=1：SF=1）<br>84H+7CH=（1）00H（最高位 D7=0：SF=0）</td></tr><tr><td>奇偶标志 PF<br/>（Parity Flag）</td><td>当运算结果最低字节中“1”的个数为零或偶数时，PF = 1；否则 PF = 0</td><td>3AH+7CH=B6H=10110110B<br>结果中有 5 个 1，是奇数：PF=0</td></tr><tr><td>溢出标志 OF<br/>（Overflow Flag）</td><td>若算术运算的结果有溢出，则 OF=1；否则 OF=0。CPU 对 OF 的计算：最高位进位 ⊕ 次高位进位<br>程序员的判断方法：<strong>正正相加得负或负负相加得正有溢出，其余均无溢出</strong></td><td>49H+6DH=B6H（产生溢出：OF = 1）<br>75H+8BH=（1）26H（没有溢出：OF = 0）</td></tr><tr><td><strong>辅助进位标志 AF</strong><br>（Auxiliary Carry Flag）</td><td>运算时 D3 位（低半字节）有进位或借位时，AF = 1；否则 AF = 0。</td><td>49H+6DH=B6H，D3 有进位：AF = 1</td></tr><tr><td>方向标志 DF<br>（Direction Flag）</td><td>用于串操作指令中，控制地址的变化方向</td><td>设置 DF=0，存储器地址自动增加；<br>设置 DF=1，存储器地址自动减少。</td></tr><tr><td>中断允许标志 IF<br>（Interrupt-enable Flag）</td><td>用于控制外部可屏蔽中断是否可以被处理器响应</td><td>设置 IF ＝ 1，则允许中断；<br>设置 IF ＝ 0，则禁止中断。</td></tr><tr><td>陷阱标志 TF （跟踪标志）<br>（Trap Flag）</td><td>用于控制处理器进入单步操作方式</td><td>设置 TF=0，处理器正常工作；<br>设置 TF=1，处理器单步执行指令。</td></tr></tbody></table><blockquote><p>溢出和进位：</p><ul><li><strong>进位标志</strong>表示<strong>无符号数</strong>运算结果是否超出范围，运算结果仍然<strong>正确</strong>；</li><li><strong>溢出标志</strong>表示<strong>有符号数</strong>运算结果是否超出范围，运算结果已经<strong>不正确</strong>（毕竟正正得负怎么可能对）；</li></ul></blockquote><h3 id="Intel-8086-的存储器组织及其寻址-😱"><a href="#Intel-8086-的存储器组织及其寻址-😱" class="headerlink" title="Intel 8086 的存储器组织及其寻址 😱"></a>Intel 8086 的存储器组织及其寻址 😱</h3><h4 id="主存储器的分段机构"><a href="#主存储器的分段机构" class="headerlink" title="主存储器的分段机构"></a>主存储器的分段机构</h4><p><strong>段地址</strong>：也叫段基址，用 16 位二进制数表示。</p><p><strong>偏移地址</strong>：也叫有效地址，段内地址的顺序编号，用 16 位二进制数表示。</p><p><strong>段地址</strong>：<strong>段内偏移地址</strong> 的表示方法称<strong>逻辑地址</strong>。</p><p>如，2000H:100H</p><p><strong>物理地址和逻辑地址的转换</strong>：</p><p>物理地址(PA) = 段地址 × 16 + 偏移地址(EA)</p><blockquote><ul><li><p>相当于是段地址右边加个 0，再加上偏移地址</p></li><li><p>一个物理地址可以有多个逻辑地址</p></li></ul></blockquote><p><strong>物理地址和逻辑地址的使用场合</strong>：</p><p><strong>物理地址</strong>：CPU 访问内存时使用</p><p><strong>逻辑地址</strong>：程序员描述内存单元的地址时使用</p><h3 id="Intel-8086-的引脚功能-😱"><a href="#Intel-8086-的引脚功能-😱" class="headerlink" title="Intel 8086 的引脚功能 😱"></a>Intel 8086 的引脚功能 😱</h3><p>8086CPU 的 40 条引脚信号可按功能分可分为四类，它们是：</p><ul><li><p>地址总线</p></li><li><p>数据总线</p></li><li><p>控制总线</p></li><li><p>其它（时钟与电源）</p></li></ul><h4 id="指令周期、总线周期和时钟周期"><a href="#指令周期、总线周期和时钟周期" class="headerlink" title="指令周期、总线周期和时钟周期"></a>指令周期、总线周期和时钟周期</h4><ul><li><p><strong>指令周期</strong>（Instruction Cycle）：执行一条指令所需要的时间称为指令周期，不同指令的指令周期不等长。</p></li><li><p><strong>总线周期</strong>（Bus Cycle）：CPU 与外部交换信息总是通过总线进行的，CPU 的每一个这种信息输入、输出过程需要的时间称为总线周期，每当 CPU 要从存储器或输入输出端口存取一个字节或字就需要一个总线周期。一个指令周期由一个或若干个总线周期组成。</p><p>例如：</p><p>ADD AL, [100H]</p><p>ADD [100H], AL</p></li><li><p><strong>时钟周期</strong>（Clock Cycle）：时钟脉冲的重复周期称为时钟周期，由计算机的主频决定。</p></li><li><p>8086CPU 的总线周期至少由 4 个时钟周期组成，分别以 T1、T2、T3、T4 表示（T 代表 State）。</p></li><li><p>一个总线周期完成一次数据传输，在 T1 期间由 CPU 输出地址，在 T2、T3、T4 期间传输数据。</p></li></ul><h4 id="最小模式和最大模式概念"><a href="#最小模式和最大模式概念" class="headerlink" title="最小模式和最大模式概念"></a>最小模式和最大模式概念</h4><p><strong>最小模式</strong>：在系统中只有一个微处理器。</p><p><strong>最大模式</strong>：两个或多个微处理器（主处理器、协处理器 8087、8089）</p><h4 id="最小模式下引脚功能"><a href="#最小模式下引脚功能" class="headerlink" title="最小模式下引脚功能"></a>最小模式下引脚功能</h4><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210315154053255.png" alt="8086 CPU的引脚图" style="zoom:67%;" /><ol><li><p>AD<del>15</del>～ AD<del>0</del>，地址/数据复用引脚</p><p>数据总线：双向、三态信号</p><p>地址总线：输出、三态信号。</p></li><li><p>A<del>19</del>/S<del>6</del> ～ A<del>16</del>/S<del>3</del> ，地址/状态总线复用，输出，三态</p><p>T1：输出 20 位地址信息的高 4 位</p><p>其它 T 周期：输出状态信息。</p></li><li><p>$\overline{\text{RD}}$，读信号，输出，三态</p></li><li><p>$\overline{\text{WR}}$，写信号，输出，三态</p></li><li><p>M/$\overline{\text{IO}}$，存储器/输入输出操作选择控制信号，输出，三态</p></li></ol><ul><li><strong>高电平</strong>：CPU 和存储器进行数据传输。</li><li><strong>低电平</strong>：CPU 和 I/O 设备进行数据传输。</li></ul><ol start="6"><li>$\overline{\text{BHE}}$/S<del>7</del>，高 8 位数据总线允许/状态复用信号，输出，三态</li></ol><ul><li><p>T1：</p><p>$\overline{\text{BHE}}$/S<del>7</del>=0，高 8 位数据有效。</p><p>$\overline{\text{BHE}}$/S<del>7</del>=1，仅在数据总线 AD<del>7</del>～ AD<del>0</del>上传送 8 位数据。</p></li><li><p>其它 T 周期：输出状态信号 S<del>7</del>，在 8086 中没有实际定义。</p></li></ul><ol start="7"><li><p>ALE，地址锁存允许信号，输出</p><p>实现地址信息与数据信息的分时复用。</p></li><li><p>DT/$\overline{\text{R}}$，数据发送/接收控制信号，三态，输出</p></li><li><p>$\overline{\text{DEN}}$，数据允许信号，输出，三态</p><p>与总线收发器联络</p></li><li><p>$\overline{\text{INTR}}$，可屏蔽中断请求信号，输入</p></li><li><p>$\overline{\text{NMI}}$，非屏蔽中断请求信号，输入</p></li><li><p>$\overline{\text{INTA}}$，中断响应信号，输出，三态</p></li><li><p>READY，准备就绪，输入信号</p><p>当被访问的部件无法在<strong>8086CPU</strong>规定的时间内完成数据传送时与<strong>CPU</strong>进行联络的信号。</p></li><li><p>$\overline{\text{TEST}}$，测试输入信号</p><p>在<strong>WAIT</strong>（等待）指令期间，<strong>8086CPU</strong>每隔 5 个时钟周期对$\overline{\text{TEST}}$引脚进行采样：</p><p>若$\overline{\text{TEST}}$为高电平，则<strong>CPU</strong>循环于等待状态。</p><p>若$\overline{\text{TEST}}$为低电平，则<strong>CPU</strong>脱离等待状态，继续执行后续指令。</p></li><li><p>RESET，复位输入信号</p><p>复位信号高电平至少应保持<strong>4</strong>个时钟周期，随着<strong>RESET</strong>变为低电平，CPU 就开始执行再启动过程。<strong>CPU</strong>复位之后，从<strong>FFFF0H</strong>单元开始读取指令字节。</p></li><li><p>HOLD，总线保持请求信号，输入</p></li><li><p>HLDA，总线保持响应信号，输出</p><p>其它设备要获得系统总线的控制权与 CPU 的一对联络信号。</p></li><li><p>CLK，时钟输入端</p></li></ol><p>为微处理器提供基本的定时脉冲</p><ol start="19"><li>VCC，电源输入</li></ol><p>要求接上正电压（+5V±10%）</p><ol start="20"><li>GND，地线</li></ol><br><h2 id="Intel-8086-微处理器基本时序"><a href="#Intel-8086-微处理器基本时序" class="headerlink" title="Intel 8086 微处理器基本时序"></a>Intel 8086 微处理器基本时序</h2><p>省略，看课本</p><br><br><h1 id="第三章-指令系统"><a href="#第三章-指令系统" class="headerlink" title="第三章 指令系统"></a>第三章 指令系统</h1><p><strong>指令的格式</strong>：</p><p> <strong>机器指令的格式</strong>：</p><p> 每条机器指令都由”0“和”1“组成，包含操作码和地址码。</p><p> 格式：[操作码] [地址码]</p><p> 其中，操作码：说明指令的性质和功能；地址码：说明参与运算的操作数或操作数的地址；</p><p> <strong>符号指令的格式</strong>：</p><p> 用符号来表示操作码和地址码。</p><p> 格式：[操作码助记符] [操作数助记符]</p><p> 例子：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MOV AL,3#把3送给AL</span><br><span class="line">MOV BL,4#把4送给BL</span><br><span class="line">ADD AL,BL#把AL和BL相加，结果送给AL</span><br></pre></td></tr></table></figure><h2 id="8086-CPU-寻址方式-⭐"><a href="#8086-CPU-寻址方式-⭐" class="headerlink" title="8086 CPU 寻址方式 ⭐"></a>8086 CPU 寻址方式 ⭐</h2><p>微机中哪些地方可以存放操作数？</p><p>答：寄存器组，内存储器，I/O 接口。</p><h3 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h3><p><strong>特点</strong>：操作数直接存放在<u>指令</u>中，紧跟在操作码之后。</p><p><strong>表示方法</strong>：立即数，也就是<u>常量</u>，二进制数、八进制数、十进制数、十六进制数均可。</p><h3 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h3><p><strong>特点</strong>：操作数在 CPU 内部的某个寄存器中。</p><p><strong>表示方法</strong>：寄存器的名称（如 AX、BX 等）。</p><h3 id="存储器寻址"><a href="#存储器寻址" class="headerlink" title="存储器寻址"></a>存储器寻址</h3><p><strong>特点</strong>：操作数存放在内存单元中。</p><ol><li><p>指令中如何描述操作数？</p><p>答：在指令中用逻辑地址表示操作数。</p><p>段地址：有效地址</p><blockquote><p>有效地址 EA 可有以下三部分组成</p><ul><li><p>基址寄存器（BX、BP）</p></li><li><p>变址寄存器内容 （SI、DI）</p></li><li><p>位移量（8 位或 16 位立即数）</p></li></ul></blockquote></li><li><p>CPU 如何找到操作数？</p><p>物理地址和逻辑地址的转换</p><p>物理地址 PA = 段地址 DS × 16 + 偏移地址(EA)</p></li></ol><h4 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h4><p>有效地址 EA 由<u>指令直接给出</u></p><p><strong>表示方法</strong>：[有效地址 EA]</p><p>物理地址：PA = DS × 16 + EA</p><h4 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h4><p>有效地址 EA 由某个寄存器给出</p><p><strong>表示方法</strong>：[BX]、[BP]、[SI]、[DI]</p><p>物理地址：</p><p>PA = (DS) × 16 + (BX)/(SI)/(DI)</p><p>PA = (SS) × 16 + (BP)</p><h4 id="基址寻址"><a href="#基址寻址" class="headerlink" title="基址寻址"></a>基址寻址</h4><p><strong>表示方法</strong>：[基址寄存器 + 位移量]</p><p>物理地址：</p><p>PA = (DS) × 16 + (BX)</p><p>PA = (SS) × 16 + (BP)</p><h4 id="变址寻址"><a href="#变址寻址" class="headerlink" title="变址寻址"></a>变址寻址</h4><p><strong>表示方法</strong>：[变址寄存器 + 位移量]</p><p>物理地址：PA=(DS) × 16 + (SI)/(DI)</p><h4 id="基址变址寻址"><a href="#基址变址寻址" class="headerlink" title="基址变址寻址"></a>基址变址寻址</h4><p><strong>表示方法</strong>：[基址寄存器 + 变址寄存器]</p><p>物理地址：</p><p>PA=(DS) × 16 + (BX) + (变址寄存器)</p><p>PA=(SS) × 16 + (BP) + (变址寄存器)</p><h4 id="基址变址位移寻址"><a href="#基址变址位移寻址" class="headerlink" title="基址变址位移寻址"></a>基址变址位移寻址</h4><p><strong>表示方法</strong>：[基址寄存器 + 变址寄存器 + 位移量]</p><p>物理地址：</p><p>PA=(DS) × 16 + (BX) + (变址寄存器) + 位移量</p><p>PA=(SS) × 16 + (BP) + (变址寄存器) + 位移量</p><br><h2 id="8086-CPU-指令系统-⭐😱"><a href="#8086-CPU-指令系统-⭐😱" class="headerlink" title="8086 CPU 指令系统 ⭐😱"></a>8086 CPU 指令系统 ⭐😱</h2><h3 id="指令构成的基本原则"><a href="#指令构成的基本原则" class="headerlink" title="指令构成的基本原则"></a>指令构成的基本原则</h3><ol><li><p>源、目的操作数的<u>字长一致</u></p><p>MOV AL,BX ❌</p></li><li><p>源、目的操作数<u>不能同为内存单元</u></p><p>MOV [SI],[DI] ❌</p></li><li><p>立即数不能作目的操作数</p><p>MOV 12H,AL ❌</p></li></ol><div class="note success no-icon flat"><p>左目右源 → [目的操作数 d],[源操作数 s]</p></div><h3 id="8086-CPU-指令分类"><a href="#8086-CPU-指令分类" class="headerlink" title="8086 CPU 指令分类"></a>8086 CPU 指令分类</h3><h4 id="一、数据传送指令（14-条）⭐"><a href="#一、数据传送指令（14-条）⭐" class="headerlink" title="一、数据传送指令（14 条）⭐"></a>一、数据传送指令（14 条）⭐</h4><ul><li>实现在寄存器、存储器及 I/O 端口之间传送数据</li><li>除<u>标志传送指令</u>外，指令执行结果都<u>不影响</u>标志寄存器</li></ul><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210323204254049.png" alt="" style="zoom:80%;" /><h5 id="MOV-指令"><a href="#MOV-指令" class="headerlink" title="MOV 指令"></a>MOV 指令</h5><p><strong>格式</strong>：MOV d, s</p><p><strong>功能</strong>： (d) ← (s)</p><p><strong>说明</strong>：将 s 的内容传送给 d，s 保持不变</p><div class="note warning no-icon flat"><p>MOV 指令注意事项：</p><ol><li><p><u>立即数不能直接送段寄存器</u></p></li><li><p>d、s 不能同为段寄存器</p></li></ol></div><h5 id="XCHG-指令"><a href="#XCHG-指令" class="headerlink" title="XCHG 指令"></a>XCHG 指令</h5><p><strong>格式</strong>： XCHG d，s</p><p><strong>功能</strong>： (d) ↔ (s)</p><p><strong>说明</strong>：交换 s 和 d 的内容，s 和 d 的<u>内容都变化</u></p><div class="note warning no-icon flat"><p>XCHG 指令注意事项：</p><ol><li><p>不允许使用立即数</p></li><li><p>不允许使用段寄存器</p></li></ol></div><h5 id="堆栈操作指令-PUSH-和-POP"><a href="#堆栈操作指令-PUSH-和-POP" class="headerlink" title="堆栈操作指令 PUSH 和 POP"></a>堆栈操作指令 PUSH 和 POP</h5><ul><li><p>堆栈是存储器中的特定区域。</p></li><li><p>堆栈存取规则：后进先出(LIFO 或 FILO)。</p></li><li><p>在堆栈中始终有一个栈顶单元，该单元的地址为<strong>SS:SP</strong>。</p></li><li><p>堆栈操作类型：压入和弹出，均以<u>字</u>为单位进行。</p></li><li><p>不管压入还是弹出总是对栈顶进行操作，且栈顶指针 SP 会<u>自动修改</u>以保持<u>始终指向新的栈顶</u>。</p></li></ul><h6 id="进栈指令-PUSH"><a href="#进栈指令-PUSH" class="headerlink" title="进栈指令 PUSH"></a>进栈指令 PUSH</h6><p><strong>格式</strong>： PUSH s<del>16</del></p><p><strong>功能</strong>： SP ← SP－2，(SP) ← s<del>16</del></p><p><strong>说明</strong>：将 s 指定的 16 位操作数压入堆栈 。</p><h6 id="出栈指令-POP"><a href="#出栈指令-POP" class="headerlink" title="出栈指令 POP"></a>出栈指令 POP</h6><p><strong>格式</strong>： POP d<del>16</del></p><p><strong>功能</strong>： d<del>16</del> ← (SP)，SP ← SP ＋ 2</p><p><strong>说明</strong>：将栈顶的 16 位操作数弹出，送入 d。</p><div class="note success no-icon flat"><p>-2，+2 是指堆栈指针移动 2 个字节</p></div><div class="note warning no-icon flat"><p>堆栈操作指令注意事项：</p><ol><li><p>不允许使用立即数</p></li><li><p>必须以<u>字</u>为单位</p></li></ol></div><h5 id="查表转换指令-XLAT"><a href="#查表转换指令-XLAT" class="headerlink" title="查表转换指令 XLAT"></a>查表转换指令 XLAT</h5><p><strong>格式</strong>： XLAT</p><p><strong>功能</strong>： AL ← DS : [BX ＋ AL]</p><p><strong>说明</strong>：将数据段中首单元偏移地址在 BX，顺序号在 AL 的表的内容取出送 AL。</p><p>XLAT 指令相当于在一个字节数组中寻找某个元素：</p><ol><li><p>数组的首地址 → BX</p></li><li><p>数组元素的下标 → AL</p></li><li><p>寻找到的数组元素放在 AL 中</p></li></ol><h5 id="取有效地址指令-LEA"><a href="#取有效地址指令-LEA" class="headerlink" title="取有效地址指令 LEA"></a>取有效地址指令 LEA</h5><p><strong>格式</strong>： LEA reg<del>16</del>，mem</p><p><strong>功能</strong>： reg<del>16</del> ← mem<del>EA</del></p><p><strong>说明</strong>：将 mem 指定的存储器操作数的有效地址取至 16 位的通用寄存器 reg<del>16</del>中 。</p><div class="note warning no-icon flat"><p>堆栈操作指令注意事项：</p><p>LEA 指令注意事项：</p><ol><li><p>源操作数必须为存储器寻址方式</p></li><li><p>目的操作数是 16 位通用寄存器，不能是段寄存器</p></li></ol></div><h5 id="端口输入指令-IN"><a href="#端口输入指令-IN" class="headerlink" title="端口输入指令 IN"></a>端口输入指令 IN</h5><p><strong>格式</strong>：</p><p>IN AL, port<del>8</del></p><p>IN AL, DX; 口地址为 16 位必须送 DX</p><p>IN AX, port<del>8</del></p><p>IN AX, DX</p><p><strong>功能</strong>：从 I/O 端口中读取一个或两个字节到 CPU 内的 AL 或 AX 寄存器。</p><p><strong>说明</strong>：端口操作数用该端口的地址表示。</p><h5 id="端口输出指令-OUT"><a href="#端口输出指令-OUT" class="headerlink" title="端口输出指令 OUT"></a>端口输出指令 OUT</h5><p><strong>格式</strong>：</p><p>OUT port<del>8</del>, AL</p><p>OUT DX, AL ;口地址为 16 位必须送 DX</p><p>OUT port<del>8</del>, AX</p><p>OUT DX, AX</p><p><strong>功能</strong>：向 I/O 端口中输出一个或两个字节。</p><p><strong>说明</strong>：端口操作数用该端口的地址表示。</p><br><h4 id="二、算术运算指令（20-条）⭐"><a href="#二、算术运算指令（20-条）⭐" class="headerlink" title="二、算术运算指令（20 条）⭐"></a>二、算术运算指令（20 条）⭐</h4><p>实现加法、减法、乘法、除法、BCD 码运算后的调整</p><p>大部分指令影响标志寄存器中的状态标志位</p><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210323204916454.png" alt=""><br><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210323205034384.png" alt=""></p><h5 id="不带进位加法指令-ADD"><a href="#不带进位加法指令-ADD" class="headerlink" title="不带进位加法指令 ADD"></a>不带进位加法指令 ADD</h5><p><strong>格式</strong>：ADD d, s</p><p><strong>功能</strong>： (d) ← (d) + (s)</p><p><strong>说明</strong>：操作数不能使用段寄存器</p><h5 id="带进位加法指令-ADC"><a href="#带进位加法指令-ADC" class="headerlink" title="带进位加法指令 ADC"></a>带进位加法指令 ADC</h5><p><strong>格式</strong>：ADC d, s</p><p><strong>功能</strong>： (d) ← (d) + (s) + CF</p><p><strong>说明</strong>：将<strong>目的操作数 d</strong>与<strong>源操作数 s</strong>和<strong>进位标志 CF</strong>相加结果送回 d 中</p><details green><summary> 例题 </summary>              <div class='content'>              <p>设 AX ＝ 1000H，CF ＝ 1，分析以下指令的执行结果（AX=? CF=?）</p><p>（1）ADD AX，100H; <u>AX=1100H，CF=0</u></p><p>（2）ADC AX，100H; <u>AX=1101H，CF=0</u></p><p>（3）ADC AH，0F0H; <u>AX=0100H，CF=1</u></p>              </div>            </details><h5 id="加一指令-INC"><a href="#加一指令-INC" class="headerlink" title="加一指令 INC"></a>加一指令 INC</h5><p>格式：INC d</p><p>功能：(d) ← (d) + 1</p><p>说明：将目的操作数 d 加 1 后结果送回 d 中</p><p>注意：<u>INC 不影响 CF 标志</u></p><details green><summary> 例题 </summary>              <div class='content'>              <p>设 AX ＝ 0FF00H，CF ＝ 0，则执行下列指令后，AX=? CF=?</p><p>（1）INC AX; <u>AX=0FF01H，CF=0</u></p><p>（2）INC AH; <u>AX=0000H，CF=0</u></p>              </div>            </details><h5 id="不带进位减法指令-SUB"><a href="#不带进位减法指令-SUB" class="headerlink" title="不带进位减法指令 SUB"></a>不带进位减法指令 SUB</h5><p>格式：SUB d,s</p><p>功能： (d) ← (d) - (s)</p><p>说明：将目的<strong>操作数 d</strong>与<strong>源操作数 s</strong>相减结果送回 d 中</p><h5 id="带进位减法指令-SBB"><a href="#带进位减法指令-SBB" class="headerlink" title="带进位减法指令 SBB"></a>带进位减法指令 SBB</h5><p>格式：SBB d,s</p><p>功能： (d) ← (d) - (s) - CF</p><p>说明：将目的<strong>操作数 d</strong>与<strong>源操作数 s</strong>和<strong>进位标志 CF</strong>相减结果送回 d 中</p><details green><summary> 例题 </summary>              <div class='content'>              <p>设 AX ＝ 1101H，CF ＝ 1，则执行下列指令后，AX=? CF=?</p><p>（1）SUB AX，100H; <u>AX=1001H，CF=0</u></p><p>（2）SBB AX，100H; <u>AX=1000H，CF=0</u></p><p>（3）SBB AH，11H; <u>AX=0FF01H，CF=1</u></p><blockquote><p>第三题：估计是借位所以前面加了个 0</p></blockquote>              </div>            </details><h5 id="减一指令-DEC"><a href="#减一指令-DEC" class="headerlink" title="减一指令 DEC"></a>减一指令 DEC</h5><p>格式：DEC d</p><p>功能： (d) ← (d) - 1</p><p>说明：将目的操作数 d 减 1 后结果送回 d 中</p><p>注意：<u>DEC 不影响 CF 标志</u></p><h5 id="取负指令-NEG"><a href="#取负指令-NEG" class="headerlink" title="取负指令 NEG"></a>取负指令 NEG</h5><p>格式：NEG d</p><p>功能： (d) ← $\overline{\text{d}}$ +1</p><p>说明：将目的操作数取负后送回 d 中</p><details green><summary> 例题 </summary>              <div class='content'>              <p>设 AX ＝ 00FFH，则执行下列指令后，AX=?</p><p>NEG AX; <u>AX = FF01H</u></p><p>NEG AL; <u>AX = 0001H</u></p>              </div>            </details><h5 id="比较指令-CMP"><a href="#比较指令-CMP" class="headerlink" title="比较指令 CMP"></a>比较指令 CMP</h5><p>格式：CMP d，s</p><p>功能： (d) - (s)</p><p>说明：仅将<strong>目的操作数 d</strong>与<strong>源操作数 s</strong>相减，结果并不送回 d 中</p><br><p><del>在此插个 BCD 码概念</del></p><p><strong>BCD 码</strong></p><p><strong>概念</strong>：BCD 码（Binary-Coded Decimal）亦称二进码十进数或二 - 十进制代码。用<strong>4 位二进制数</strong>来表示<strong>1 位十进制数中的 0~9 这 10 个数码</strong>。通俗点，BCD 码就是对于 8 位数字来说，<u>高 4 为和低 4 为均不超过 9 的数字</u>。</p><h5 id="加法的压缩-BCD-码调整指令-DAA"><a href="#加法的压缩-BCD-码调整指令-DAA" class="headerlink" title="加法的压缩 BCD 码调整指令 DAA"></a>加法的压缩 BCD 码调整指令 DAA</h5><p><strong>格式</strong>：DAA</p><p><strong>功能</strong>：对 AL 中的压缩 BCD 码加法结果进行调整。</p><p><strong>说明</strong>：必须紧跟在 ADD/ADC 指令之后出现。</p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210324160243732.png" alt=""  /><blockquote><p>高低位都满足则加 66H</p></blockquote><details green><summary> 例题 </summary>              <div class='content'>              <ol><li><p>设 AL ＝ 25H，BL ＝ 37H，问执行下列指令序列后，AL=? CF=?</p><p>ADD AL，BL</p><p>DAA</p><blockquote><p>25H+37H=5CH</p><p>修正：5CH+6H=62H=01100010B</p><p>AL=62H=62<del>BCD</del>，CF=0</p></blockquote></li><li><p>CPU 执行下列指令序列后，AL=? CF=?</p><p>MOV AL，68H</p><p>ADD AL，89H</p><p>DAA</p><blockquote><p>68H+89H=(1)F1H （大于 9，AF=1）</p><p>修正：F1H+66H=(1)57H=(1)01010111B</p><p>AL=57H=57BCD，CF=1 （表示结果为 157）</p></blockquote></li></ol>              </div>            </details><h4 id="三、逻辑运算与移位指令-⭐"><a href="#三、逻辑运算与移位指令-⭐" class="headerlink" title="三、逻辑运算与移位指令 ⭐"></a>三、逻辑运算与移位指令 ⭐</h4><h5 id="逻辑运算指令"><a href="#逻辑运算指令" class="headerlink" title="逻辑运算指令"></a>逻辑运算指令</h5><ul><li>主要实现与、或、非、异或、测试等逻辑运算。</li><li>除逻辑“非”指令不影响标志外，其他逻辑运算指令均影响标志 SF、ZF 和 PF，而 OF 和 CF 一定被置 0，AF 不确定。</li></ul><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210327211600621.png" style="zoom: 67%;" /><h6 id="逻辑“与”指令-AND"><a href="#逻辑“与”指令-AND" class="headerlink" title="逻辑“与”指令 AND"></a>逻辑“与”指令 AND</h6><p><strong>格式</strong>：AND d, s</p><p><strong>功能</strong>： (d) ← (d) ∧ (s)</p><p><strong>说明</strong>：将目的操作数 d 与源操作数 s 按位相“与”结果送回 d 中。</p><p><strong>特点</strong>：“与” 运算常用于使某些位<u>清 0</u>。</p><details green><summary> 例题 </summary>              <div class='content'>              <p>写出指令完成以下要求</p><p>（1）屏蔽 AL 的 0，1 两位。</p><p>AND AL，0FCH</p><p>（2）将 AH 的高 4 位清 0。</p><p>AND AH，0FH</p><p>（3）将 BX 的低 4 位清 0。</p><p>AND BX，0FFF0H</p>              </div>            </details><h6 id="逻辑“或”指令-OR"><a href="#逻辑“或”指令-OR" class="headerlink" title="逻辑“或”指令 OR"></a>逻辑“或”指令 OR</h6><p><strong>格式</strong>：OR d, s</p><p><strong>功能</strong>： (d) ← (d) ∨ (s)</p><p><strong>说明</strong>：将目的操作数 d 与源操作数 s 按位相“或”结果送回 d 中。</p><p><strong>特点</strong>：“或” 运算常用于使某些位<u>置 1</u>。</p><details green><summary> 例题 </summary>              <div class='content'>              <p>写出指令完成以下要求</p><p>（1）将 AL 的 0，1 两位置 1。</p><p>OR AL，03H</p><p>（2）将 AH 的高 4 位置 1。</p><p> OR AH，0F0H</p><p>（3）将 BX 的低 4 位置 1。</p><p>OR BX，000FH</p>              </div>            </details><h6 id="逻辑“异或”指令-XOR"><a href="#逻辑“异或”指令-XOR" class="headerlink" title="逻辑“异或”指令 XOR"></a>逻辑“异或”指令 XOR</h6><p><strong>格式</strong>：XOR d, s</p><p><strong>功能</strong>： (d) ← (d) ⊕ (s)</p><p><strong>说明</strong>：将目的操作数 d 与源操作数 s 按位相“异或”结果送回 d 中。</p><p><strong>特点</strong>：“异或” 运算常用于使某些位<u>取反</u>。</p><details green><summary> 例题 </summary>              <div class='content'>              <p>写出指令完成以下要求</p><p>（1）对 AL 的 0，1 两位取反。</p><p> XOR AL，03H</p><p>（2）对 CL 的 1,2,3,4,5 位取反，其它位不变。</p><p> XOR CL，3EH</p>              </div>            </details><h6 id="逻辑“非”指令-NOT"><a href="#逻辑“非”指令-NOT" class="headerlink" title="逻辑“非”指令 NOT"></a>逻辑“非”指令 NOT</h6><p><strong>格式</strong>：NOT d</p><p><strong>功能</strong>： (d) ← (d)</p><p><strong>说明</strong>：将目的操作数 d 取反后结果送回 d 中。</p><h6 id="测试指令-TEST"><a href="#测试指令-TEST" class="headerlink" title="测试指令 TEST"></a>测试指令 TEST</h6><p><strong>格式</strong>：TEST d, s</p><p><strong>功能</strong>：(d) ∧ (s)</p><p><strong>说明</strong>：将目的操作数 d 与源操作数 s 按位相“<u>与</u>”，只<u>影响标志位不回送结果</u>，常用于测试某些位是 0 或 1。</p><details green><summary> 例题 </summary>              <div class='content'>              <p>测试 AL 的最高位是 0/1？</p><p>TEST AL，80H</p><p>若 SF=1，则 AL 最高位为 1；</p><p>若 SF=0，则 AL 最高位为 0；</p><p>若 ZF=1，则 AL 最高位为 0；</p><p>若 ZF=0，则 AL 最高位为 1；</p>              </div>            </details><h5 id="移位运算指令"><a href="#移位运算指令" class="headerlink" title="移位运算指令"></a>移位运算指令</h5><ul><li><p>对 8 位或 16 位的通用寄存器或存储器内容进行移位，移位次数可以为 1 ～ 255。</p></li><li><p>若移位次数为 1 则可直接写在指令中，若次数为 2 ～ 255 则不能直接写在指令中，必须先将次数放在寄存器 CL 中，指令中只能写<u>CL</u>，移位结束后 CL 的值不变。</p></li><li><p>影响标志 OF、SF、ZF、PF、CF，但 AF 不确定。当移位次数为 1 时，若移位结果使最高位符号位发生变化，则溢出标志 OF ＝ 1，否则 OF ＝ 0；当移位次数超过 1 时，OF 无效。</p></li></ul><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/Microcomputer_Note/image-20210327213112052.png" style="zoom:80%;" /><h6 id="逻辑左移指令-SHL"><a href="#逻辑左移指令-SHL" class="headerlink" title="逻辑左移指令 SHL"></a>逻辑左移指令 SHL</h6><p><strong>格式</strong>：SHL d，count（1/CL）</p><p><strong>功能</strong>：逻辑左移</p><p><strong>说明</strong>：将目的操作数 d 左移 count 位，右边补 0，左边入 CF。</p><div class="note success no-icon flat"><p>逻辑左移 1 位相当于无符号数<u>乘以 2！</u></p></div><details green><summary> 例题 </summary>              <div class='content'>              <p><strong>BX 乘以 2：</strong></p><p>SHL BX，1</p><p><strong>BX 乘以 3：</strong></p><p>MOV AX，BX</p><p>SHL BX，1</p><p>ADD BX，AX</p><p><strong>BX 乘以 4：</strong></p><p>MOV CL，2</p><p>SHL BX，CL</p>              </div>            </details><h6 id="逻辑右移指令-SHR"><a href="#逻辑右移指令-SHR" class="headerlink" title="逻辑右移指令 SHR"></a>逻辑右移指令 SHR</h6><p><strong>格式</strong>：SHR d, count（1/CL）</p><p><strong>功能</strong>：逻辑右移</p><p><strong>说明</strong>：将目的操作数 d 右移 count 位，左边补 0，右边入 CF。</p><div class="note success no-icon flat"><p>逻辑右移 1 位相当于无符号数<u>除以 2！</u></p></div><h6 id="算术左移指令-SAL"><a href="#算术左移指令-SAL" class="headerlink" title="算术左移指令 SAL"></a>算术左移指令 SAL</h6><p><strong>格式</strong>：SAL d，count（1/CL）</p><p><strong>功能</strong>：同逻辑左移完全相同</p><h6 id="算术右移指令-SAR"><a href="#算术右移指令-SAR" class="headerlink" title="算术右移指令 SAR"></a>算术右移指令 SAR</h6><p><strong>格式</strong>：SAR d，count（1/CL）</p><p><strong>功能</strong>：算术右移</p><p><strong>说明</strong>：将操作数 d 的内容右移，左边不变，右边移入 CF 中.</p><div class="note success no-icon flat"><p>算术右移 1 位相当于有符号数<u>除以 2！</u></p></div><h6 id="循环左移指令-ROL"><a href="#循环左移指令-ROL" class="headerlink" title="循环左移指令 ROL"></a>循环左移指令 ROL</h6><p><strong>格式</strong>：ROL d，count（1/CL）</p><p><strong>功能</strong>：循环左移</p><p><strong>说明</strong>：将操作数 d 的内容左移，最高位循环移入最低位，同时移入 CF。</p><h6 id="循环右移指令-ROR"><a href="#循环右移指令-ROR" class="headerlink" title="循环右移指令 ROR"></a>循环右移指令 ROR</h6><p><strong>格式</strong>：ROR d, count（1/CL）</p><p><strong>功能</strong>：循环右移</p><p><strong>说明</strong>：将操作数 d 的内容右移，最低位循环移入最高位，同时移入 CF。</p><h4 id="四、串操作指令"><a href="#四、串操作指令" class="headerlink" title="四、串操作指令"></a>四、串操作指令</h4><h4 id="五、控制转移指令-😱"><a href="#五、控制转移指令-😱" class="headerlink" title="五、控制转移指令 😱"></a>五、控制转移指令 😱</h4><h4 id="六、处理机控制指令"><a href="#六、处理机控制指令" class="headerlink" title="六、处理机控制指令"></a>六、处理机控制指令</h4>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;strong&gt;文档版链接&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&quot;gallery-group-main&quot;&gt;

  &lt;figure class=&quot;gallery-group&quot;&gt;
  &lt;img class=&quot;gallery-group-img&quot; src= &quot;htt</summary>
      
    
    
    
    <category term="📕知识笔记" scheme="https://hassanwong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="💻微型计算机" scheme="https://hassanwong.top/tags/%F0%9F%92%BB%E5%BE%AE%E5%9E%8B%E8%AE%A1%E7%AE%97%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>HDU OJ 编程刷题笔记</title>
    <link href="https://hassanwong.top/posts/3bc57976/"/>
    <id>https://hassanwong.top/posts/3bc57976/</id>
    <published>2021-03-11T08:44:00.000Z</published>
    <updated>2021-04-08T11:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前言：</p><p>本刷题记录几乎都是基础题，无需用到算法、数据结构，适合小白食用，但言归正传，算法和数据结构很重要，无论是面试还是工作都会用到。</p></blockquote><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><h3 id="我的常用头文件"><a href="#我的常用头文件" class="headerlink" title="我的常用头文件"></a>我的常用头文件</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br></pre></td></tr></table></figure><h3 id="头文件相关函数及用法"><a href="#头文件相关函数及用法" class="headerlink" title="头文件相关函数及用法"></a>头文件相关函数及用法</h3><h4 id="math-h（math-函数）"><a href="#math-h（math-函数）" class="headerlink" title="math.h（math 函数）"></a>math.h（math 函数）</h4><ol><li><p><strong>fabs(double x)</strong></p><p>对 double 型变量取绝对值</p><p><strong>abs(int x)</strong></p><p>对 int 型变量取绝对值</p><div class="note warning no-icon flat"><p>注意：该函数不会根本上改变变量的值，使用时注意保存该变量或直接输出它</p></div></li><li><p><strong>floor(double x)和 ceil(double x)</strong></p><p>对 double 型变量向下取整和向上取整，返回类型为 double 类型</p></li><li><p><strong>round(double x)</strong></p><p>四舍五入求整</p></li><li><p><strong>pow(double r,double p)</strong></p><p>返回 r 的 p 次方</p></li><li><p><strong>sqrt(double x)</strong></p><p>返回 double 型变量的算术平方根</p></li><li><p><strong>log(double x)</strong></p><p>返回 double 型变量的以 e 为底的对数</p></li><li><p><strong>sin(double x)、cos(double x)、tan(double x)</strong></p><p>返回 double 型变量的正弦值、余弦值和正切值，参数要求是弧度制</p></li><li><p><strong>asin(double x)、acos(double x)、atan(double x)</strong></p><p>返回 double 型变量的反正弦值、反余弦值、反正切值</p></li></ol><h4 id="algorithm"><a href="#algorithm" class="headerlink" title="algorithm"></a>algorithm</h4><ol><li><strong>sort (array+xnum, array+ynum)</strong></li></ol><p>对 [xnum, ynum) 之间的数组升序排序，数字和字母等都可以排序</p><p>例如：<code>sort(a, a + sizeof(a));</code></p><ol start="2"><li><p><strong>sort (array+xnum, array+ynum, compare)</strong></p><p>可以加条件判断 compare 函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子：下面表示的是按照从大到小排序</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(a) &gt; <span class="built_in">abs</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><strong>reverse (array+xnum, array+ynum)</strong></p><p>对 [xnum, ynum) 之间的数组翻转顺序，同上</p><div class="note warning no-icon flat"><p>注意：只能反转<strong>字符串</strong>和<strong>数字数组</strong>，不能反转字符数组</p></div><div class="note primary no-icon flat"><p>例子：</p><ol><li><p>reverse(str.begin(), str.end());</p></li><li><p>reverse(array, array + length);</p></li></ol></div></li></ol><h4 id="string-h"><a href="#string-h" class="headerlink" title="string.h"></a>string.h</h4><ol><li><p><strong>memset (array, 0, sizeof(array))</strong></p><p>如果 array 是数字型，只能将全初始化为 0</p><p>如果 array 是 char 型，可以初始化为任意字符</p></li><li><p><strong>strrev (array)</strong></p><p>即可实现<strong>字符数组</strong>的反转</p></li><li><p><strong>memcpy (b, a, sizeof(a))</strong></p><p>将数组 a 赋值给 b</p></li></ol><h2 id="零碎知识点"><a href="#零碎知识点" class="headerlink" title="零碎知识点"></a>零碎知识点</h2><ol><li><p>不要写打印输出的提示信息</p></li><li><p>数组定义时，大小不能用变量</p></li><li><p>字符数组结束标志为’\0’</p></li><li><p>%c 是单个字符，%s 是字符串</p></li><li><p>判断奇偶最简方法：</p><p>if (num &amp; 1) 👉 true 为奇数，false 为偶数</p></li><li><p>gets 函数用于输入字符串，还可以输入空格</p></li><li><p>getchar 函数用于输入字符，也可以输入空格</p><div class="note success no-icon flat"><p>tips：<code>getchar()</code> 的一个功能是可将回车字符吸收掉</p></div></li><li><p>不同数据类型所占的字节/位数：</p><table><thead><tr><th>类型</th><th>字节</th><th>位数</th></tr></thead><tbody><tr><td>char</td><td>1</td><td>8</td></tr><tr><td>short</td><td>2</td><td>16</td></tr><tr><td>int, long, float</td><td>4</td><td>32</td></tr><tr><td>long long, double</td><td>8</td><td>64</td></tr></tbody></table></li><li><p>获取数组长度：</p><p><code>length = sizeof(array) / sizeof(array[0]);</code></p></li><li><p>将 char 型转化为 int 型：</p><p><code>int a_int = a_char + 0;</code></p></li><li><p><u>循环输入</u>（输多少数据，数组记录多少数据）：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a[max];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;x) == <span class="number">1</span>) &#123; <span class="comment">// while (cin&gt;&gt;x)</span></span><br><span class="line">        a[n++] = x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>此处的等于 1 作用是判断输入 1 个值是否成功，以此类推，输入 n 个值就将 1 换成 n。算法竞赛中，常常难以确定所需数组大小，一般数组得先声明得大一点（有些题目会提到范围），在空间够用前提下，再来写后续代码。如果要数组定义的很大，那么建议在 main 函数外定义。</p></blockquote></li></ol><br><h2 id="HDU-OJ-刷题记录"><a href="#HDU-OJ-刷题记录" class="headerlink" title="HDU OJ 刷题记录"></a>HDU OJ 刷题记录</h2><blockquote><p>刷题通道：<a href="http://acm.hdu.edu.cn/listproblem.php?vol=1">HDU OJ</a></p><p>题目分类：<a href="https://www.cnblogs.com/lzmfywz/archive/2012/02/11/2347056.html">HDU OJ 题目分类</a></p></blockquote><h3 id="1000-A-B"><a href="#1000-A-B" class="headerlink" title="1000 A+B"></a>1000 A+B</h3><p><strong>Problem Description</strong><br>计算 A + B。</p><p><strong>Input</strong><br>每一行包含两个整数 A 和 B，程序可一直进行下去</p><p><strong>Output</strong><br>对于每种情况，在一行中输出 A+B</p><p><strong>Sample Input</strong><br>1 1</p><p><strong>Sample Output</strong><br>2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a, &amp;b) == <span class="number">2</span>) &#123; <span class="comment">//==2也可以换成 !=EOF</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a+b&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>scanf(&quot;%d%d&quot;, &amp;a, &amp;b) == 2</code>这一判断是确保输入了俩数</p></blockquote><h3 id="1001-总和问题"><a href="#1001-总和问题" class="headerlink" title="1001 总和问题"></a>1001 总和问题</h3><p><strong>Problem Description</strong><br>在此问题中，您的任务是计算 SUM（n）= 1 + 2 + 3 + … + n。</p><p><strong>Input</strong><br>输入将由一系列整数 n 组成，每行一个整数。</p><p><strong>Output</strong><br>对于每种情况，在一行中输出 SUM（n），然后输出空白行。您可以假设计算结果将在 32 位带符号整数的范围内。</p><p><strong>Sample Input</strong><br>1<br>100</p><p><strong>Sample Output</strong><br>1<br>5050</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span>)((<span class="number">1.0</span> + n) * n / <span class="number">2</span> + <span class="number">0.5</span>) &lt;&lt; <span class="built_in">endl</span></span><br><span class="line">     &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//计算(1+n)*n时可能会超出 int 的最大值，即造成上溢overflow</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1008-电梯"><a href="#1008-电梯" class="headerlink" title="1008 电梯"></a>1008 电梯</h3><p><strong>Problem Description</strong><br>我们城市最高的建筑物只有一部电梯。请求列表由 N 个正数组成。数字按指定顺序指示电梯将停在的楼层。<br>将电梯上移一层需要 6 秒钟，而将一层下移则需要 4 秒钟。电梯将在每个站点停留 5 秒钟。<br>对于给定的请求列表，您将计算完成列表上的请求所花费的总时间。电梯在开始时位于 0 楼，并且在满足请求后不必返回 0 楼。</p><p><strong>Input</strong><br>有多个测试用例。每个案例包含一个正整数 N，后跟 N 个正数。输入中的所有数字均小于 100。N = 0 的测试用例表示输入结束。该测试用例将不被处理。</p><p><strong>Output</strong><br>将每个测试用例的总时间打印在一行上。</p><p><strong>Sample Input</strong><br>1 2<br>3 2 3 1<br>0</p><p><strong>Sample Output</strong><br>17<br>41</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>], b[<span class="number">100</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">memset</span>(b, <span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;N) == <span class="number">1</span> &amp;&amp; N) &#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a[i];</span><br><span class="line"><span class="keyword">if</span> ((a[i]-b[i]) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">t += (a[i]-b[i])*<span class="number">6</span> + <span class="number">5</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">t += (b[i]-a[i])*<span class="number">4</span> + <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line">b[i + <span class="number">1</span>] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; t&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="1021-斐波那契"><a href="#1021-斐波那契" class="headerlink" title="1021 斐波那契"></a>1021 斐波那契</h3><p><strong>Problem Description</strong><br>还有另一种斐波那契数：F（0）= 7，F（1）= 11，F（n）= F（n-1）+ F（n-2）（n&gt; = 2）。</p><p><strong>Input</strong><br>输入由一系列行组成，每行包含一个整数 n。（n &lt;1,000,000）。</p><p><strong>Output</strong><br>如果 3 被 F（n）均分，则打印单词”yes”。</p><p>如果没有，则打印单词“ no”。</p><p><strong>Sample Input</strong><br>0<br>1<br>2<br>3<br>4<br>5</p><p><strong>Sample Output</strong><br>no<br>no<br>yes<br>no<br>no<br>no</p><div class="note success no-icon flat"><p>技巧：本题需要自己找规律，因为到最后数字变得很大,long long 数组都会溢出，所以它是找规律题 f(2)、f(6)、f(10)、f(14)、f(18)、f(22)、f(26)、f(30)……都是 yes</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n) == <span class="number">1</span>)  &#123;</span><br><span class="line"><span class="keyword">if</span>((n+<span class="number">2</span>) % <span class="number">4</span> == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;yes&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;no&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2000-字母-ASCII-大小排序"><a href="#2000-字母-ASCII-大小排序" class="headerlink" title="2000 字母 ASCII 大小排序"></a>2000 字母 ASCII 大小排序</h3><p><strong>Problem Description</strong><br>输入三个字符后，按各字符的 ASCII 码从小到大的顺序输出这三个字符。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，有三个字符组成，之间无空格。</p><p><strong>Output</strong><br>对于每组输入数据，输出一行，字符中间用一个空格分开。</p><p><strong>Sample Input</strong><br>qwe<br>asd<br>zxc</p><p><strong>Sample Output</strong><br>e q w<br>a d s<br>c x z</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">3</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; a) &#123;</span><br><span class="line">sort(a, a + <span class="keyword">sizeof</span>(a));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; a[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i) &#123;<span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2001-计算两点间距"><a href="#2001-计算两点间距" class="headerlink" title="2001 计算两点间距"></a>2001 计算两点间距</h3><p><strong>Problem Description</strong><br>输入两点坐标（X1,Y1）,（X2,Y2）,计算并输出两点间的距离。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，由 4 个实数组成，分别表示 x1,y1,x2,y2,数据之间用空格隔开。</p><p><strong>Output</strong><br>对于每组输入数据，输出一行，结果保留两位小数。</p><p><strong>Sample Input</strong><br>0 0 0 1<br>0 1 1 0</p><p><strong>Sample Output</strong><br>1.00<br>1.41</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x1, y1, x2, y2;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; x1&gt;&gt; y1&gt;&gt; x2&gt;&gt; y2) &#123;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="built_in">sqrt</span>((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2002-计算球体积"><a href="#2002-计算球体积" class="headerlink" title="2002 计算球体积"></a>2002 计算球体积</h3><p><strong>Problem Description</strong><br>根据输入的半径值，计算球的体积。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，每行包括一个实数，表示球的半径。</p><p><strong>Output</strong><br>输出对应的球的体积，对于每组输入数据，输出一行，计算结果保留三位小数。</p><p><strong>Sample Input</strong><br>1<br>1.5</p><p><strong>Sample Output</strong><br>4.189<br>14.137</p><div class="note success no-icon flat"><p>提示：#define PI 3.1415927</p></div><div class="note warning no-icon flat"><p>注意：球体积公式是 4/3<em>PI</em>R^3</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.1415927</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> r;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; r) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>, (<span class="built_in">pow</span>(r, <span class="number">3</span>)*PI*<span class="number">4</span>/<span class="number">3</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2003-求绝对值"><a href="#2003-求绝对值" class="headerlink" title="2003 求绝对值"></a>2003 求绝对值</h3><p><strong>Problem Description</strong><br>求实数的绝对值。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，每行包含一个实数。</p><p><strong>Output</strong><br>对于每组输入数据，输出它的绝对值，要求每组数据输出一行，结果保留两位小数。</p><p><strong>Sample Input</strong><br>123<br>-234.00</p><p><strong>Sample Output</strong><br>123.00<br>234.00</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> x;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; x) &#123;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="built_in">fabs</span>(x);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2004-成绩等级"><a href="#2004-成绩等级" class="headerlink" title="2004 成绩等级"></a>2004 成绩等级</h3><p><strong>Problem Description</strong><br>输入一个百分制的成绩 t，将其转换成对应的等级，具体转换规则如下：<br>90~100 为 A;</p><p>80~89 为 B;</p><p>70~79 为 C;</p><p>60~69 为 D;</p><p>0~59 为 E;</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，由一个整数组成。</p><p><strong>Output</strong><br>对于每组输入数据，输出一行。如果输入数据不在 0~100 范围内，请输出一行：“Score is error!”。</p><p><strong>Sample Input</strong><br>56<br>67<br>100<br>123</p><p><strong>Sample Output</strong><br>E<br>D<br>A<br>Score is error!</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; t) &#123;</span><br><span class="line"><span class="keyword">if</span> (t &gt; <span class="number">100</span> || t &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;Score is error!&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt;= <span class="number">90</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;A&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt;= <span class="number">80</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;B&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt;= <span class="number">70</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;C&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (t &gt;= <span class="number">60</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;D&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;E&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2005-第几天"><a href="#2005-第几天" class="headerlink" title="2005 第几天"></a>2005 第几天</h3><p><strong>Problem Description</strong><br>给定一个日期，输出这个日期是该年的第几天。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，数据格式为 YYYY/MM/DD 组成，具体参见 sample input ,另外，可以向你确保所有的输入数据是合法的。</p><p><strong>Output</strong><br>对于每组输入数据，输出一行，表示该日期是该年的第几天。</p><p><strong>Sample Input</strong><br>1985/1/20<br>2006/3/12</p><p><strong>Sample Output</strong><br>20<br>71</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> y, m, d;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; y&gt;&gt; c&gt;&gt; m&gt;&gt; c&gt;&gt; d) &#123;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i == <span class="number">2</span> &amp;&amp; (y % <span class="number">400</span> == <span class="number">0</span> || (y % <span class="number">4</span> == <span class="number">0</span> &amp;&amp; y % <span class="number">100</span> != <span class="number">0</span>))) &#123; <span class="comment">//是否是闰年</span></span><br><span class="line">ans += <span class="number">29</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="number">2</span>) &#123;</span><br><span class="line">ans += <span class="number">28</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (i==<span class="number">4</span> || i==<span class="number">6</span> || i==<span class="number">9</span> || i==<span class="number">11</span>) &#123;</span><br><span class="line">ans += <span class="number">30</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">ans += <span class="number">31</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; ans + d&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2006-求奇数的乘积"><a href="#2006-求奇数的乘积" class="headerlink" title="2006 求奇数的乘积"></a>2006 求奇数的乘积</h3><p><strong>Problem Description</strong><br>给你 n 个整数，求他们中所有奇数的乘积。</p><p><strong>Input</strong><br>输入数据包含多个测试实例，每个测试实例占一行，每行的第一个数为 n，表示本组数据一共有 n 个，接着是 n 个整数，你可以假设每组数据必定至少存在一个奇数。</p><p><strong>Output</strong><br>输出每组数中的所有奇数的乘积，对于测试实例，输出一行。</p><p><strong>Sample Input</strong><br>3 1 2 3<br>4 2 3 4 5</p><p><strong>Sample Output</strong><br>3<br>15</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a;</span><br><span class="line"><span class="keyword">if</span> (a % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">ans *= a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; ans&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2007-平方和与立方和"><a href="#2007-平方和与立方和" class="headerlink" title="2007 平方和与立方和"></a>2007 平方和与立方和</h3><p><strong>Problem Description</strong><br>给定一段连续的整数，求出他们中所有偶数的平方和以及所有奇数的立方和。</p><p><strong>Input</strong><br>输入数据包含多组测试实例，每组测试实例包含一行，由两个整数 m 和 n 组成。</p><p><strong>Output</strong><br>对于每组输入数据，输出一行，应包括两个整数 x 和 y，分别表示该段连续的整数中所有偶数的平方和以及所有奇数的立方和。<br>你可以认为 32 位整数足以保存结果。</p><p><strong>Sample Input</strong><br>1 3<br>2 5</p><p><strong>Sample Output</strong><br>4 28<br>20 152</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> x, y, temp;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; x&gt;&gt; y) &#123;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> evenSum = <span class="number">0</span>, oddSum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (x &gt; y) &#123;</span><br><span class="line">temp = x;</span><br><span class="line">x = y;</span><br><span class="line">y = temp;</span><br><span class="line">&#125;  <span class="comment">//注意当题目过不了的时候可以考虑加上这种方法</span></span><br><span class="line"><span class="keyword">for</span> (; x &lt;= y; x++) &#123;</span><br><span class="line"><span class="keyword">if</span> (x%<span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">evenSum += x*x;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">oddSum += x*x*x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; evenSum &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; oddSum&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2008-数值统计"><a href="#2008-数值统计" class="headerlink" title="2008 数值统计"></a>2008 数值统计</h3><p><strong>Problem Description</strong><br>统计给定的 n 个数中，负数、零和正数的个数。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，每行的第一个数是整数 n（n&lt;100），表示需要统计的数值的个数，然后是 n 个实数；如果 n=0，则表示输入结束，该行不做处理。</p><p><strong>Output</strong><br>对于每组输入数据，输出一行 a,b 和 c，分别表示给定的数据中负数、零和正数的个数。</p><p><strong>Sample Input</strong><br>6 0 1 2 3 -1 0<br>5 1 2 3 4 0.5<br>0</p><p><strong>Sample Output</strong><br>1 2 3<br>0 0 5</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">99</span>];</span><br><span class="line"><span class="keyword">int</span> z = <span class="number">0</span>, f = <span class="number">0</span>, l = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">f++;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (a[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">z++;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">l++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; f&lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; l&lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; z&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2009-求数列的和"><a href="#2009-求数列的和" class="headerlink" title="2009 求数列的和"></a>2009 求数列的和</h3><p><strong>Problem Description</strong><br>数列的定义如下：<br>数列的第一项为 n，以后各项为前一项的平方根，求数列的前 m 项的和。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，由两个整数 n（n&lt;10000）和 m(m&lt;1000)组成，n 和 m 的含义如前所述。</p><p><strong>Output</strong><br>对于每组输入数据，输出该数列的和，每个测试实例占一行，要求精度保留 2 位小数。</p><p><strong>Sample Input</strong><br>81 4<br>2 2</p><p><strong>Sample Output</strong><br>94.73<br>3.41</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> n, m;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n&gt;&gt; m) &#123;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line">ans += n;</span><br><span class="line">n = <span class="built_in">sqrt</span>(n);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2010-水仙花数"><a href="#2010-水仙花数" class="headerlink" title="2010 水仙花数"></a>2010 水仙花数</h3><p><strong>Problem Description</strong><br>春天是鲜花的季节，水仙花就是其中最迷人的代表，数学上有个水仙花数，他是这样定义的：<br>“水仙花数”是指一个三位数，它的各位数字的立方和等于其本身，比如：153=1^3+5^3+3^3。<br>现在要求输出所有在 m 和 n 范围内的水仙花数。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，包括两个整数 m 和 n（100&lt;=m&lt;=n&lt;=999）。</p><p><strong>Output</strong><br>对于每个测试实例，要求输出所有在给定范围内的水仙花数，就是说，输出的水仙花数必须大于等于 m,<br>并且小于等于 n，如果有多个，则要求从小到大排列在一行内输出，之间用一个空格隔开;<br>如果给定的范围内不存在水仙花数，则输出 no; 每个测试实例的输出占一行。</p><p><strong>Sample Input</strong><br>100 120<br>300 380</p><p><strong>Sample Output</strong><br>no<br>370 371</p><div class="note warning no-icon flat"><p>注意： 1.每行数据末尾没有空格 2.输出给定范围内的数据</p></div><p><strong>方法一</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; m&gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">int</span> b, s, g, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> temp = n;</span><br><span class="line"><span class="keyword">if</span> (<span class="number">100</span> &lt;= m &amp;&amp; n &lt;= <span class="number">999</span> &amp;&amp; m &lt; n) &#123;</span><br><span class="line"><span class="keyword">for</span> (;m &lt;= n; m++) &#123;  <span class="comment">// 注意小于等于</span></span><br><span class="line">b = m / <span class="number">100</span>;</span><br><span class="line">s = m / <span class="number">10</span> % <span class="number">10</span>;</span><br><span class="line">g = m % <span class="number">100</span> % <span class="number">10</span>;</span><br><span class="line"><span class="keyword">if</span> ((b*b*b + s*s*s + g*g*g) == m) &#123;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; m;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//方法2：通过已知答案来推敲</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n, flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; m&gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">for</span> (; m &lt; n; m++) &#123;</span><br><span class="line"><span class="keyword">if</span> (m==<span class="number">153</span>||m==<span class="number">370</span>||m==<span class="number">371</span>||m==<span class="number">407</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; m&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;no&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2011-多项式求和"><a href="#2011-多项式求和" class="headerlink" title="2011 多项式求和"></a>2011 多项式求和</h3><p><strong>Problem Description</strong><br>多项式的描述如下：<br>1 - 1/2 + 1/3 - 1/4 + 1/5 - 1/6 + …<br>现在请你求出该多项式的前 n 项的和。</p><p><strong>Input</strong><br>输入数据由 2 行组成，首先是一个正整数 m（m&lt;100），表示测试实例的个数，第二行包含 m 个正整数，对于每一个整数(不妨设为 n,n&lt;1000），求该多项式的前 n 项的和。</p><p><strong>Output</strong><br>对于每个测试实例 n，要求输出多项式前 n 项的和。每个测试实例的输出占一行，结果保留 2 位小数。</p><p><strong>Sample Input</strong><br>2<br>1 2</p><p><strong>Sample Output</strong><br>1.00<br>0.50</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; m;</span><br><span class="line"><span class="keyword">while</span> (m--) &#123;</span><br><span class="line"><span class="keyword">double</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">ans = (i % <span class="number">2</span> == <span class="number">0</span>) ? (ans - <span class="number">1.0</span>/i) : (ans + <span class="number">1.0</span>/i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2012-素数判定"><a href="#2012-素数判定" class="headerlink" title="2012 素数判定"></a>2012 素数判定</h3><p><strong>Problem Description</strong><br>对于表达式 n^2 + n + 41，当 n 在（x,y）范围内取整数值时（包括 x, y）(-39&lt;=x&lt;y&lt;=50)，判定该表达式的值是否都为素数。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，由两个整数 x，y 组成，当 x=0,y=0 时，表示输入结束，该行不做处理。</p><p><strong>Output</strong><br>对于每个给定范围内的取值，如果表达式的值都为素数，则输出”OK”,否则请输出“Sorry”,每组输出占一行。</p><p><strong>Sample Input</strong><br>0 1<br>0 0</p><p><strong>Sample Output</strong><br>OK</p><div class="note warning no-icon flat"><p>注意：素数判断只需看 2 ~ √m 之间是否能被整除，能则不是素数</p><p>By the way, 质数又称素数</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> x, y;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; x&gt;&gt; y &amp;&amp; (x || y)) &#123;</span><br><span class="line"><span class="keyword">int</span> ss;  <span class="comment">//素数</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;   <span class="comment">//标志素数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = x; i &lt;= y; i++) &#123;</span><br><span class="line">ss = i*i + i + <span class="number">41</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">2</span>; j &lt;= <span class="built_in">sqrt</span>(ss); j++) &#123;  <span class="comment">//判断素数</span></span><br><span class="line"><span class="keyword">if</span> (ss % j == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;Sorry&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!flag) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;OK&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2013-蟠桃记"><a href="#2013-蟠桃记" class="headerlink" title="2013 蟠桃记"></a>2013 蟠桃记</h3><p><strong>Problem Description</strong><br>喜欢西游记的同学肯定都知道悟空偷吃蟠桃的故事，其实你们是有所不知：悟空是在研究一个数学问题！他研究的问题是蟠桃一共有多少个！<br>当时的情况是这样的：<br>第一天悟空吃掉桃子总数一半多一个，第二天又将剩下的桃子吃掉一半多一个，以后每天吃掉前一天剩下的一半多一个，到第 n 天准备吃的时候只剩下一个桃子。聪明的你，请帮悟空算一下，他第一天开始吃的时候桃子一共有多少个呢？</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，包含一个正整数 n（1&lt;n&lt;30），表示只剩下一个桃子的时候是在第 n 天发生的。</p><p><strong>Output</strong><br>对于每组输入数据，输出第一天开始吃的时候桃子的总数，每个测试实例占一行。</p><p><strong>Sample Input</strong><br>2<br>4</p><p><strong>Sample Output</strong><br>4<br>22</p><blockquote><p>逆向思维(倒放)：猴子每天先吐出一个桃子，然后再吐出 2 倍的桃子</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">int</span> pnum = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line">pnum = <span class="number">2</span> * (pnum + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; pnum&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2014-大赛评分"><a href="#2014-大赛评分" class="headerlink" title="2014 大赛评分"></a>2014 大赛评分</h3><p><strong>Problem Description</strong><br>青年歌手大奖赛中，评委会给参赛选手打分。选手得分规则为去掉最高最低分，然后计算平均分，请编程输出某选手的得分。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，每行的第一个数是 n(2&lt;n&lt;=100)，表示评委的人数，然后是 n 个评委的打分。</p><p><strong>Output</strong><br>对于每组输入数据，输出选手的得分，结果保留 2 位小数，每组输出占一行。</p><p><strong>Sample Input</strong><br>3 99 98 97<br>4 100 99 98 97</p><p><strong>Sample Output</strong><br>98.00<br>98.50</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">double</span> grades[<span class="number">100</span>], avg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; grades[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(grades, grades+n);  <span class="comment">//排序</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n - <span class="number">1</span>; i++) &#123;</span><br><span class="line">avg += grades[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, avg/(n<span class="number">-2</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2015-偶数数列平均值"><a href="#2015-偶数数列平均值" class="headerlink" title="2015 偶数数列平均值"></a>2015 偶数数列平均值</h3><p><strong>Problem Description</strong><br>有一个长度为 n(n&lt;=100)的数列，该数列定义为从 2 开始的递增有序偶数，现在要求你按照顺序每 m 个数求出一个平均值，如果最后不足 m 个，则以实际数量求平均值。编程输出该平均值序列。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，包含两个正整数 n 和 m，n 和 m 的含义如上所述。</p><p><strong>Output</strong><br>对于每组输入数据，输出一个平均值序列，每组输出占一行。</p><p><strong>Sample Input</strong><br>3 2<br>4 2</p><p><strong>Sample Output</strong><br>3 6<br>3 7</p><div class="note warning no-icon flat"><p>注意：用数列的中位数来算均值方便些</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m, a[<span class="number">100</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">a[i] = a[i<span class="number">-1</span>] + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n&gt;&gt; m) &#123;</span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i+=m) &#123;</span><br><span class="line"><span class="keyword">if</span> (n - i &lt; m) &#123;      <span class="comment">//最后数列不足m个</span></span><br><span class="line"><span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span>) &#123;  <span class="comment">//m为偶数</span></span><br><span class="line"><span class="keyword">if</span> (i) &#123;<span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (a[i+(n-i)/<span class="number">2</span>] + a[i])/<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;    <span class="comment">//m为奇数</span></span><br><span class="line"><span class="keyword">if</span> (i) &#123;<span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a[i-((n-i)<span class="number">-1</span>)/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> (m % <span class="number">2</span> == <span class="number">0</span>) &#123;  <span class="comment">//m为偶数</span></span><br><span class="line"><span class="keyword">if</span> (i) &#123;<span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (a[i+m/<span class="number">2</span>] + a[i])/<span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;    <span class="comment">//m为奇数</span></span><br><span class="line"><span class="keyword">if</span> (i) &#123;<span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a[i+(m<span class="number">-1</span>)/<span class="number">2</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2016-数据的交换输出"><a href="#2016-数据的交换输出" class="headerlink" title="2016 数据的交换输出"></a>2016 数据的交换输出</h3><p><strong>Problem Description</strong><br>输入 n(n&lt;100)个数，找出其中最小的数，将它与最前面的数交换后输出这些数。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，每行的开始是一个整数 n，表示这个测试实例的数值的个数，跟着就是 n 个整数。n=0 表示输入的结束，不做处理。</p><p><strong>Output</strong><br>对于每组输入数据，输出交换后的数列，每组输出占一行。</p><p><strong>Sample Input</strong><br>4 2 1 3 4<br>5 5 4 3 2 1<br>0</p><p><strong>Sample Output</strong><br>1 2 3 4<br>1 4 3 2 5</p><div class="note warning no-icon flat"><p>注意：一定要将 flag 初始化，否则 min 一开始就是最小的话，<br>那么 if 就不执行，从而 flag 至始至终没有值， 从而导致 temp 那儿的转化出错</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt; n &amp;&amp; n &amp;&amp; n &lt; <span class="number">100</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>, min, a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a[i];</span><br><span class="line"><span class="keyword">if</span> (!i) &#123;min = a[i];&#125;</span><br><span class="line"><span class="keyword">if</span> (min &gt; a[i]) &#123;</span><br><span class="line">min = a[i];</span><br><span class="line">flag = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = a[<span class="number">0</span>];</span><br><span class="line">a[<span class="number">0</span>] = a[flag];</span><br><span class="line">a[flag] = temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i) &#123;<span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2017-字符串统计"><a href="#2017-字符串统计" class="headerlink" title="2017 字符串统计"></a>2017 字符串统计</h3><p><strong>Problem Description</strong><br>对于给定的一个字符串，统计其中数字字符出现的次数。</p><p><strong>Input</strong><br>输入数据有多行，第一行是一个整数 n，表示测试实例的个数，后面跟着 n 行，每行包括一个由字母和数字组成的字符串。</p><p><strong>Output</strong><br>对于每个测试实例，输出该串中数值的个数，每个输出占一行。</p><p><strong>Sample Input</strong><br>2<br>asdfasdf123123asdfasdf<br>asdf111111111asdfasdfasdf</p><p><strong>Sample Output</strong><br>6<br>9</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">1000</span>];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; a[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[i] &lt;= <span class="string">&#x27;9&#x27;</span> &amp;&amp; a[i] &gt;= <span class="string">&#x27;0&#x27;</span>) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; sum&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2018-母牛的数量"><a href="#2018-母牛的数量" class="headerlink" title="2018 母牛的数量"></a>2018 母牛的数量</h3><p><strong>Problem Description</strong><br>有一头母牛，它每年年初生一头小母牛。每头小母牛从第四个年头开始，每年年初也生一头小母牛。请编程实现在第 n 年的时候，共有多少头母牛？</p><p><strong>Input</strong><br>输入数据由多个测试实例组成，每个测试实例占一行，包括一个整数 n(0&lt;n&lt;55)，n 的含义如题目中描述。<br>n=0 表示输入数据的结束，不做处理。</p><p><strong>Output</strong><br>对于每个测试实例，输出在第 n 年的时候母牛的数量。<br>每个输出占一行。</p><p><strong>Sample Input</strong><br>2<br>4<br>5<br>0</p><p><strong>Sample Output</strong><br>2<br>4<br>6</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line"><span class="comment">// 各年龄牛数的初始化</span></span><br><span class="line"><span class="keyword">int</span> num1 = <span class="number">0</span>; <span class="comment">//1岁的母牛数</span></span><br><span class="line"><span class="keyword">int</span> num2 = <span class="number">0</span>; <span class="comment">//2岁的母牛数</span></span><br><span class="line"><span class="keyword">int</span> num3 = <span class="number">0</span>; <span class="comment">//3岁的母牛数</span></span><br><span class="line"><span class="keyword">int</span> num4 = <span class="number">1</span>; <span class="comment">//4岁及以上的母牛数，可生牛了</span></span><br><span class="line"><span class="keyword">int</span> t1, t2, t3, t4; <span class="comment">//temp</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">t1 = num1;</span><br><span class="line">t2 = num2;</span><br><span class="line">t3 = num3;</span><br><span class="line">t4 = num4;</span><br><span class="line">num1 += t4 - t1; <span class="comment">//num1取决于num4有多少，又因为大了一岁，所以这个年龄区间牛数还要减去原来的</span></span><br><span class="line">num2 += t1 - t2; <span class="comment">//num2取决于num1有多少，同样需要减去原来牛数</span></span><br><span class="line">num3 += t2 - t3; <span class="comment">//以此类推</span></span><br><span class="line">num4 += t3; <span class="comment">//4年及以上不用减去原来的牛数了，扎堆</span></span><br><span class="line">num1 += t3;      <span class="comment">//3岁牛一到4岁就要生一岁的牛，再加t3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; num1 + num2 + num3 + num4&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2019-数列有序"><a href="#2019-数列有序" class="headerlink" title="2019 数列有序"></a>2019 数列有序</h3><p><strong>Problem Description</strong><br>有 n(n&lt;=100)个整数，已经按照从小到大顺序排列好，现在另外给一个整数 m，<br>请将该数插入到序列中，并使新的序列仍然有序。</p><p><strong>Input</strong><br>输入数据包含多个测试实例，每组数据由两行组成，第一行是 n 和 m，<br>第二行是已经有序的 n 个数的数列。n 和 m 同时为 0 标示输入数据的结束，本行不做处理。</p><p><strong>Output</strong><br>对于每个测试实例，输出插入新的元素后的数列。</p><p><strong>Sample Input</strong><br>3 3<br>1 2 4<br>0 0</p><p><strong>Sample Output</strong><br>1 2 3 4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n&gt;&gt; m &amp;&amp; (n || m)) &#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">a[n] = m;</span><br><span class="line">sort(a, a+n+<span class="number">1</span>); <span class="comment">//+1是因为又多了一个m数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i) &#123;<span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2020-绝对值排序"><a href="#2020-绝对值排序" class="headerlink" title="2020 绝对值排序"></a>2020 绝对值排序</h3><p><strong>Problem Description</strong><br>输入 n(n&lt;=100)个整数，按照绝对值从大到小排序后输出。题目保证对于每一个测试实例，所有的数的绝对值都不相等。</p><p><strong>Input</strong><br>输入数据有多组，每组占一行，每行的第一个数字为 n,接着是 n 个整数，n=0 表示输入数据的结束，不做处理。</p><p><strong>Output</strong><br>对于每个测试实例，输出排序后的结果，两个数之间用一个空格隔开。每个测试实例占一行。</p><p><strong>Sample Input</strong><br>3 3 -4 2<br>4 0 1 2 -3<br>0</p><p><strong>Sample Output</strong><br>-4 3 2<br>-3 2 1 0</p><p><strong>方法一</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>], b[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a[i];</span><br><span class="line">b[i] = a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">b[i] = <span class="built_in">abs</span>(b[i]);</span><br><span class="line">&#125;</span><br><span class="line">sort(b, b+n);</span><br><span class="line">reverse(b, b+n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (b[i] == -a[j]) &#123;</span><br><span class="line">b[i] = -b[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">compare</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">abs</span>(a) &gt; <span class="built_in">abs</span>(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">sort(a, a+n, compare);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (i) &#123;<span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2021-发工资"><a href="#2021-发工资" class="headerlink" title="2021 发工资"></a>2021 发工资</h3><p><strong>Problem Description</strong><br>作为杭电的老师，8 号这一天是发工资的日子，财务处的小胡老师最近就在考虑一个问题：<br>如果每个老师的工资额都知道，最少需要准备多少张人民币，才能在给每位老师发工资的时候都不用老师找零呢？<br>这里假设老师的工资都是正整数，单位元，人民币一共有 100 元、50 元、10 元、5 元、2 元和 1 元六种。</p><p><strong>Input</strong><br>输入数据包含多个测试实例，每个测试实例的第一行是一个整数 n（n&lt;100），表示老师的人数，然后是 n 个老师的工资。<br>n=0 表示输入的结束，不做处理。</p><p><strong>Output</strong><br>对于每个测试实例输出一个整数 x,表示至少需要准备的人民币张数。每个输出占一行。</p><p><strong>Sample Input</strong><br>3<br>1 2 3<br>0</p><p><strong>Sample Output</strong><br>4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> (<span class="built_in">cin</span> &gt;&gt; n &amp;&amp; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">0</span>;           <span class="comment">//人民币张数</span></span><br><span class="line">        <span class="keyword">int</span> a[<span class="number">100</span>];            <span class="comment">//老师工资</span></span><br><span class="line">        <span class="keyword">int</span> b, ws, s, w, e, y; <span class="comment">//六种面值的张数</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">            b = a[i] / <span class="number">100</span>;</span><br><span class="line">            ws = a[i] % <span class="number">100</span> / <span class="number">50</span>;</span><br><span class="line">            s = a[i] % <span class="number">100</span> % <span class="number">50</span> / <span class="number">10</span>;</span><br><span class="line">            w = a[i] % <span class="number">100</span> % <span class="number">50</span> % <span class="number">10</span> / <span class="number">5</span>;</span><br><span class="line">            e = a[i] % <span class="number">100</span> % <span class="number">50</span> % <span class="number">10</span> % <span class="number">5</span> / <span class="number">2</span>;</span><br><span class="line">            y = a[i] % <span class="number">100</span> % <span class="number">50</span> % <span class="number">10</span> % <span class="number">5</span> % <span class="number">2</span>;</span><br><span class="line">            num += b + ws + s + w + e + y;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2022-海选女主角"><a href="#2022-海选女主角" class="headerlink" title="2022 海选女主角"></a>2022 海选女主角</h3><p><strong>Problem Description</strong><br>hss 开办了一个女友竞选面试，面试那天，来了 m<em>n 个 MM，站成一个 m</em>n 的队列，hss 的助理团为每个 MM 打了分数，分数都是 32 位有符号整数。如果 MM 不太优秀，分数有可能是负数哦! 奇怪的是，hss 的目的是要选一个面试分数绝对值（必须还是 32 位整数）最大的 MM，差到极点也是好。</p><p><strong>Input</strong><br>输入数据有多组，每组的第一行是两个整数 m 和 n，表示应聘 MM 的总共的行列数，然后是 m 行整数，每行有 n 个，m 和 n 的定义见题目的描述。</p><p><strong>Output</strong><br>对于每组输入数据，输出三个整数 x,y 和 s，分别表示选中的 MM 的行号、列号和分数。<br>note:行号和列号从一开始，如果有多个 MM 的分数绝对值一样，那么输出排在最前面的一个（即行号最小的那个，如果行号相同则取列号最小的那个）。</p><p><strong>Sample Input</strong><br>2 3<br>1 4 -3<br>-7 3 0</p><p><strong>Sample Output</strong><br>2 1 -7</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> m, n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; m&gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">int</span> mm[<span class="number">100</span>][<span class="number">100</span>];</span><br><span class="line"><span class="keyword">int</span> max = <span class="number">0</span>, I, J;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; mm[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">abs</span>(max) &lt; <span class="built_in">abs</span>(mm[i][j])) &#123;</span><br><span class="line">max = mm[i][j];</span><br><span class="line">I = i;</span><br><span class="line">J = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; I+<span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; J+<span class="number">1</span> &lt;&lt; <span class="string">&quot; &quot;</span>&lt;&lt; max&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2023-求平均成绩"><a href="#2023-求平均成绩" class="headerlink" title="2023 求平均成绩"></a>2023 求平均成绩</h3><p><strong>Problem Description</strong><br>假设一个班有 n(n&lt;=50)个学生，每人考 m(m&lt;=5)门课，求每个学生的平均成绩和每门课的平均成绩，并输出各科成绩均大于等于平均成绩的学生数量。</p><p>Inp<br>输入数据有多个测试实例，每个测试实例的第一行包括两个整数 n 和 m，分别表示学生数和课程数。然后是 n 行数据，每行包括 m 个整数（即：考试分数）。</p><p><strong>Output</strong><br>对于每个测试实例，输出 3 行数据，第一行包含 n 个数据，表示 n 个学生的平均成绩，结果保留两位小数；第二行包含 m 个数据，表示 m 门课的平均成绩，结果保留两位小数；第三行是一个整数，表示该班级中各科成绩均大于等于平均成绩的学生数量。<br>每个测试实例后面跟一个空行。</p><p><strong>Sample Input</strong><br>2 2<br>5 10<br>10 20</p><p><strong>Sample Output</strong><br>7.50 15.00<br>7.50 15.00<br>1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n&gt;&gt; m) &#123;</span><br><span class="line"><span class="keyword">double</span> Savg[<span class="number">50</span>], Cavg[<span class="number">5</span>];  <span class="comment">//数组大小要大于题目给定的极值</span></span><br><span class="line"><span class="keyword">int</span> sc[<span class="number">50</span>][<span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;  <span class="comment">//各科成绩均 &gt;= 平均成绩的学生数量</span></span><br><span class="line"><span class="built_in">memset</span>(Savg, <span class="number">0</span>, <span class="keyword">sizeof</span>(Savg));</span><br><span class="line"><span class="built_in">memset</span>(Cavg, <span class="number">0</span>, <span class="keyword">sizeof</span>(Cavg));</span><br><span class="line"></span><br><span class="line"><span class="comment">//输入每名学生成绩</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; sc[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求每位同学的平均成绩</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">//学生</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;  <span class="comment">//课程</span></span><br><span class="line">Savg[i] += sc[i][j];  <span class="comment">//把第i位同学所有课程成绩累加</span></span><br><span class="line">Cavg[j] += sc[i][j];  <span class="comment">//把第j门课程所有同学成绩累加</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Savg[i] /= (m*<span class="number">1.0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>, Savg[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求每们课的平均成绩</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">Cavg[i] /= (n*<span class="number">1.0</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf&quot;</span>, Cavg[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//求各科成绩均 &gt;= 平均成绩的学生数量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123; <span class="comment">//学生</span></span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">1</span>;  <span class="comment">//1代表符合，0代表不符合</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; m; j++) &#123;  <span class="comment">//课程</span></span><br><span class="line"><span class="keyword">if</span> (sc[i][j] &lt; Cavg[j]) &#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123;</span><br><span class="line">sum++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; sum&lt;&lt; <span class="built_in">endl</span>&lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//注意题目要求：每个实例后跟一个空行</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2024-C-语言合法标识符判断"><a href="#2024-C-语言合法标识符判断" class="headerlink" title="2024 C 语言合法标识符判断"></a>2024 C 语言合法标识符判断</h3><p><strong>Problem Description</strong><br>输入一个字符串，判断其是否是 C 的合法标识符。</p><p><strong>Input</strong><br>输入数据包含多个测试实例，数据的第一行是一个整数 n，表示测试实例的个数，<br>然后是 n 行输入数据，每行是一个长度不超过 50 的字符串。</p><p><strong>Output</strong><br>对于每组输入数据，输出一行。如果输入数据是 C 的合法标识符，则输出”yes”，否则，输出“no”。</p><p><strong>Sample Input</strong><br>3<br>12ajf<br>fi8x_a<br>ff ai_2</p><p><strong>Sample Output</strong><br>no<br>yes<br>no</p><div class="note success no-icon flat"><p>提示：合法标识符由字母、下划线、数字这三个方面组成，但开头必须是字母或下划线</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    getchar(); <span class="comment">//把无用的回车字符吸收掉</span></span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="keyword">char</span> s[<span class="number">50</span>];</span><br><span class="line">        <span class="keyword">int</span> flag = <span class="number">1</span>; <span class="comment">// 0不满足，1满足</span></span><br><span class="line">        gets(s);</span><br><span class="line">        <span class="keyword">if</span> ((s[<span class="number">0</span>] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[<span class="number">0</span>] &lt;= <span class="string">&#x27;z&#x27;</span>) || (s[<span class="number">0</span>] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[<span class="number">0</span>] &lt;= <span class="string">&#x27;Z&#x27;</span>) ||</span><br><span class="line">            s[<span class="number">0</span>] == <span class="string">&#x27;_&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (!((s[i] &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;z&#x27;</span>) ||</span><br><span class="line">                      (s[i] &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;Z&#x27;</span>) || (s[i] == <span class="string">&#x27;_&#x27;</span>) ||</span><br><span class="line">                      (s[i] &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; s[i] &lt;= <span class="string">&#x27;9&#x27;</span>))) &#123;</span><br><span class="line">                    flag = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            flag = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2025-查找最大字母"><a href="#2025-查找最大字母" class="headerlink" title="2025 查找最大字母"></a>2025 查找最大字母</h3><p><strong>Problem Description</strong><br>对于输入的每个字符串，查找其中的最大字母，在该字母后面插入字符串“(max)”。</p><p><strong>Input</strong><br>输入数据包括多个测试实例，每个实例由一行长度不超过 100 的字符串组成，字符串仅由大小写字母构成。</p><p><strong>Output</strong><br>对于每个测试实例输出一行字符串，输出的结果是插入字符串“(max)”后的结果，<br>如果存在多个最大的字母，就在每一个最大字母后面都插入”(max)”。</p><p><strong>Sample Input</strong><br>abcdefgfedcba<br>xxxxx</p><p><strong>Sample Output</strong><br>abcdefg(max)fedcba<br>x(max)x(max)x(max)x(max)x(max)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; a) &#123;</span><br><span class="line"><span class="keyword">char</span> max = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; a[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (max &lt; a[i]) &#123;</span><br><span class="line">max = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; a[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a[i];</span><br><span class="line"><span class="keyword">if</span> (max == a[i]) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;(max)&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2026-首字母变大写"><a href="#2026-首字母变大写" class="headerlink" title="2026 首字母变大写"></a>2026 首字母变大写</h3><p><strong>Problem Description</strong><br>输入一个英文句子，将每个单词的第一个字母改成大写字母。</p><p><strong>Input</strong><br>输入数据包含多个测试实例，每个测试实例是一个长度不超过 100 的英文句子，占一行。</p><p><strong>Output</strong><br>请输出按照要求改写后的英文句子。</p><p><strong>Sample Input</strong><br>i like acm<br>i want to get an accepted</p><p><strong>Sample Output</strong><br>I Like Acm<br>I Want To Get An Accepted</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">while</span>(gets(s)) &#123;</span><br><span class="line">s[<span class="number">0</span>] -= <span class="number">32</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; s[i] != <span class="string">&#x27;\0&#x27;</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (s[i] == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">s[i+<span class="number">1</span>] -= <span class="number">32</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; s&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2027-统计元音"><a href="#2027-统计元音" class="headerlink" title="2027 统计元音"></a>2027 统计元音</h3><p><strong>Problem Description</strong><br>统计每个元音字母在字符串中出现的次数。</p><p><strong>Input</strong><br>输入数据首先包括一个整数 n，表示测试实例的个数，<br>然后是 n 行长度不超过 100 的字符串。</p><p><strong>Output</strong><br>对于每个测试实例输出 5 行，格式如下：<br>a:num1<br>e:num2<br>i:num3<br>o:num4<br>u:num5<br>多个测试实例之间由一个空行隔开。</p><p>请特别注意：最后一块输出后面没有空行：）</p><p><strong>Sample Input</strong><br>2<br>aeiou<br>my name is ignatius</p><p><strong>Sample Output</strong><br>a:1<br>e:1<br>i:1<br>o:1<br>u:1</p><p>a:2<br>e:1<br>i:3<br>o:0<br>u:1</p><div class="note warning no-icon flat"><p>注意：定义变量时变量名不要搞重复了</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, a, e, i, o, u;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        a = e = i = o = u = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">char</span> c[<span class="number">100</span>];</span><br><span class="line">        gets(c);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; c[k] != <span class="string">&#x27;\0&#x27;</span>; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span> (c[k] == <span class="string">&#x27;a&#x27;</span>) &#123;</span><br><span class="line">                a++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c[k] == <span class="string">&#x27;e&#x27;</span>) &#123;</span><br><span class="line">                e++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c[k] == <span class="string">&#x27;i&#x27;</span>) &#123;</span><br><span class="line">                i++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c[k] == <span class="string">&#x27;o&#x27;</span>) &#123;</span><br><span class="line">                o++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (c[k] == <span class="string">&#x27;u&#x27;</span>) &#123;</span><br><span class="line">                u++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;a:&quot;</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;e:&quot;</span> &lt;&lt; e &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;i:&quot;</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;o:&quot;</span> &lt;&lt; o &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;u:&quot;</span> &lt;&lt; u &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">if</span> (n) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2028-最小公倍数"><a href="#2028-最小公倍数" class="headerlink" title="2028 最小公倍数"></a>2028 最小公倍数</h3><p><strong>Problem Description</strong><br>求 n 个数的最小公倍数。</p><p><strong>Input</strong><br>输入包含多个测试实例，每个测试实例的开始是一个正整数 n，然后是 n 个正整数。</p><p><strong>Output</strong><br>为每组测试数据输出它们的最小公倍数，每个测试实例的输出占一行。你可以假设最后的输出是一个 32 位的整数。</p><p><strong>Sample Input</strong><br>2 4 6<br>3 2 5 7</p><p><strong>Sample Output</strong><br>12<br>70</p><div class="note success no-icon flat"><p>提示：最小公倍数为<strong>俩数之积除它们的最大公约数</strong>，而最大公约数采用<strong>辗转相除法</strong>。</p><p><strong>辗转相除法 思路</strong>：</p><p>有两整数 a 和 b</p><ol><li>a%b 得余数 c</li><li>若 c=0，则 b 即为两数的最大公约数</li><li>若 c≠0，则 a=b，b=c，再回去执行步骤 1</li></ol></div><blockquote><p>本题 <code>a = a / divisor(a, b) * b</code> 这个地方，OJ 只能让 b 在后面乘才能通过，终于想明白了，因为如果 b 先乘，可能数字会越界，所以先除，数变小了再乘，细节。。。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">divisor</span> <span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;  <span class="comment">//用来求最大公约数，运用到了递归</span></span><br><span class="line"><span class="keyword">if</span> (b == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> divisor(b, a % b);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; b;</span><br><span class="line">a = a / divisor(a, b) * b; <span class="comment">//每一次和新输入的数进行求最小公倍数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2029-回文数（简单版）"><a href="#2029-回文数（简单版）" class="headerlink" title="2029 回文数（简单版）"></a>2029 回文数（简单版）</h3><p><strong>Problem Description</strong><br>“回文串”是一个正读和反读都一样的字符串，比如“level”或者“noon”等等就是回文串。<br>请写一个程序判断读入的字符串是否是“回文”。</p><p><strong>Input</strong><br>输入包含多个测试实例，输入数据的第一行是一个正整数 n,表示测试实例的个数，后面紧跟着是 n 个字符串。</p><p><strong>Output</strong><br>如果一个字符串是回文串，则输出”yes”,否则输出”no”.</p><p><strong>Sample Input</strong><br>4<br>level<br>abcde<br>noon<br>haha</p><p><strong>Sample Output</strong><br>yes<br>no<br>yes<br>no</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">string</span> str, s;</span><br><span class="line">    getchar();</span><br><span class="line">    <span class="keyword">while</span> (n--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; str;</span><br><span class="line">        s = str;</span><br><span class="line">        reverse(str.begin(), str.end());</span><br><span class="line">        <span class="keyword">if</span> (str == s) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2030-汉字统计"><a href="#2030-汉字统计" class="headerlink" title="2030 汉字统计"></a>2030 汉字统计</h3><p><strong>Problem Description</strong><br>统计给定文本文件中汉字的个数。</p><p><strong>Input</strong><br>输入文件首先包含一个整数 n，表示测试实例的个数，然后是 n 段文本。</p><p><strong>Output</strong><br>对于每一段文本，输出其中的汉字的个数，每个测试实例的输出占一行。</p><p>[提示:]从汉字机内码的特点考虑~</p><p><strong>Sample Input</strong><br>2<br>WaHaHa! WaHaHa! 今年过节不说话要说只说普通话 WaHaHa! WaHaHa!<br>马上就要期末考试了 Are you ready?</p><p><strong>Sample Output</strong><br>14<br>9</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, count;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; n;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">char</span> c;</span><br><span class="line">count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> ((c = getchar()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (c &lt; <span class="number">0</span>) &#123;  <span class="comment">//汉字ASCii码小于0</span></span><br><span class="line">count++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; count / <span class="number">2</span> &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//因为汉字有2个字节，所以除以2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2032-杨辉三角打印"><a href="#2032-杨辉三角打印" class="headerlink" title="2032 杨辉三角打印"></a>2032 杨辉三角打印</h3><p><strong>Problem Description</strong><br>还记得中学时候学过的杨辉三角吗？具体的定义这里不再描述，你可以参考以下的图形：<br>1<br>1 1<br>1 2 1<br>1 3 3 1<br>1 4 6 4 1<br>1 5 10 10 5 1</p><p><strong>Input</strong><br>输入数据包含多个测试实例，每个测试实例的输入只包含一个正整数 n（1&lt;=n&lt;=30），表示将要输出的杨辉三角的层数。</p><p><strong>Output</strong><br>对应于每一个输入，请输出相应层数的杨辉三角，每一层的整数之间用一个空格隔开，每一个杨辉三角后面加一个空行。</p><p><strong>Sample Input</strong><br>2 3</p><p><strong>Sample Output</strong><br>1<br>1 1</p><p>1<br>1 1<br>1 2 1</p><div class="note warning no-icon flat"><p>注意：</p><ol><li>不要用阶乘的方式，因为容易超出字节长度。</li><li>每行结尾不要有空格</li></ol></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n, i, j;</span><br><span class="line"><span class="keyword">int</span> yhsj[<span class="number">30</span>][<span class="number">30</span>];</span><br><span class="line">yhsj[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">yhsj[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">yhsj[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">2</span>; i &lt; <span class="number">30</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt;= i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span> || j == i) &#123;</span><br><span class="line">yhsj[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">yhsj[i][j] = yhsj[i<span class="number">-1</span>][j] + yhsj[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; yhsj[i][j]&lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; yhsj[i][j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2035-A-B"><a href="#2035-A-B" class="headerlink" title="2035 A^B"></a>2035 A^B</h3><p><strong>Problem Description</strong><br>求 A^B 的最后三位数表示的整数。<br>说明：A^B 的含义是“A 的 B 次方”</p><p><strong>Input</strong><br>输入数据包含多个测试实例，每个实例占一行，由两个正整数 A 和 B 组成（1&lt;=A,B&lt;=10000），<br>如果 A=0, B=0，则表示输入数据的结束，不做处理。</p><p><strong>Output</strong><br>对于每个测试实例，请输出 A^B 的最后三位表示的整数，每个输出占一行。</p><p><strong>Sample Input</strong><br>2 3<br>12 6<br>6789 10000<br>0 0</p><p><strong>Sample Output</strong><br>8<br>984<br>1</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> A, B;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; A&gt;&gt; B &amp;&amp; A &amp;&amp; B) &#123;</span><br><span class="line"><span class="keyword">int</span> ans = A;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; B - <span class="number">1</span>; i++) &#123;</span><br><span class="line">ans = (ans * A) % <span class="number">1000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; ans&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2039-三角形"><a href="#2039-三角形" class="headerlink" title="2039 三角形"></a>2039 三角形</h3><p><strong>Problem Description</strong><br>给定三条边，请你判断一下能不能组成一个三角形。</p><p><strong>Input</strong><br>输入数据第一行包含一个数 M，接下有 M 行，每行一个实例，包含三个正数 A,B,C。其中 A,B,C &lt;1000;</p><p><strong>Output</strong><br>对于每个测试实例，如果三条边长 A,B,C 能组成三角形的话，输出 YES，否则 NO。</p><p><strong>Sample Input</strong><br>2<br>1 2 3<br>2 2 2</p><p><strong>Sample Output</strong><br>NO<br>YES</p><div class="note warning no-icon flat"><p>注意：ABC 的描述是正数(用 double)，别理解成整数了(不用 int)</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> M;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; M;</span><br><span class="line"><span class="keyword">while</span> (M--) &#123;</span><br><span class="line"><span class="keyword">double</span> A, B, C;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; A&gt;&gt; B&gt;&gt; C;</span><br><span class="line"><span class="keyword">if</span> ((A+B)&gt;C &amp;&amp; (A+C)&gt;B &amp;&amp; (B+C)&gt;A</span><br><span class="line">&amp;&amp; A&lt;<span class="number">1000</span> &amp;&amp; B&lt;<span class="number">1000</span> &amp;&amp; C&lt;<span class="number">1000</span></span><br><span class="line">&amp;&amp; A&gt;<span class="number">0</span> &amp;&amp; B&gt;<span class="number">0</span> &amp;&amp; C&gt;<span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;YES&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;NO&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2040-亲和数"><a href="#2040-亲和数" class="headerlink" title="2040 亲和数"></a>2040 亲和数</h3><p><strong>Problem Description</strong><br>古希腊数学家毕达哥拉斯在自然数研究中发现，220 的所有真约数(即不是自身的约数)之和为：<br>1+2+4+5+10+11+20+22+44+55+110 ＝ 284。<br>而 284 的所有真约数为 1、2、4、71、 142，加起来恰好为 220。人们对这样的数感到很惊奇，并称之为亲和数。<br>一般地讲，如果两个数中任何一个数都是另一个数的真约数之和，则这两个数就是亲和数。<br>你的任务就编写一个程序，判断给定的两个数是否是亲和数</p><p><strong>Input</strong><br>输入数据第一行包含一个数 M，接下有 M 行，每行一个实例,包含两个整数 A,B； 其中 0 &lt;= A,B &lt;= 600000 ;</p><p><strong>Output</strong><br>对于每个测试实例，如果 A 和 B 是亲和数的话输出 YES，否则输出 NO。</p><p><strong>Sample Input</strong><br>2<br>220 284<br>100 200</p><p><strong>Sample Output</strong><br>YES<br>NO</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; n;</span><br><span class="line"><span class="keyword">while</span> (n--) &#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2</span>], sum0, sum1;</span><br><span class="line">sum0 = sum1 = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a[<span class="number">0</span>]&gt;&gt; a[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">0</span>] / <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">0</span>] % i == <span class="number">0</span>) &#123;</span><br><span class="line">sum0 += i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a[<span class="number">1</span>] / <span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[<span class="number">1</span>] % i == <span class="number">0</span>) &#123;</span><br><span class="line">sum1 += i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (sum1==a[<span class="number">0</span>] &amp;&amp; sum0==a[<span class="number">1</span>]) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2042-老汉付过路费"><a href="#2042-老汉付过路费" class="headerlink" title="2042 老汉付过路费"></a>2042 老汉付过路费</h3><p><strong>Problem Description</strong><br>徐老汉带着一群羊准备到另一个地方卖掉，路途有很多路口收费站，由于徐老汉没钱，收费员就将他的羊拿走一半，<br>看到老汉泪水涟涟，心疼又还给老汉一只。巧的是，后面每过一个收费站，都是拿走当时羊的一半，<br>然后退还一只，等到老汉到达市场，就只剩下 3 只羊了，你能帮忙算一下老汉最初有多少只羊吗？</p><p><strong>Input</strong><br>输入数据第一行是一个整数 N，下面由 N 行组成，每行包含一个整数 a(0&lt;a&lt;=30),表示收费站的数量。</p><p><strong>Output</strong><br>对于每个测试实例，请输出最初的羊的数量,每个测试实例的输出占一行。</p><p><strong>Sample Input</strong><br>2<br>1<br>2</p><p><strong>Sample Output</strong><br>4<br>6</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">station</span><span class="params">(<span class="keyword">int</span> sheep, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= a; i++) &#123;</span><br><span class="line">        sheep = <span class="number">2</span> * (sheep - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sheep;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> N, a, sheep = <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">while</span> (N--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; station(sheep, a) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2043-判断安全密码"><a href="#2043-判断安全密码" class="headerlink" title="2043 判断安全密码"></a>2043 判断安全密码</h3><p><strong>Problem Description</strong><br>首先，我们要设一个安全的密码。那什么样的密码才叫安全的呢？<br>一般来说一个比较安全的密码至少应该满足下面两个条件：<br>(1)密码长度大于等于 8，且不要超过 16。<br>(2)密码中的字符应该来自下面“字符类别”中四组中的至少三组。<br>这四个字符类别分别为： 1.大写字母：A,B,C…Z; 2.小写字母：a,b,c…z; 3.数字：0,1,2…9; 4.特殊符号：~,!,@,#,$,%,^;</p><p>给你一个密码，你的任务就是判断它是不是一个安全的密码。</p><p><strong>Input</strong><br>输入数据第一行包含一个数 M，接下有 M 行，每行一个密码（长度最大可能为 50），密码仅包括上面的四类字符。</p><p><strong>Output</strong><br>对于每个测试实例，判断这个密码是不是一个安全的密码，是的话输出 YES，否则输出 NO。</p><p><strong>Sample Input</strong><br>3<br>a1b2c3d4<br>Linle@ACM<br>^~^@^@!%</p><p><strong>Sample Output</strong><br>NO<br>YES<br>NO</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> M;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; M;</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">while</span> (M--) &#123;</span><br><span class="line"><span class="keyword">char</span> pwd;</span><br><span class="line"><span class="keyword">int</span> a, b, c, d, num, flag;</span><br><span class="line">a = b = c = d = num = <span class="number">0</span>;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> ((pwd = getchar()) != <span class="string">&#x27;\n&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (pwd &gt;= <span class="string">&#x27;A&#x27;</span> &amp;&amp; pwd &lt;= <span class="string">&#x27;Z&#x27;</span>) &#123;</span><br><span class="line">a = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pwd &gt;= <span class="string">&#x27;a&#x27;</span> &amp;&amp; pwd &lt;= <span class="string">&#x27;z&#x27;</span>) &#123;</span><br><span class="line">b = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pwd &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; pwd &lt;= <span class="string">&#x27;9&#x27;</span>) &#123;</span><br><span class="line">c = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (pwd == <span class="string">&#x27;~&#x27;</span> || pwd == <span class="string">&#x27;!&#x27;</span> || pwd == <span class="string">&#x27;@&#x27;</span></span><br><span class="line">|| pwd == <span class="string">&#x27;#&#x27;</span> || pwd == <span class="string">&#x27;$&#x27;</span> || pwd == <span class="string">&#x27;%&#x27;</span> || pwd == <span class="string">&#x27;^&#x27;</span>) &#123;</span><br><span class="line">d = <span class="number">1</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;NO&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">num++; <span class="comment">// 统计密码长度</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag) &#123; <span class="comment">// flag为0则说明之前已经打印了NO，无需在判断了</span></span><br><span class="line"><span class="keyword">if</span> (a + b + c + d &gt;= <span class="number">3</span> &amp;&amp; num &gt;= <span class="number">8</span> &amp;&amp; num &lt;= <span class="number">16</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;YES&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;NO&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2055-一个简单的问题"><a href="#2055-一个简单的问题" class="headerlink" title="2055 一个简单的问题"></a>2055 一个简单的问题</h3><p>问题描述<br>我们定义 f（A）= 1，f（a）= -1，f（B）= 2，f（b）= -2，… f（Z）= 26，f（z）= -26;<br>给您一个字母 x 和一个数字 y，您应该输出 y + f（x）的结果。</p><p>输入项<br>第一行包含一个数字 T，然后是 T 行，每行是一个 case。每个 case 包含一个字母和一个数字。</p><p>输出量<br>对于每种情况，您应将 y + f（x）的结果放在一行上。</p><p>样本输入<br>6<br>R 1<br>P 2<br>G 3<br>r 1<br>p 2<br>g 3</p><p>样本输出<br>19<br>18<br>10<br>-17<br>-14<br>-4</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> length 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">a += <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (a &gt;= <span class="number">97</span>) &#123;</span><br><span class="line">a = <span class="number">96</span> - a;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">a -= <span class="number">64</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; T;</span><br><span class="line"><span class="keyword">char</span> ltr[length];</span><br><span class="line"><span class="keyword">int</span> num[length];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; ltr[i]&gt;&gt; num[i];  <span class="comment">//字母和数字都输入进去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; T; i++) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; num[i] + f(ltr[i])&lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//计算结果</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2070-斐波那契数"><a href="#2070-斐波那契数" class="headerlink" title="2070 斐波那契数"></a>2070 斐波那契数</h3><p>问题描述<br>您对此问题的目标是开发一个程序，该程序将生成一个斐波纳契数。fibbonacci 函数的定义如下：<br>f（0）= 0<br>f（1）= 1<br>f（n）= f（n-1）+ f（n-2）<br>您的程序应该能够处理 n 中的 n 值。范围从 0 到 50。</p><p>输入项<br>每个测试用例在一行中由一个整数 n 组成，其中 0≤n≤50。输入以-1 终止。</p><p>输出量<br>针对每个测试用例，在一行中打印出答案。</p><p>样本输入<br>3<br>4<br>5<br>-1</p><p>样本输出<br>2<br>3<br>5</p><div class="note warning no-icon flat"><p>注意：函数返回值也要是 long long 型</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[<span class="number">51</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="number">50</span>; i++) &#123;  <span class="comment">//斐波那契数组</span></span><br><span class="line">a[i] = a[i<span class="number">-1</span>] + a[i<span class="number">-2</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n &amp;&amp; n != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a[n]&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2071-最大身高"><a href="#2071-最大身高" class="headerlink" title="2071 最大身高"></a>2071 最大身高</h3><p>问题描述<br>班上有一些学生，你能帮助老师找到最高的学生吗？</p><p>输入项<br>有一些情况。第一行包含一个整数 t，表示情况；每个案例的整数 n（1≤n≤100），后跟 n 个学生的身高。</p><p>输出量<br>对于每种情况，输出的最高高度均为两个十进制小数点的高度；</p><p>样本输入<br>2<br>3 170.00 165.00 180.00<br>4 165.00 182.00 172.00 160.00</p><p>样本输出<br>180.00<br>182.00</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> t, n;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; t;</span><br><span class="line"><span class="keyword">while</span> (t-- &amp;&amp; <span class="built_in">cin</span>&gt;&gt; n) &#123;</span><br><span class="line"><span class="keyword">double</span> a[<span class="number">100</span>], max;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">max = a[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (max &lt; a[i]) &#123;</span><br><span class="line">max = a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.2lf\n&quot;</span>, max);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2073-无限的路"><a href="#2073-无限的路" class="headerlink" title="2073 无限的路"></a>2073 无限的路</h3><p>甜甜从小就喜欢画图画，最近他买了一支智能画笔，由于刚刚接触，<br>所以甜甜只会用它来画直线，于是他就在平面直角坐标系中画出如下的图形：<br>如图（2073 无限的路.jpg）<br>甜甜的好朋友蜜蜜发现上面的图还是有点规则的，于是他问甜甜：<br>在你画的图中，我给你两个点，请你算一算连接两点的折线长度（即沿折线走的路线长度）吧。</p><p><strong>Input</strong><br>第一个数是正整数 N（≤100）。代表数据的组数。<br>每组数据由四个非负整数组成 x1，y1，x2，y2；所有的数都不会大于 100。</p><p><strong>Output</strong><br>对于每组数据，输出两点(x1,y1),(x2,y2)之间的折线距离。注意输出结果精确到小数点后 3 位。</p><p><strong>Sample Input</strong><br>5<br>0 0 0 1<br>0 0 1 0<br>2 3 3 1<br>99 99 9 9<br>5 5 5 5</p><p><strong>Sample Output</strong><br>1.000<br>2.414<br>10.646<br>54985.047<br>0.000</p><div class="note success no-icon flat"><p>思路：先算出每个点到原点的距离，然后再相减。在算点到原点距离时，要将斜率为-1 的线和非-1 的线分开算，最后加在一起。</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">fun</span><span class="params">(<span class="keyword">double</span> a, <span class="keyword">double</span> b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">double</span> len = <span class="number">0</span>;</span><br><span class="line">n = a + b;  <span class="comment">//可称为截距</span></span><br><span class="line"><span class="comment">// 斜率为-1的线的长度</span></span><br><span class="line">len = n * (n - <span class="number">1</span>) / <span class="number">2</span> * <span class="built_in">sqrt</span>(<span class="number">2</span>);</span><br><span class="line">len += a * <span class="built_in">sqrt</span>(<span class="number">2</span>);</span><br><span class="line"><span class="comment">// 斜率为非-1的线的长度</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">len += <span class="built_in">sqrt</span>(i*i + (i - <span class="number">1</span>)*(i - <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> len;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; N;</span><br><span class="line"><span class="keyword">while</span> (N--) &#123;</span><br><span class="line"><span class="keyword">int</span> x1, y1, x2, y2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; x1&gt;&gt; y1&gt;&gt; x2&gt;&gt; y2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.3lf\n&quot;</span>, <span class="built_in">fabs</span>(fun(x1, y1) - fun(x2, y2)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2075-A-B"><a href="#2075-A-B" class="headerlink" title="2075 A%B"></a>2075 A%B</h3><p><strong>Problem Description</strong><br>正整数 A 是否能被正整数 B 整除?</p><p><strong>Input</strong><br>输入数据的第一行是一个数据 T，表示有 T 组数据。<br>每组数据有两个正整数 A 和 B(A,B&lt;10^9)。</p><p><strong>Output</strong><br>对于每组输入数据，输出”YES”表示可以被整除，”NO”表示不能被整除。</p><p><strong>Sample Input</strong><br>2<br>4 2<br>5 3</p><p><strong>Sample Output</strong><br>YES<br>NO</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T, a, b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a&gt;&gt; b;</span><br><span class="line"><span class="keyword">if</span> (a % b == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;YES&quot;</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2076-时针夹角大小"><a href="#2076-时针夹角大小" class="headerlink" title="2076 时针夹角大小"></a>2076 时针夹角大小</h3><p><strong>Problem Description</strong><br>时间过的好快，一个学期就这么的过去了，xhd 在傻傻的看着表，出于对数据的渴望，突然他想知道这个表的时针和分针的夹角是多少。现在 xhd 知道的只有时间，请你帮他算出这个夹角。</p><p>注：夹角的范围[0，180]，时针和分针的转动是连续而不是离散的。</p><p><strong>Input</strong><br>输入数据的第一行是一个数据 T，表示有 T 组数据。<br>每组数据有三个整数 h(0 &lt;= h &lt; 24)，m(0 &lt;= m &lt; 60)，s(0 &lt;= s &lt; 60)分别表示时、分、秒。</p><p><strong>Output</strong><br>对于每组输入数据，输出夹角的大小的整数部分。</p><p><strong>Sample Input</strong><br>2<br>8 3 17<br>5 13 30</p><p><strong>Sample Output</strong><br>138<br>75</p><div class="note warning no-icon flat"><p>注意：h 赋值时，要知道 m 已经值变了，所以要用 temp 获取最初的值</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">double</span> h, m, s, temp;</span><br><span class="line"><span class="keyword">int</span> angle;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; h&gt;&gt; m&gt;&gt; s;</span><br><span class="line"><span class="keyword">if</span> (h &gt;= <span class="number">12</span>) &#123;</span><br><span class="line">h -= <span class="number">12</span>;</span><br><span class="line">&#125;</span><br><span class="line">temp = m;</span><br><span class="line">m = m*<span class="number">6</span> + s/<span class="number">10</span>;</span><br><span class="line">h = h*<span class="number">30</span> + temp/<span class="number">2</span> + s/<span class="number">120</span>;</span><br><span class="line">angle = <span class="built_in">fabs</span>(m - h) &gt; <span class="number">180</span> ? <span class="built_in">fabs</span>(<span class="number">360</span> - <span class="built_in">fabs</span>(m - h)) : <span class="built_in">fabs</span>(m - h);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; angle&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2078-复习时间"><a href="#2078-复习时间" class="headerlink" title="2078 复习时间"></a>2078 复习时间</h3><p><strong>Problem Description</strong><br>hss 复习有个习惯，在复习完一门课后，他总是挑一门更简单的课进行复习，而他复习这门课的效率为两门课的难度差的平方，<br>而复习第一门课的效率为 100 和这门课的难度差的平方。hss 这学期选了 n 门课，但是一晚上他最多只能复习 m 门课，<br>请问他一晚上复习的最高效率值是多少？</p><p><strong>Input</strong><br>输入数据的第一行是一个数据 T，表示有 T 组数据。<br>每组数据的第一行是两个整数 n(1 &lt;= n &lt;= 40)，m(1 &lt;= m &lt;= n)。<br>接着有 n 行，每行有一个正整数 a(1 &lt;= a &lt;= 100)，表示这门课的难度值。</p><p><strong>Output</strong><br>对于每组输入数据，输出一个整数，表示最高效率值。</p><p><strong>Sample Input</strong><br>2<br>2 2<br>52<br>25<br>12 5<br>89<br>64<br>6<br>43<br>56<br>72<br>92<br>23<br>20<br>22<br>37<br>31</p><p><strong>Sample Output</strong><br>5625<br>8836</p><div class="note success no-icon flat"><p>提示：其实只要是找出难度系数最低的那个跟 100 的差平方一下就是答案了，这道题看似难，其实题目没有出好，很多条件/变量都是和答案的解出没关系</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">min</span><span class="params">(<span class="keyword">int</span> d[], <span class="keyword">int</span> n)</span> </span>&#123;  <span class="comment">//找出最小值</span></span><br><span class="line"><span class="keyword">int</span> min = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (min &gt; d[i]) &#123;</span><br><span class="line">min = d[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T, j = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span>(j&lt;T) &#123;</span><br><span class="line"><span class="keyword">int</span> n, m, d[<span class="number">40</span>];</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; n&gt;&gt; m;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; d[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(<span class="number">100</span>-min(d, n))*(<span class="number">100</span>-min(d, n))&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">j++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2081-手机短号"><a href="#2081-手机短号" class="headerlink" title="2081 手机短号"></a>2081 手机短号</h3><p><strong>Problem Description</strong><br>手机号是一个 11 位长的数字串，同时作为学生，可以申请加入校园网，如果加入成功，你将另外拥有一个短号。<br>假设所有的短号都是是 6 + 手机号的后 5 位，比如号码为 13512345678 的手机，对应的短号就是 645678。<br>现在，如果给你一个 11 位长的手机号码，你能找出对应的短号吗？</p><p><strong>Input</strong><br>输入数据的第一行是一个 N(N &lt;= 200)，表示有 N 个数据，接下来的 N 行每一行为一个 11 位的手机号码。</p><p><strong>Output</strong><br>输出应包括 N 行，每行包括一个对应的短号，输出应与输入的顺序一致。</p><p><strong>Sample Input</strong><br>2<br>13512345678<br>13787654321</p><p><strong>Sample Output</strong><br>645678<br>654321</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; N;</span><br><span class="line"><span class="keyword">char</span> pnum[<span class="number">200</span>][<span class="number">11</span>], lnum[<span class="number">200</span>][<span class="number">6</span>]; <span class="comment">//放手机号和放短号的二位数组</span></span><br><span class="line"><span class="built_in">memset</span>(lnum, <span class="string">&#x27;6&#x27;</span>, <span class="keyword">sizeof</span>(lnum));  <span class="comment">//将短号数组初始化为6，只有char型数组才可以初始化为某字符</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;     <span class="comment">//输入电话号码</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; pnum[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;     <span class="comment">//获取短号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">6</span>; j &lt; <span class="number">11</span>; j++) &#123;</span><br><span class="line">lnum[i][j<span class="number">-5</span>] = pnum[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) &#123;     <span class="comment">//输出短号</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">6</span>; j++) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; lnum[i][j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方法二</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">string</span> newstr;</span><br><span class="line">    <span class="keyword">int</span> lines;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;lines;</span><br><span class="line">    <span class="keyword">while</span>(lines--)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;str;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="string">&#x27;6&#x27;</span>&lt;&lt; &amp;str[<span class="number">6</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2090-算菜价"><a href="#2090-算菜价" class="headerlink" title="2090 算菜价"></a>2090 算菜价</h3><p><strong>Problem Description</strong><br>妈妈每天都要出去买菜，但是回来后，兜里的钱也懒得数一数，到底花了多少钱真是一笔糊涂帐。现在你可以给她写程序算一下。</p><p><strong>Input</strong><br>输入含有一些数据组，每组数据包括菜种（字串），数量（计量单位不论，一律为 double 型数）和单价（double 型数，表示人民币元数），<br>因此，每组数据的菜价就是数量乘上单价啊。菜种、数量和单价之间都有空格隔开的。</p><p><strong>Output</strong><br>支付菜价的时候，由于最小支付单位是角，所以总是在支付的时候采用四舍五入的方法把分头去掉。最后，请输出一个精度为角的菜价总量。</p><p><strong>Sample Input</strong><br>青菜 1 2<br>罗卜 2 1.5<br>鸡腿 2 4.2</p><p><strong>Sample Output</strong><br>13.4</p><div class="note warning no-icon flat"><p>注意：本题有缺陷，就是没有说明输入终止条件，本人试出来终止条件是输入 EOF，不过和我们没关系，OJ 系统自己会输入判断的</p></div><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">char</span> cname[<span class="number">1000</span>];</span><br><span class="line"><span class="keyword">double</span> num, price, sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt; cname&gt;&gt; num&gt;&gt; price) &#123;</span><br><span class="line">sum += num*price;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%.1lf\n&quot;</span>, sum);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2092-整数解"><a href="#2092-整数解" class="headerlink" title="2092 整数解"></a>2092 整数解</h3><p><strong>Problem Description</strong><br>有二个整数，它们加起来等于某个整数，乘起来又等于另一个整数，它们到底是真还是假，<br>也就是这种整数到底存不存在，实在有点说不准，你能快速回答吗？看来只能通过编程。<br>例如：<br>x + y = 9，x * y = 15 ? 找不到这样的整数 x 和 y<br>1+4=5，1<em>4=4，所以，加起来等于 5，乘起来等于 4 的二个整数为 1 和 4<br>7+(-8)=-1，7\</em>（-8）=-56，所以，加起来等于-1，乘起来等于-56 的二个整数为 7 和-8</p><p><strong>Input</strong><br>输入数据为成对出现的整数 n，m（-10000&lt;n,m&lt;10000），它们分别表示整数的和与积，如果两者都为 0，则输入结束。</p><p><strong>Output</strong><br>只需要对于每个 n 和 m，输出“Yes”或者“No”，明确有还是没有这种整数就行了。</p><p><strong>Sample Input</strong><br>9 15<br>5 4<br>1 -56<br>0 0</p><p><strong>Sample Output</strong><br>No<br>Yes<br>Yes</p><blockquote><p>关键：▲&gt;=0 表示方程有解，sqrt_t*sqrt_t == t 表示解都为整数</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">double</span> n, m;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; n&gt;&gt; m &amp;&amp; (n || m)) &#123;</span><br><span class="line"><span class="keyword">double</span> t = n*n - <span class="number">4</span>*m;</span><br><span class="line"><span class="keyword">int</span> <span class="keyword">sqrt_t</span> = <span class="built_in">sqrt</span>(t);</span><br><span class="line"><span class="keyword">if</span> (t &gt;= <span class="number">0</span> &amp;&amp; <span class="keyword">sqrt_t</span>*<span class="keyword">sqrt_t</span> == t) &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;Yes\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;No\n&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2096-小明-A-B"><a href="#2096-小明-A-B" class="headerlink" title="2096 小明 A+B"></a>2096 小明 A+B</h3><p><strong>Problem Description</strong><br>小明今年 3 岁了, 现在他已经能够认识 100 以内的非负整数, 并且能够进行 100 以内的非负整数的加法计算.<br>对于大于等于 100 的整数, 小明仅保留该数的最后两位进行计算, 如果计算结果大于等于 100, 那么小明也仅保留计算结果的最后两位.<br>例如, 对于小明来说:</p><ol><li>1234 和 34 是相等的</li><li>35+80=15</li></ol><p>给定非负整数 A 和 B, 你的任务是代表小明计算出 A+B 的值.</p><p><strong>Input</strong><br>输入数据的第一行为一个正整数 T, 表示测试数据的组数. 然后是 T 组测试数据. 每组测试数据包含两个非负整数 A 和 B(A 和 B 均在 int 型可表示的范围内).</p><p><strong>Output</strong><br>对于每组测试数据, 输出小明 A+B 的结果.</p><p><strong>Sample Input</strong><br>2<br>35 80<br>15 1152</p><p><strong>Sample Output</strong><br>15<br>67</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; T;</span><br><span class="line"><span class="keyword">while</span> (T--) &#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt; a&gt;&gt; b;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; (a%<span class="number">100</span> + b%<span class="number">100</span>) % <span class="number">100</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2098-分拆素数和"><a href="#2098-分拆素数和" class="headerlink" title="2098 分拆素数和"></a>2098 分拆素数和</h3><p><strong>Problem Description</strong><br>把一个偶数拆成两个不同素数的和，有几种拆法呢？</p><p><strong>Input</strong><br>输入包含一些正的偶数，其值不会超过 10000，个数不会超过 500，若遇 0，则结束。</p><p><strong>Output</strong><br>对应每个偶数，输出其拆成不同素数的个数，每个结果占一行。</p><p><strong>Sample Input</strong><br>30<br>26<br>0</p><p><strong>Sample Output</strong><br>3<br>2</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sushu</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">//0素数，1非素数</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= <span class="built_in">sqrt</span>(a); i++) &#123;  <span class="comment">//判断i素数</span></span><br><span class="line"><span class="keyword">if</span> (a % i == <span class="number">0</span>) &#123;  <span class="comment">//不是素数</span></span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; a &amp;&amp; a) &#123;</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;  <span class="comment">//拆法数量</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">3</span>; i &lt; a/<span class="number">2</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (sushu(i) + sushu(a-i) == <span class="number">0</span>) &#123;  <span class="comment">//若i和a-i都为为素数</span></span><br><span class="line">sum++;  <span class="comment">//拆法加1</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; sum&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2099-整除的尾数"><a href="#2099-整除的尾数" class="headerlink" title="2099 整除的尾数"></a>2099 整除的尾数</h3><p><strong>Problem Description</strong><br>一个整数，只知道前几位，不知道末二位，被另一个整数除尽了，那么该数的末二位该是什么呢？</p><p><strong>Input</strong><br>输入数据有若干组，每组数据包含二个整数 a，b（0&lt;a&lt;10000, 10&lt;b&lt;100），若遇到 0 0 则处理结束。</p><p><strong>Output</strong><br>对应每组数据，将满足条件的所有尾数在一行内输出，格式见样本输出。同组数据的输出，其每个尾数之间空一格，行末没有空格。</p><p><strong>Sample Input</strong><br>200 40<br>1992 95<br>0 0</p><p><strong>Sample Output</strong><br>00 40 80<br>15</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line"><span class="keyword">while</span> (<span class="built_in">cin</span>&gt;&gt; a&gt;&gt; b &amp;&amp; (a || b)) &#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">0</span>;</span><br><span class="line">a *= <span class="number">100</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a % b == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(flag) &#123;<span class="built_in">cout</span>&lt;&lt; <span class="string">&quot; &quot;</span>;&#125;</span><br><span class="line"><span class="keyword">if</span> (i&lt;<span class="number">10</span>)  <span class="comment">//个位数前面要加0</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="string">&quot;0&quot;</span>&lt;&lt;i;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; i;</span><br><span class="line">&#125;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">a++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><strong>结束语</strong>：</p><p>各路好汉们若是有疑问或建议恳请留言噢！祝各位好运！</p></blockquote>]]></content>
    
    
    <summary type="html">当初为了准备蓝桥杯而刷的一些基础题，适合小白食用</summary>
    
    
    
    <category term="📕知识笔记" scheme="https://hassanwong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="📜C语言" scheme="https://hassanwong.top/tags/%F0%9F%93%9CC%E8%AF%AD%E8%A8%80/"/>
    
    <category term="📃C++" scheme="https://hassanwong.top/tags/%F0%9F%93%83C/"/>
    
    <category term="🌌蓝桥杯" scheme="https://hassanwong.top/tags/%F0%9F%8C%8C%E8%93%9D%E6%A1%A5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>搭建Hexo-WebStack网址导航</title>
    <link href="https://hassanwong.top/posts/61c6c2e8/"/>
    <id>https://hassanwong.top/posts/61c6c2e8/</id>
    <published>2021-02-15T11:22:00.000Z</published>
    <updated>2021-05-02T18:47:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>前言：</strong></p><p>WebStack，一个可以收藏网址和导航搜索的网站模板。看此篇教程前请确保你曾搭建过 hexo 博客，有一定的经验。若是新手建议搭配其他博主<a href="https://zhuanlan.zhihu.com/p/114195340">Hexo 搭建博客教程</a>一起食用，遇到一些基础问题<u>多百度百度</u>。</p><p><strong>本教程推荐使用的软件</strong>：</p><p><code>Typora</code>、<code>VSCode</code>、<code>Git Bash</code></p></blockquote><br><details ><summary> 碎碎念，搭建时的艰辛历程 </summary>              <div class='content'>              <p>我开始以为 webstack 可以通过像<code>hexo new page xxx</code>一样简单地直接加到博客导航栏里，但经过半天的实践发现没那么简单，再经过大量搜寻最后发现原来它是一个主题，尽管自己已经看到它的文件名叫<code>hexo-theme-webstack</code>。在此之前我还寻思着，这怎么看也不像一个博客网站的 Theme，更像一个小网页，所以我消耗了几天的时间去找搭建教程。首先我想吐槽，网上关于 WebStack 的教程本来就很少，而且 WebStack 它还有很多框架版本（本网址导航是 hexo），就在海淘后零星的几个教程中，又都是 WebStack <code>config.yml</code>参数配置讲解的教程，哎心累，但现在我终于搭建成功了，我觉得有必要去写我人生中第一个教程（这应该是全网第一篇吧？😂 至少我没找到，可能他们认为这太基础了，默认使用者都会）。最后其实呀，<strong>你只需要像创建你第一个博客那样去创建它</strong>，有搭建 Hexo 博客经验的小伙伴来说，应该简单不少，甚至不用看本篇。</p>              </div>            </details><p>话不多说，先上效果<a class="btn-beautify button--animated outline blue larger" href="https://navi.hassanwong.top"   title="网址导航Demo"><i class="far fa-hand-point-right fa-fw"></i><span>网址导航Demo</span></a></p><h2 id="WebStack-简介"><a href="#WebStack-简介" class="headerlink" title="WebStack 简介"></a>WebStack 简介</h2><p>本项目是一个网址导航网站，内容均由<a href="http://viggoz.com/">Viggo</a>收集并整理。本项目前端基于<code>bootstrap</code>前端框架开发，各后台及主题版本由广大网友提供。而我的网址导航，是基于<a href="https://hexo.io/">Hexo</a>版<a href="https://github.com/HCLonely/hexo-theme-webstack">WebStack</a>搭建的。</p><h3 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h3><p>网址导航主要实现两个功能：</p><ol><li>可设为自己默认浏览器页面，方便搜索。</li><li>方便使用自己收藏的网址。</li></ol><h2 id="搭建教程"><a href="#搭建教程" class="headerlink" title="搭建教程"></a>搭建教程</h2><blockquote><p>食用教程前，建议先扫视目录中的<a href="/posts/61c6c2e8/#%E9%9B%95%E8%99%AB%E5%B0%8F%E6%8A%80">【雕虫小技】</a>板块和<a href="https://hassanwong.top/posts/223fd004/">《教程&amp;笔记常量申明》</a>。</p></blockquote><div class="tabs" id="test"><ul class="nav-tabs"><li class="tab active"><button type="button" data-href="#test-1">若想直接用我的网址导航</button></li><li class="tab"><button type="button" data-href="#test-2">若动手能力强，想白手起家</button></li></ul><div class="tab-contents"><div class="tab-item-content active" id="test-1"><ol><li><p>打开<a href="https://github.com/hassanblog/navigation/">我的开源项目</a>，点击右上角<code>Fork</code>，拉取到你的远程仓库，再顺便记得给我点个 <code>⭐Star</code>，谢谢~</p></li><li><p>将我的项目下载到本地任意位置</p><blockquote><p>其中下载项目方法如下：</p><p><strong>方法 1</strong>：直接下载 source 分支下的<a href="https://codeload.github.com/hassanblog/navigation/zip/refs/heads/source">ZIP 压缩包</a>。</p><p><strong>方法 2</strong>：在任意地方打开命令行，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐使用，下载速度更快</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/hassanblog/navigation.git</span><br><span class="line"><span class="comment"># 若失效则用下方命令</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/hassanblog/navigation.git</span><br></pre></td></tr></table></figure></blockquote></li><li><p>下载完毕后，先解压，再删除压缩包（教程接下来将该文件地址称之为<code>&lt;BlogRoot&gt;</code>）。</p></li><li><p>在<code>&lt;BlogRoot&gt;</code>下的命令行中输入<code>npm install hexo-util --save</code>下载 Hexo 相关组件。</p></li></ol><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div><div class="tab-item-content" id="test-2"><ol><li>在 GitHub 新建仓库，仓库名随意，选择<code>Public</code>公开按钮，点击<code>Create repository</code>。（若第一次使用 GitHub，名称建议:<code>&lt;UserName&gt;.github.io</code>）。</li><li>在电脑本地任意位置新建文件夹，名称随意，教程接下来将该文件地址称之为<code>&lt;BlogRoot&gt;</code>。</li><li>在<code>&lt;BlogRoot&gt;</code>下的命令行中输入<code>hexo init</code>初始化 Hexo 资源，稍等片刻你的文件夹下会多出以下文件。（<code>&lt;BlogRoot&gt;\themes\.gitkeep</code>文件可删除）</li></ol><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/WebStack_Bulid/image-20210317135122470.png" style="zoom:80%;" /><ol start="4"><li>直接下载<a href="https://github.com/HCLonely/hexo-theme-webstack">Hexo 版 Webstack 的官方项目</a>到 <code>&lt;BlogRoot&gt;\themes</code>文件夹下</li></ol><blockquote><p>其中下载项目方法如下：</p><p><strong>方法 1</strong>：直接下载 master 分支下的<a href="https://codeload.github.com/HCLonely/hexo-theme-webstack/zip/master">ZIP 压缩包</a>。</p><p><strong>方法 2</strong>：在该文件夹下打开命令行，输入以下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 推荐使用，下载速度更快</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com.cnpmjs.org/hassanblog/navigation.git</span><br><span class="line"><span class="comment"># 若失效则用下方命令</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/hassanblog/navigation.git</span><br></pre></td></tr></table></figure></blockquote><p>下载完毕后，先解压，再删除压缩包，最后将该文件夹命名为<code>webstack</code>。</p><button type="button" class="tab-to-top" aria-label="scroll to top"><i class="fas fa-arrow-up"></i></button></div></div></div><p>接下来继续 👇</p><ol><li><p>修改<code>&lt;BlogRoot&gt;\_config.yml</code>文件<code>theme</code>和<code>deploy</code>配置参数：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: https://hexo.io/plugins/</span><br><span class="line">## Themes: https://hexo.io/themes/</span><br><span class="line"><span class="addition">+ theme: webstack</span></span><br><span class="line"></span><br><span class="line"># Deployment</span><br><span class="line">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class="line">deploy:</span><br><span class="line"><span class="addition">+  type: git</span></span><br><span class="line"><span class="addition">+  repo: &lt;RepoGit&gt;</span></span><br><span class="line"><span class="addition">+  branch: &lt;BranchName&gt;</span></span><br><span class="line"># 2020年10月后&lt;BranchName&gt;默认为main</span><br></pre></td></tr></table></figure></li><li><p>在<code>&lt;BlogRoot&gt;</code>下打开命令行中输入 <code>Hexo 三连</code> 查看效果：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean  <span class="comment">#清空缓存</span></span><br><span class="line">hexo g<span class="comment">#部署代码</span></span><br><span class="line">hexo s<span class="comment">#查看效果</span></span><br></pre></td></tr></table></figure></li><li><p>然后在浏览器地址栏中输入<code>localhost:4000</code>浏览网站的效果。</p><details ><summary> 如果提示4000端口被占用（FATAL Port 4000 has been used） </summary>              <div class='content'>              <ol><li><p>命令行中输入<code>sudo lsof -i:4000</code>，查看被占用进程的<code>pid</code></p></li><li><p>再输<code>sudo kill -9 [pid]</code></p></li><li><p>然后再继续<code>hexo s</code>，看到<code>INFO Hexo is running at ttp://localhost:4000</code>则成功。</p></li></ol>              </div>            </details></li><li><p>最后输入<code>hexo d</code>部署到 GitHub 远端（如果你第一次部署，可能会要输入 GitHub 账密）。</p></li><li><p>开启 GitHub 页面：</p><p>进入 GitHub 刚建的仓库 👉 点击<code>Settings</code>👉 点击左侧栏<code>Pages</code>👉 点击<code>Source</code>👉 选择默认代码分支<code>master或main</code>和默认的<code>/(root)</code> 👉 点击<code>Save</code>。</p></li><li><p>直接点击上方绿框里生成的网站链接，或在浏览器地址框中输入网址，即可看到部署之后的网站效果。</p><ul><li><p>第一次使用博客的选手直接输入：<code>&lt;UserName&gt;.github.io</code></p></li><li><p><del>老油条</del>则输入<code>&lt;UserName&gt;.github.io/&lt;RepoName&gt;/</code></p></li></ul></li></ol><h3 id="搭建后续"><a href="#搭建后续" class="headerlink" title="搭建后续"></a>搭建后续</h3><p>🎉 到此网站初始搭建部署已经完成 🎉，接下来你可以做的事情：</p><ol><li><p>根据<a href="https://blog.hclonely.com/posts/3cd4fb34/">官方文档</a>来进行基本参数配置，或者直接查看本地<code>&lt;BlogRoot&gt;\README.md</code>文件。</p></li><li><p>更换域名。</p></li><li><p>自定义美化。</p><p>这里我提供我的网址导航美化代码（内含中文注释）</p><a class="btn-beautify button--animated outline larger" href="https://cdn.jsdelivr.net/gh/hassanblog/navigation/css/custom.css"   title="自定义CSS"><i class="far fa-hand-point-right fa-fw"></i><span>自定义CSS</span></a><a class="btn-beautify button--animated outline larger" href="https://cdn.jsdelivr.net/gh/hassanblog/navigation/js/custom.js"   title="自定义JS"><i class="far fa-hand-point-right fa-fw"></i><span>自定义JS</span></a><p><strong>使用方法</strong>：</p><p>在<code>&lt;BlogRoot&gt;\themes\webstack\source\js</code>下新建文件<code>&lt;Custom&gt;.js</code>，js 代码直接用我的或自定义写。</p><p>在<code>&lt;BlogRoot&gt;\themes\webstack\source\css</code>下新建文件<code>&lt;Custom&gt;.css</code>，css 代码直接用我的或自定义写。</p><p>打开<code>&lt;BlogRoot&gt;\themes\webstack\_config.yml</code>填入以下代码即可导入自定义文件：（当然你也可以直接用我的外链，不用在本地新建文件，<code>href=&quot;&quot;</code>、<code>src=&quot;&quot;</code>处填对应外链即可）</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">custom:</span><br><span class="line">  head: # 以下内容插入到&lt;head&gt;&lt;/head&gt;标签内，可设置多行，注意每行开头至少四个空格</span><br><span class="line"><span class="addition">+   &lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;/css/&lt;Custom&gt;.css&quot;&gt;</span></span><br><span class="line">  body: # 以下内容插入到&lt;/body&gt;标签之前，可设置多行，注意每行开头至少四个空格</span><br><span class="line"><span class="addition">+   &lt;script src=&quot;/js/&lt;Custom&gt;.js&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>搭建博客镜像网站，例如在 Gitee、Vercel、Coding 等代码托管平台搭建。（因为在国内用 GitHub 搭建的网站访问速度非常慢）。</p></li><li><p>版本控制：</p><p>将网址导航的源码上传至项目仓库下的<strong>Source</strong>分支。备份项目代码的使用场景一般是：1. 魔改失败时可以拉取上一次提交的代码到本地；2. 在外地没带自己电脑情况下，<del>可以随便找台电脑操作</del>。</p><p>具体操作：在<code>&lt;BlogRoot&gt;</code>下的<strong>Git Bash</strong>中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">git init  <span class="comment">#初始化</span></span><br><span class="line">git add .  <span class="comment">#上传所有文件</span></span><br><span class="line">git commit -m <span class="string">&quot;&lt;Custom&gt;&quot;</span>  <span class="comment">#提交时的注释，例如：&quot;update&quot;</span></span><br><span class="line">git remote add origin &lt;RepoGit&gt;  <span class="comment">#连接你仓库的Git地址，使Git Bash知道代码要上传至哪个仓库</span></span><br><span class="line">git branch -M &lt;BranchName&gt;  <span class="comment">#将默认master分支名改为你自己设置的</span></span><br><span class="line"><span class="comment">#若第一次提交要加上&quot;-u&quot;，如下，这里推荐分支名为&quot;Source&quot;</span></span><br><span class="line">git push -u origin &lt;BranchName&gt;</span><br><span class="line"><span class="comment">#若提交失败，显示：error: failed to push some refs to，则加上&quot;-f&quot;来强制提交</span></span><br><span class="line">git push [-u] origin &lt;BranchName&gt; -f</span><br></pre></td></tr></table></figure></li></ol><br><h2 id="雕虫小技"><a href="#雕虫小技" class="headerlink" title="雕虫小技"></a>雕虫小技</h2><ol><li><p>如何获取一个网站的 Logo 图标？</p><ul><li><p>在目标网站的首页网址后加上<code>/favicon.ico</code>并敲下<code>Enter</code>，可以得到近 90%网站的 Logo 图标。</p></li><li><p>也可以按下<code>Ctrl + U</code>打开网页源码，按下<code>Ctrl+ F</code>搜索<code>ico</code>、<code>logo</code>等关键词，可找到 Logo 链接。</p><blockquote><p>这俩方法下来，几乎绝大多数网站的 Logo 不在话下</p></blockquote></li></ul></li><li><p>打开命令行<code>cmd</code>快捷方法：</p><p>直接在文件地址栏输入<code>cmd</code>并敲下<code>Enter</code>即可打开命令行</p></li><li><p>加快<code>git clone</code>下载速度：</p><p>只需在<strong>HTTPS 型</strong>仓库 Git 地址里的<code>github.com</code>后加<code>.cnpmjs.org</code>，不出意外下载速度会很快。</p></li></ol><p><a href="/posts/61c6c2e8/#%E6%90%AD%E5%BB%BA%E6%95%99%E7%A8%8B">👈 返回【搭建教程】</a></p><br><h2 id="可能有的八阿哥"><a href="#可能有的八阿哥" class="headerlink" title="可能有的八阿哥"></a>可能有的八阿哥</h2><ul><li><p>网址图片可能会加载不出来</p><p>打开<code>&lt;BlogRoot&gt;\themes\webstack\_config.yml</code>填入以下代码：</p><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">custom:</span><br><span class="line">  head: # 以下内容插入到&lt;head&gt;&lt;/head&gt;标签内，可设置多行，注意每行开头至少四个空格</span><br><span class="line">  body: # 以下内容插入到&lt;/body&gt;标签之前，可设置多行，注意每行开头至少四个空格</span><br><span class="line"><span class="addition">+   &lt;script src=&quot;&lt;FilePath_lozad.min.js&gt;&quot;&gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></li></ul><details ><summary> 碎碎念，处理Bug时的心路历程 </summary>              <div class='content'>              <p>其实我自己在没有教程的情况下能搭建成功网址导航，至少对于刚上道的我来说很骄傲自豪的，但谁 tm 又能想得到，在摸爬滚打的过程中，突然遇到网址图片显示不出来的问题，于是我疯狂百度，也问了很多使用过的博主，都说其他网站可能存在防盗链机制，大致意思是有这个机制的网站，它的图片链接只在自己网站可显示，放其他网站是无法使用的。但当我将所有图片换成我自己仓库的图片时，仍显示不出图片，所以问题不一定出现在图片链接上，也可以说我收藏的那些网站根本没有开防盗链机制。</p><p>于是我花了一周时间找原因，源码对比测试。这一周中，有很多离谱的情况发生，我用<a href="https://dh.xiaokang.me/">小康</a>的源码，图片可以正常显示，但我的就不行，于是我一点一点将他的代码的改成我的，目的是为了找到问题出现在哪一块，但就是找不到问题出现的原因。更离谱的是，经过几天的测试后，我放弃了各种推断，再次全部使用小康的源码准备重新找原因的时候，结果连小康图片都不显示了，那为什么我最开始用他的源码就可以？就在昨天，我又双叒叕用他的源码再次部署到 GitHub 上，再将我的<code>index.html</code>代码和小康的对比，终于发现了原因！我发现我的<code>index.html</code>最后几行缺少<code>lozad.min.js</code>文件的引入，lozad 应该是起图片懒加载的作用，你这就以为我找到了罪魁祸首？真相大白了？我 tm 寻思<code>&lt;BlogRoot&gt;\themes\webstack\_config.yml</code>文件里明明有将这个 js 文件导入，为什么最后生成的 html 文件却没有导入，我此时摸着我凉秃秃的头顶百思不得其姐，现在等于说我已找到了问题和解决方案，只是不知道问题出现的原因，知道原因的小伙伴赶紧留言评论，好让我 s 心。最后十分感谢并墙裂推荐<a href="https://www.diffchecker.com/">Diffchecker</a>这个贼好用的代码对比网站，不然可能会浪费我更多的时间，毕竟我已经和这个问题杠上了一周，真是心痛我宝贵的寒假时光 😭，不过结果是好滴。</p>              </div>            </details><br><h2 id="参考教程"><a href="#参考教程" class="headerlink" title="参考教程"></a>参考教程</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/114195340">GitHub Pages + Hexo 免费搭建个人博客</a></li><li><a href="https://zhuanlan.zhihu.com/p/183977963">一个账号如何使用多个 GitHub Pages</a></li><li><a href="https://blog.csdn.net/u014135752/article/details/79951802">如何将本地项目上传到 Github</a></li></ul><h3 id="额外推荐"><a href="#额外推荐" class="headerlink" title="额外推荐"></a>额外推荐</h3><ul><li><p><a href="https://www.heson10.com/posts/46324.html">为 Hexo 博客建立其他主题分站</a></p><blockquote><p>这篇黑石大佬写的教程非常实用，不想解析新的域名到自己 GitHub 仓库，直接将静态页面放自己博客里也是蛮不错的选择。目前我导航的网址是<a href="https://navi.hassanwong.top，用了这篇教程的方法后，网址就是https://hassanwong.top/navi/（不要访问），就不用为多个博客主题建立多个代码仓库了，自行去尝试哦。">https://navi.hassanwong.top，用了这篇教程的方法后，网址就是https://hassanwong.top/navi/（不要访问），就不用为多个博客主题建立多个代码仓库了，自行去尝试哦。</a></p></blockquote></li></ul><br><blockquote><p><strong>结尾：</strong></p><p>有什么问题、好的建议、如果链接失效请留言哦~第一次写教程请多多指教阿里嘎多。最后如果本篇对你有帮助，请一键三。。。哦不对，留留言，给个 🍭 也是可以的。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;前言：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;WebStack，一个可以收藏网址和导航搜索的网站模板。看此篇教程前请确保你曾搭建过 hexo 博客，有一定的经验。若是新手建议搭配其他博主&lt;a href=&quot;https://zhuanlan.</summary>
      
    
    
    
    <category term="💻实用教程" scheme="https://hassanwong.top/categories/%F0%9F%92%BB%E5%AE%9E%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
    
    <category term="🔹Hexo" scheme="https://hassanwong.top/tags/%F0%9F%94%B9Hexo/"/>
    
    <category term="📝博客" scheme="https://hassanwong.top/tags/%F0%9F%93%9D%E5%8D%9A%E5%AE%A2/"/>
    
    <category term="👾GitHub" scheme="https://hassanwong.top/tags/%F0%9F%91%BEGitHub/"/>
    
  </entry>
  
  <entry>
    <title>雅思技巧笔记</title>
    <link href="https://hassanwong.top/posts/3ce75aa2/"/>
    <id>https://hassanwong.top/posts/3ce75aa2/</id>
    <published>2021-02-09T15:06:00.000Z</published>
    <updated>2021-03-22T14:44:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>目标</strong>：</p><table><thead><tr><th>听</th><th>说</th><th>读</th><th>写</th></tr></thead><tbody><tr><td>7.5</td><td>6.5</td><td>7.0</td><td>6.5</td></tr></tbody></table></blockquote><h2 id="听力"><a href="#听力" class="headerlink" title="听力"></a>听力</h2><h3 id="答案书写"><a href="#答案书写" class="headerlink" title="答案书写"></a>答案书写</h3><p><strong>写答案原则：</strong></p><ol><li><p>答案和录音说的一致，所听即所得</p></li><li><p>听重读，一般重读为答案</p></li></ol><p><strong>某些题型答案的写法需注意（推荐写法）：</strong></p><p>3:00-5:00</p><p>10-minute walk</p><p>10-litre water</p><h3 id="精听"><a href="#精听" class="headerlink" title="精听"></a>精听</h3><p><strong>精听跟读目的：</strong></p><ol><li><p>纠正发音</p></li><li><p>理解出题定位</p></li><li><p>理解改写难点</p></li><li><p>不犯相同错误</p></li></ol><p><strong>精听步骤：</strong></p><ol><li><p>听一遍录音，对答案</p></li><li><p>看错题对应原文答案句</p></li><li><p>错题找到定位和答案出处</p></li><li><p>跟读错题答案句</p></li></ol><p><strong>精听跟读：</strong></p><ol><li><p>先做题再精听</p></li><li><p>只精听错题答案处</p></li><li><p>听不出练跟读</p></li></ol><p><strong>通用原则：</strong></p><ol><li><p>rather than 后的都不选/写</p></li><li><p>表示<strong>结论性</strong>的词或<strong>转折词</strong>后面是答案（So, However…）</p></li></ol><p><strong>需要首字母大写的词：</strong></p><p>地址，人名，月份，星期，国家等等。</p><h3 id="题型"><a href="#题型" class="headerlink" title="题型"></a>题型</h3><h4 id="主观题"><a href="#主观题" class="headerlink" title="主观题"></a>主观题</h4><ul><li>信息表格题</li><li>填空题</li><li>提纲题</li><li>简答题</li><li>短文填空</li><li>地图题</li><li>流程图题</li></ul><p><strong>填空题（主观）规律：</strong></p><ol><li><p>根据空格前后的词，来预测答案的词性和内容</p></li><li><p>注意原文和题干的同义替换</p></li></ol><h4 id="客观题"><a href="#客观题" class="headerlink" title="客观题"></a>客观题</h4><ul><li>单选</li><li>多选</li><li>搭配题 1</li><li>搭配题 2</li></ul><p><strong>选择题（客观）规律：</strong></p><ol><li><p>不选反常识的选项</p></li><li><p>速记答案用缩写形式（有时间可以全写）</p></li><li><p>正确的选项通常是对题干的同义替换</p></li></ol><p><strong>雅思 A 类听力评分标准对照表：</strong></p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/IELTS_Skill_Note/IELTS-ScoringTable.png" alt="雅思A类听力评分标准对照表" style="zoom:120%" /><h2 id="阅读"><a href="#阅读" class="headerlink" title="阅读"></a>阅读</h2><p><strong>定位词：</strong></p><p>概念：具有实际意义的词，不抽象</p><p>拒绝猜测和推理，讲究实证，一一对应</p><p>数字和大写字母周围出现考点的概率最大</p><p><strong>判断题</strong>：</p><p>尽量不要简写答案，三种答案数量有规律</p><p>True≥ False &gt; Not Given</p><table><thead><tr><th>总题数</th><th>T、F、N 分布</th></tr></thead><tbody><tr><td>3</td><td>1，1，1</td></tr><tr><td>4</td><td>2（T，F），1，1</td></tr><tr><td>5</td><td>2，2，1</td></tr><tr><td>6</td><td>3（T，F），2，1<br>2，2，2</td></tr></tbody></table><p>做题的同时找两个题目的答案</p><p>不要在判断题当中单独使用数字定位</p><p><strong>雅思 A 类阅读评分标准对照表（同听力）：</strong></p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210404/img/IELTS-ScoringTable.png" alt="雅思A类阅读评分标准对照表" style="zoom:120%" /><h2 id="口语"><a href="#口语" class="headerlink" title="口语"></a>口语</h2><p><strong>Part2 主题：</strong></p><ul><li>旅游</li><li>人物性格</li><li>课外活动</li><li>餐厅美食</li><li>高科技产品</li><li>衣服类</li></ul><p><strong>Part3 答题框架：</strong></p><ol><li><p>what 观点</p></li><li><p>why 原因</p></li><li><p>details 细节</p></li></ol><h2 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h2><p>完善中。。。。。。</p>]]></content>
    
    
    <summary type="html">适合烤鸭小白的技巧笔记</summary>
    
    
    
    <category term="📕知识笔记" scheme="https://hassanwong.top/categories/%F0%9F%93%95%E7%9F%A5%E8%AF%86%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="🦆雅思" scheme="https://hassanwong.top/tags/%F0%9F%A6%86%E9%9B%85%E6%80%9D/"/>
    
    <category term="🔠英语" scheme="https://hassanwong.top/tags/%F0%9F%94%A0%E8%8B%B1%E8%AF%AD/"/>
    
  </entry>
  
  <entry>
    <title>2020年度总结&amp;2021新年计划</title>
    <link href="https://hassanwong.top/posts/d5180487/"/>
    <id>https://hassanwong.top/posts/d5180487/</id>
    <published>2021-01-22T08:03:00.000Z</published>
    <updated>2021-03-22T14:45:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><strong>背景：</strong></p><p>2020 年初的时候看<a href="https://www.bilibili.com/video/BV1vJ411L7NA">ycr 哥哥</a>的视频，萌生了写年度计划的想法，于是乎就行动了，第一次接触 Xmind 软件不得不说炒鸡好用，UI 做的很有简约之美。制定 2020Target 的时候距离现在也差不多一年了，得做做年终总结和写写新年计划了！</p></blockquote><div class='poem'><div class='poem-title'>元日</div><div class='poem-author'>[宋] 王安石</div><p>爆竹声中一岁除，<br>春风送暖入屠苏。<br>千门万户曈曈日，<br>总把新桃换旧符。</p></div><span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #81d8cf;color: #fff">诗词有字显示有误？  </button><span class="hide-content">千门万户曈曈日（“曈”是罕见字，一般的“艺术”字体显示有误，如果你这显示有误，可能是网页没有完全加载完毕，它用的是原始字体，以至于我预设的字体没加载出来，在刷新完毕之前先看看本篇博客叭~）</span></span><h2 id="🐭-回顾-2020"><a href="#🐭-回顾-2020" class="headerlink" title="🐭 回顾 2020"></a>🐭 回顾 2020</h2><p>2020 真是多灾多难、光怪陆离的一年。20 年一月初的我，满怀信心的写下了新年计划，之后便目睹了一连串的热搜新闻席卷而来，先是疫情爆发，二是科比坠机逝世等爆点新闻，2020 的开场白实在是不堪入目，为整个 2020 奠定了不详的基调，好在国家的强大，几个月内就基本控制住了疫情，接下来的热搜新闻就是国外各种各样刷新三观的疫情相关操作，川建国同志最为代表人物，承包了我一年的笑点与恨点，近几周，新闻宣称拜振华同志当选为美国总统，我直接好家伙 😂。至于我呢，一整年下来，有进步的地方，也有做的不到位的地方，所以接下来分析分析、总结总结。之前原本想拍个总结视频水下 B 站，毕竟我这不是一年多没有发视频了吗？现在我还不是特别自信，也没预先准备好，最后发了也没人看，羞，决定今年就不拍了，用博客记录也挺好。我觉得以后留学、工作有时间做做兼职 UP 主也是挺好的，我拍摄剪辑技术可不能白白浪费 🤦‍。So, let’s get started!</p><p>根据 2020Target 各大板块逐步分析总结：</p><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/2020Summary&2021Target/2020Target.png" alt="2020Target"></p><p>去年总共写了 8 大板块——”<strong>健康</strong>“、”<strong>学习</strong>“、“<strong>活动</strong>”、“<strong>收入</strong>”、“<strong>情感</strong>”、”<strong>外延与内涵</strong>“、“<strong>视频</strong>”和“<strong>音乐</strong>”。</p><h3 id="💪-健康"><a href="#💪-健康" class="headerlink" title="💪 健康"></a>💪 健康</h3><p>首先谈谈第一个板块<strong>健康</strong>。大概是每天要健健身，包括仰卧起坐和举哑铃，乍一看安排的还不戳，如果能够顺利执行，现在肌肉应该粗了一圈吧？😟 这不好笑，喜欢健身的朋友们<del>可能</del>肯定会觉得我这个健身计划没卵用，那为什么我还执意去写呢？因为自己没有花时间去研究合适的锻炼方式，当然计划还是要有的，只是执行力得跟上，现在重心还是过多的放在了学习和爱好上，有时候容易忽视自己的身体健康。2020 上半年在家的时候我还是有刻意的去锻炼，家里买了 2 个瑜伽垫，目的肯定不是练瑜伽 😂，而是做做仰卧起坐、平板支撑和俯卧撑之类的，我练的很随性，没有特别规律，下半年到学校后，每天基本上与健身无缘，几乎天天泡在图书馆，<del>摸鱼</del>。所以，新的一年得继续执行健身计划，从小做起，一点点加大力度。然后是营养方面，每天喝充足的水，每餐要多吃。水的话，在家里喝的少，我家里人不喜欢用饮水机，得自己去院子里打饮用水，然后回来还要再烧开一下，我们家这是何苦呢？每次喝个水特麻烦 🙂，于是无形之中水就喝的少一些，当然了，懒是原罪，我无话可说。。<del>一万个好家伙飞过来</del>，在学校我的每日水量还是挺正常，想喝水随时随地打。然后，2020 计划有提到每餐要多吃，是因为我偏瘦型身材，原本是希望从 140 斤涨到 155，而现在是 145，其实有一段时间到过 150，害，算是小有进步 🙃。最后，睡觉方面，原本希望自己早睡早起，但结果天天翻车，不过在学校情况良好，一回家就乱了套 🙃，心口在滴血。</p><h3 id="✍-学习"><a href="#✍-学习" class="headerlink" title="✍ 学习"></a>✍ 学习</h3><p>第二大板块<strong>学习</strong>，英语方面，六级第一次考了没过，第二次感觉做的比第一次好，但是对完答案，还是感觉小命难保，<del>skr</del>（目前没出分，2 月出），我这是何苦呢？费很多时间去准备结果就这，真该听哥哥姐姐的建议，先准备雅思，两者并不冲突。然后词汇量方面，近几周测了几次，差不多有个 8000，口语方面，记得年初脑子一热，看了北外的口语网课，掌握了一点点知识吧，当然还不够系统，其实不如直接准备雅思，你说这是何苦呢？🙃 属实浪费时间。然后该谈谈我将来的饭碗 - 计算机，计划写着掌握算法、Java、Python，说实话，感觉一直没入门，本人比较浮躁，沉不下心来学习钻研，然后我学的东西比较杂，不成体统，当然还得靠自己慢慢来吧。成绩方面，我本学期还行，应该能达到目标，但是水课成绩普遍比学位课高，到最后绩点还是得看学位课，我大一下和大二上的成绩给我拖了很多后腿，总体绩点想提上来的确很难，得加把劲咯，为了 Family，更为了至己。当然咯，绩点其实不重要，学到真材实料才是真，但留学还是要看绩点的鸭 🙃。。自控方面，每周有坚持写总结，除了偶尔几周，当然这不重要，重要的是每周的自己不一样，<del>我这口气好像做传销的 bushi</del>，对自己狠一点，拒绝拖延和提高效率还有待加强，<del>大佬莫笑</del>。证书方面，驾照一月初就拿了，四级也过了，六级观望中，蓝桥杯省一，软考没有报名，<del>嫌自己太菜</del>，在老师的带领下，还拿了证券投资模拟大赛国二，算是在金融领域沾了个边，从一开始的梭哈，到如今的智慧投资，算是懂了点皮毛，但现实生活中投资需谨慎 😂。现在回顾以往，其实我追求的这些证书轻如鸿毛，只是学习过程中顺手牵的羊，该拿的还是得拿，学到真功夫才是真。技能方面，上半年在小姨家学过烘焙，一下午时间就做了肉松海苔小贝、红豆蛋挞两个甜点 - 真滴很好吃，这也不算是掌握了烘焙这门技能，只是上手很容易，还是在小姨的耐心指导下完成的，学完就忘了一半，以后自己在外独立生活，这些烘焙技术得学会！除了烘焙技能，还有搭建博客，<del>这也不算是技能</del>，您现在所看到的博客网站是我按照教程一点点搭建出来的，DIY 了数月，算是掌握了吧，<del>大佬轻喷</del>，没有掌握的技能有建站和烹饪，在此说明下建站和搭建博客网站不太一样（博客框架是大佬开发的，我的工作只是使用此框架来上传博客和自定义美化它，相对于建站要简单很多）。2021 再接再厉，<del>大佬轻喷 Orz</del>。。</p><h3 id="🎈-活动"><a href="#🎈-活动" class="headerlink" title="🎈 活动"></a>🎈 活动</h3><p>第三大板块<strong>活动</strong>，写这一板块的目的是希望能够拿更多的学分吧，谁还不是学分狗呢？<del>好像只有我</del>🙃。现在即将大三下了，一些扯淡的活动直接甩到九霄云外，不值得，不如多参加竞赛，提升自己学科能力。</p><h3 id="💴-收入"><a href="#💴-收入" class="headerlink" title="💴 收入"></a>💴 收入</h3><p>第四大板块<strong>收入</strong>，下半年拿了三等奖学金，说实话不得不感慨班上大佬太多了，本以为自己的综测分很高，结果发现还有更高的，还高的离谱，这还是人吗？当然了，还是得说一句，综测分不重要，学到真本事才是真。年初的时候，给熟人家孩子补过习，赚了一点 mula，emmm 海星，<del>大佬莫笑</del>。大学这个阶段本人认为，收入是次要的，以后出来混，<del>混出来了</del>，月薪可抵大学 4 年赚的，<del>传统功夫点到为止。</del></p><h3 id="💜-情感"><a href="#💜-情感" class="headerlink" title="💜 情感"></a>💜 情感</h3><p>第五大板块<strong>情感</strong>，小脸突然一红 😳，有点羞耻，世上哪有什么 Ms. Right，俺只配活在梦境里（苦笑.jpg）。一本正经地说，谈恋爱不应该成为目标，不能为了谈而谈，这个东西还得随缘，是对她未来的负责也是对自己未来的负责。To be honest，其实我已降低了无数门槛与标准，但难以找到自己十分钟意的，可能井底蛙本蛙得出去看看大世界了，当然，我自身肯定有一些不足之处，比如不主动，双商堪忧等等，有时候我又把不主动归结于自己没有十分的满意，其实，不断提高充实自己才能找到 better one，这点永不过时。<span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #81d8cf;color: #fff">点击查看广告  </button><span class="hide-content">（关注我公众号可以通过聊天问出我相关问题的回答，能否触发我后台预设的问题，看你自己怎么问哦hh，注意用第二人称）</span></span></p><h3 id="😀-外延与内涵"><a href="#😀-外延与内涵" class="headerlink" title="😀 外延与内涵"></a>😀 外延与内涵</h3><p>第六大板块<strong>外延与内涵</strong>，外延方面，希望能干干净净，彬彬有礼，不吐芬芳，<del>这是什么奇怪的人设</del>。其实在家时我比较邋遢和随意，在校时也没有以往那么爱“打扮”，可能是心累了，心思不在穿着打扮上，以前可能觉得整得摔摔七七的很有魅力，现在淡然了许多，我只不过是芸芸众生中普通的那一位，你最多只能当自己心目中的 Superstar。话说回来，这些自我要求还是得执行，让自己感到舒服快乐才是最好的。再来谈谈内涵方面，我心态一直以来比较积极向上阳光开朗，可能有时候容易被失败给绊倒然后质疑自己的能力，处于低迷状态，不过这种事情最后还是烟消云散。“求知若饥，虚心若愚”，这是 Steve·Jobs 的名言，在这一年中，我过于保持饥饿以至于东学西学，到了最后捡了芝麻丢了西瓜，成了个傻瓜，<del>skr</del>，计算机知识实在是太广了，所以得专攻一个自己喜欢的 part。</p><h3 id="📹-视频"><a href="#📹-视频" class="headerlink" title="📹 视频"></a>📹 视频</h3><p>第七大板块<strong>视频</strong>，原本是想继续学习拍摄剪辑技巧，但 2020 上半年由于疫情在家，学生会没有拍摄剪辑的任务，于是我这个部长就只当了半学期，所以这一整年除了纸婚祝福视频好像就没有其它剪辑项目，更别说上传 B 站了，现在想想还真得感谢那 76 个”粉丝“到现在还在关注我，真是泪目了 Orz。2021 年我也不太打算做视频，虽说 To Do List 写了一些视频计划，但我现阶段难以执行，看暑假有没有什么机会出去玩玩？这么一说好几年没有正儿八经的旅游了，说实话旅游 Vlog 也没啥人看，除非自己有人气，但当当自己生活的记录也挺好，万一哪天意外走红？<del>异想天开</del>，还是现在踏踏实实地做好一个普通而不平凡的人叭。</p><h3 id="🎵-音乐"><a href="#🎵-音乐" class="headerlink" title="🎵 音乐"></a>🎵 音乐</h3><p>第八大版块<strong>音乐</strong>，钢琴这一块现在也记不太清自己学了几首歌，其实学到的曲子数量并不重要，开心就好。<span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #81d8cf;color: #fff">题外话  </button><span class="hide-content">（我的钢琴入门是我哥教的，在学校时我经常会看B站上的零基础视频，放假到家时会捣鼓捣鼓电子琴，说实话，没有专业要求的话钢琴入门真的super简单，只要会点和弦伴奏技巧和有~~亿~~一点点天赋，你能给市面上大多数流行音乐伴奏和演奏，其实不太需要看谱子，当然学习速度和效果还是因人而异吧，至于我，小时候就很喜欢音乐，对音乐各个层次领域的东西都有着持续关注和细微观察，以至于到了大学有充足时间后就疯了似的追求音乐方面的爱好，学琴的速度自然就快一些。好像通过我这一个行为，能悟出一个道理，要想在某一领域出类拔萃，你先得培养你的爱好，平时多思考，学前还得有相关知识的预习hh。像我正儿八经学习钢琴之前，就尝试过分析别人是怎么弹的，会考虑到一首歌的层次结构。其实我小的时候家里就买过电子琴，由于没有人教，就自己一根小指头点来点去，令我印象深刻的是，我当时一根手指弹了汶川大地震时经常放的歌《让世界充满爱》，这一切的一切使我在2年前那个夏天，SkyBro的指导下，半小时内学会了双手合奏《小星星》，我这学习速度令自己都震惊不已，~~低调低调~~，记得前几周我看了刘谦3周自学钢琴的B站视频（BV1Wt4y1r7km），评论区很多网友皆表示不可思议太厉害了，我心想真的没有你们想的那么难😂，可能外行人看门道内行人看笑话吧。其实我学琴前还一直不能理解，一个人的大脑是如何做到让两只手弹不同的音，But now，I've got it and made it!!! 如果有机会有心情，我可能会写我是如何快速上手钢琴的博客，没人看的话就当作自己的记录叭（这是在提前给自己挖坑？hh））</span></span>。然后，谈谈嘻哈这一块，我本人最喜欢的音乐风格是说唱，大概是从 17 年《有嘻哈》开始，在那之前有接触过嘻哈文化，当时只是觉得很酷但不知道那叫嘻哈（嘻哈四大板块：滑板、涂鸦、说唱、街舞），当然我这里只谈说唱，2020 年的计划是创作 2 首歌，但我只写了部分歌词（多个主题的），直到近几周我才考虑制作和发歌的问题，当然发歌只是为了好玩，愉悦自己，若能得到他人的赞美和共情也是我愿意看到的。制作方面的问题，目前也没有时间、金钱、经历和精力去学习正规流程的制作，我现在只能利用库乐队和 AU 来制作，其实库乐队和 AU 对于小白来说够了，库乐队甚至能使用 Auto-Tune 插件，记得当时买到插件的那一刻激动 s 我了，你能想象一个大男人对着 iPad 傻叫，然后监听自己加了 AT 效果的声音，最后边笑边听到自己实时电音效果的笑声后笑的愈演愈烈的场景吗？也许每个喜欢用 AT 的音乐人第一次使用它的场景跟我一样吧？可能只有我一个人私下的 reaction 太浮夸了。。最后，年初之时我还想着提高自己的 freestyle 的能力，可能有些人会问学这有啥用？你这是要参加《新说唱 x》《青你 x》《创 x》么？Nah！Not at all！只是为了愉悦自己，其实有时候在好友面前随便 free 几句还是蛮好玩，能活跃气氛。所以，为了提高 freestyle 能力，我有段时间专门看爆音（我称之为“中国即兴说唱之父”）直播的录播视频，深深佩服于他脑袋瓜的灵活、思维的转换能力、内容素材的丰富和押韵技巧的高超，总之学到了很多技巧和知识。<span class="hide-inline"><button type="button" class="hide-button button--animated" style="background-color: #81d8cf;color: #fff">🎵 新歌预告  </button><span class="hide-content">（如果两大平台审核能通过并且不出什么意外的话，2.14号会发首R&B（节奏布鲁斯风格）情歌，寒假结束前会发首Melodic Trap（旋律陷阱音乐））</span></span></p><p>以上就是我对 2020 的总结。</p><h2 id="🐮-展望-2021"><a href="#🐮-展望-2021" class="headerlink" title="🐮 展望 2021"></a>🐮 展望 2021</h2><p>今年的计划与上一年有些许不同，简单说说大致不同和对自己的憧憬吧！</p><p><img src= "https://cdn.jsdelivr.net/gh/hassanblog/hassanblog.github.io/hassan/loading.gif" data-lazy-src="https://cdn.jsdelivr.net/gh/hassanblog/CDN@v20210401/posts/2020Summary&2021Target/2021Target.png" alt="2021Target"></p><p>从板块上来说，<strong>健康</strong>板块增加了俯卧撑，虽然去年没有加，但实际上我有在执行这一项，请忽略我的完美主义（🦁 座还有这？）。<strong>学习</strong>板块，英语这里我计划是 2021 年和雅思菇凉分手，啊这，这不才谈了几天，就考虑分手的事情吗？对！I should find a new one! 然后词汇量破 10,000，这应该是雅思前任们的标配吧？maybe。然后计算机重点是学会建站，我可能和建站杠上了，因为两学期了，还是不会，之前老师教的时候，没怎么听，于是乎。。成绩方面稍微提高了目标分数，当然重点还是学习过程鸭，学到真本领才是真，鸭梨不要太大。自控方面添加了时间管理，<del>可能是受了亚洲舞王事件的影响</del>，但讲道理时间管理确实很重要，人的一生也就活个 30,000 天左右，没有多少时间给你去挥霍（wait! 我在写鸡汤吗？？）。再就是证书，增加了雅思、蓝桥杯和计算机四级。技能方面增加了绘画，毕竟去年氪金了 iPad Pro 2020 和 Apple Pencil Ⅱ，不整点活儿？当然有时间精力的话会学的，毕竟自己也有部分这方面的爱好，有时候爱好多了也不是件好事 🤔，所以时间管理很重要，适当分配时间陶怡情操。<strong>收入</strong>板块，尽量一等奖，赚钱也不强求，计算机学好了是不屑于学生时代赚的 mula。<strong>外延与内涵</strong>板块，增加了提高双商和干就完了别想太多两点，与其说是新年计划不如说是我对自己的要求，这应该是伴随自己一辈子的自我要求。<strong>视频</strong>板块删除很多地方，人的经历有限，只留下了拍照片、学习拍摄技巧和收藏剪辑素材这三大计划，至少 2021 年执行性很高。<strong>音乐</strong>板块，钢琴是还会继续学习的，嘻哈创作也会继续，<del>除非某一天江郎才尽</del>。</p><p>从思维导图整体上来说，一些图标、样式和英语表达有细微修改，布局有改变，取消了<strong>活动</strong>和<strong>情感</strong>两大板块，一是大三大四了，参与活动什么的不重要了，二是情感不能成为目标，要为自己未来人生深思熟虑，绝不能意气用事。</p><p>以上就是我对 2021 的展望，写了一下午的时间外加零碎时间的修改。Keep Moving!</p><blockquote><p><strong>结束语</strong>：</p><p>洋洋洒洒五千字，当做自己 2020~2021 人生轨迹的一个记录吧，期待一年后崭新的自己。<br>“苟日新，日日新，又日新”——《礼记·大学》</p></blockquote>]]></content>
    
    
    <summary type="html">爆竹声中一岁除，春风送暖入屠苏。千门万户曈曈日，总把新桃换旧符。</summary>
    
    
    
    <category term="💬茶余饭后" scheme="https://hassanwong.top/categories/%F0%9F%92%AC%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
    
    <category term="🎯计划" scheme="https://hassanwong.top/tags/%F0%9F%8E%AF%E8%AE%A1%E5%88%92/"/>
    
  </entry>
  
  <entry>
    <title>㊙ 那些年追过的星</title>
    <link href="https://hassanwong.top/posts/1a52f92/"/>
    <id>https://hassanwong.top/posts/1a52f92/</id>
    <published>2020-11-27T08:49:00.000Z</published>
    <updated>2021-03-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="咒语念错了！" data-whm="OOPS, these decrypted content may changed, but you can still have a look.">  <script id="hbeData" type="hbeData" data-hmacdigest="9ce9dd5fc3c607f22046f142cebe257b5daf96f7a55422e83e569022cc034f41"></script>  <div class="hbe hbe-content">    <div class="hbe hbe-input hbe-input-default">      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">        <span class="hbe hbe-input-label-content hbe-input-label-content-default">文章被伏地魔封印了，需要咒语来解除！</span>      </label>    </div>  </div></div><script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
    
    
    <summary type="html">按照时间顺序记录我在青春年华追过的⭐（仍在编辑中，有点羞，先设个密不许看hh）</summary>
    
    
    
    <category term="💬茶余饭后" scheme="https://hassanwong.top/categories/%F0%9F%92%AC%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
    
    <category term="🎉娱乐" scheme="https://hassanwong.top/tags/%F0%9F%8E%89%E5%A8%B1%E4%B9%90/"/>
    
    <category term="🍀青春" scheme="https://hassanwong.top/tags/%F0%9F%8D%80%E9%9D%92%E6%98%A5/"/>
    
  </entry>
  
  <entry>
    <title>我的第一篇博客</title>
    <link href="https://hassanwong.top/posts/d95d7e09/"/>
    <id>https://hassanwong.top/posts/d95d7e09/</id>
    <published>2020-11-22T13:24:00.000Z</published>
    <updated>2021-03-25T13:12:00.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="心中之-🔥-再次燃起"><a href="#心中之-🔥-再次燃起" class="headerlink" title="心中之 🔥 再次燃起"></a>心中之 🔥 再次燃起</h3><p>今天是 2020-11-22，我决定开始写我人生中真正意义上的第一篇博客。说到博客，对我来说一直都是件很头疼的事情。第一次正儿八经地听说博客这个东西，是 19 年 10 月份的一个学院小讲堂上，当时主讲人夏学长教我们如何搭建博客、更改主题等等知识，最后确实搭建成功了，开始还很欣喜，但觉着搭建博客是件非常麻烦耗时的事情，加上自己也是小白，没经验更没时间捣鼓，于是就放弃了一段时间。就在今年的 2 月份，我突然改变主意，感觉用 CSDN 写博客是个不错的选择，说实话它的使用感非常方便，毕竟别人什么都给你做了，你只需要上传你的博客即可，各大引擎都能搜索到你的文章，不用费劲等待各大引擎爸爸的收录，当然除了我那几天上传的 2 个博客以外，就再也没有上传过了，心有余而力不足，懒癌晚期 😤。直到近几天，学校的课程实在是学不进去，我突然心血来潮，就又开始花时间钻研捣鼓，惊讶的是很快就上手了，比如改主题，发博客，网站的美化和魔改等等都容易许多，可能随着自己知识的增加，有些之前遇到的难题就迎刃而解了。当前，我已把网站主题 Yilia 更改为 Butterfly，记得我花了很多时间在找主题上，官网里面一百来个主题反反复复看都没有钟意的 😂，最后还是搜索找到了这个”风靡全网“的主题，非常符合自己的审美。以后有空的话，我会一点点完善和美化本博客。</p><h3 id="博客里会有哪些内容？"><a href="#博客里会有哪些内容？" class="headerlink" title="博客里会有哪些内容？"></a>博客里会有哪些内容？</h3><p>Whatever I want! 但主要还是计算机相关学习内容，记一下自己的学习笔记，码一些我觉得有用的干货，如果能顺便帮到大伙，真的是无心插柳柳成荫，这是我愿意看到的！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;心中之-🔥-再次燃起&quot;&gt;&lt;a href=&quot;#心中之-🔥-再次燃起&quot; class=&quot;headerlink&quot; title=&quot;心中之 🔥 再次燃起&quot;&gt;&lt;/a&gt;心中之 🔥 再次燃起&lt;/h3&gt;&lt;p&gt;今天是 2020-11-22，我决定开始写我人生中真正意义上的第一篇</summary>
      
    
    
    
    <category term="💬茶余饭后" scheme="https://hassanwong.top/categories/%F0%9F%92%AC%E8%8C%B6%E4%BD%99%E9%A5%AD%E5%90%8E/"/>
    
    
    <category term="📝博客" scheme="https://hassanwong.top/tags/%F0%9F%93%9D%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
